(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/platform-browser'), require('@angular/core'), require('devextreme/ui/diagram'), require('devextreme-angular/core'), require('devextreme-angular/ui/nested')) :
    typeof define === 'function' && define.amd ? define('devextreme-angular/ui/diagram', ['exports', '@angular/platform-browser', '@angular/core', 'devextreme/ui/diagram', 'devextreme-angular/core', 'devextreme-angular/ui/nested'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["devextreme-angular"] = global["devextreme-angular"] || {}, global["devextreme-angular"].ui = global["devextreme-angular"].ui || {}, global["devextreme-angular"].ui.diagram = {}), global.ng.platformBrowser, global.ng.core, global.DxDiagram, global["devextreme-angular"].core, global["devextreme-angular"].ui.nested));
})(this, (function (exports, i2, i0, DxDiagram, i1, nested) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var DxDiagram__default = /*#__PURE__*/_interopDefaultLegacy(DxDiagram);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    function __createBinding(o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    }
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                exports[p] = m[p];
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    result[k] = mod[k];
        result.default = mod;
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * The Diagram UI component provides a visual interface to help you design new and modify existing diagrams.

     */
    var DxDiagramComponent = /** @class */ (function (_super) {
        __extends(DxDiagramComponent, _super);
        function DxDiagramComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
            var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;
            _this._watcherHelper = _watcherHelper;
            _this._idh = _idh;
            _this._createEventEmitters([
                { subscribe: 'contentReady', emit: 'onContentReady' },
                { subscribe: 'customCommand', emit: 'onCustomCommand' },
                { subscribe: 'disposing', emit: 'onDisposing' },
                { subscribe: 'initialized', emit: 'onInitialized' },
                { subscribe: 'itemClick', emit: 'onItemClick' },
                { subscribe: 'itemDblClick', emit: 'onItemDblClick' },
                { subscribe: 'optionChanged', emit: 'onOptionChanged' },
                { subscribe: 'requestEditOperation', emit: 'onRequestEditOperation' },
                { subscribe: 'requestLayoutUpdate', emit: 'onRequestLayoutUpdate' },
                { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },
                { emit: 'autoZoomModeChange' },
                { emit: 'contextMenuChange' },
                { emit: 'contextToolboxChange' },
                { emit: 'customShapesChange' },
                { emit: 'customShapeTemplateChange' },
                { emit: 'customShapeToolboxTemplateChange' },
                { emit: 'defaultItemPropertiesChange' },
                { emit: 'disabledChange' },
                { emit: 'edgesChange' },
                { emit: 'editingChange' },
                { emit: 'elementAttrChange' },
                { emit: 'exportChange' },
                { emit: 'fullScreenChange' },
                { emit: 'gridSizeChange' },
                { emit: 'hasChangesChange' },
                { emit: 'heightChange' },
                { emit: 'historyToolbarChange' },
                { emit: 'mainToolbarChange' },
                { emit: 'nodesChange' },
                { emit: 'pageColorChange' },
                { emit: 'pageOrientationChange' },
                { emit: 'pageSizeChange' },
                { emit: 'propertiesPanelChange' },
                { emit: 'readOnlyChange' },
                { emit: 'rtlEnabledChange' },
                { emit: 'showGridChange' },
                { emit: 'simpleViewChange' },
                { emit: 'snapToGridChange' },
                { emit: 'toolboxChange' },
                { emit: 'unitsChange' },
                { emit: 'useNativeScrollingChange' },
                { emit: 'viewToolbarChange' },
                { emit: 'viewUnitsChange' },
                { emit: 'visibleChange' },
                { emit: 'widthChange' },
                { emit: 'zoomLevelChange' }
            ]);
            _this._idh.setHost(_this);
            optionHost.setHost(_this);
            return _this;
        }
        Object.defineProperty(DxDiagramComponent.prototype, "autoZoomMode", {
            /**
             * Specifies how the Diagram UI component automatically zooms the work area.
            
             */
            get: function () {
                return this._getOption('autoZoomMode');
            },
            set: function (value) {
                this._setOption('autoZoomMode', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "contextMenu", {
            /**
             * Configures the context menu&apos;s settings.
            
             */
            get: function () {
                return this._getOption('contextMenu');
            },
            set: function (value) {
                this._setOption('contextMenu', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "contextToolbox", {
            /**
             * Configures the context toolbox&apos;s settings.
            
             */
            get: function () {
                return this._getOption('contextToolbox');
            },
            set: function (value) {
                this._setOption('contextToolbox', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "customShapes", {
            /**
             * Provide access to an array of custom shapes.
            
             */
            get: function () {
                return this._getOption('customShapes');
            },
            set: function (value) {
                this._setOption('customShapes', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "customShapeTemplate", {
            /**
             * Specifies a custom template for shapes.
            
             */
            get: function () {
                return this._getOption('customShapeTemplate');
            },
            set: function (value) {
                this._setOption('customShapeTemplate', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "customShapeToolboxTemplate", {
            /**
             * Specifies a custom template for shapes in the toolbox.
            
             */
            get: function () {
                return this._getOption('customShapeToolboxTemplate');
            },
            set: function (value) {
                this._setOption('customShapeToolboxTemplate', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "defaultItemProperties", {
            /**
             * Configures default item properties.
            
             */
            get: function () {
                return this._getOption('defaultItemProperties');
            },
            set: function (value) {
                this._setOption('defaultItemProperties', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "disabled", {
            /**
             * Specifies whether the UI component responds to user interaction.
            
             */
            get: function () {
                return this._getOption('disabled');
            },
            set: function (value) {
                this._setOption('disabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "edges", {
            /**
             * Allows you to bind the collection of diagram edges to a data source. For more information, see the Data Binding section.
            
             */
            get: function () {
                return this._getOption('edges');
            },
            set: function (value) {
                this._setOption('edges', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "editing", {
            /**
             * Specifies which editing operations a user can perform.
            
             */
            get: function () {
                return this._getOption('editing');
            },
            set: function (value) {
                this._setOption('editing', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "elementAttr", {
            /**
             * Specifies the global attributes to be attached to the UI component&apos;s container element.
            
             */
            get: function () {
                return this._getOption('elementAttr');
            },
            set: function (value) {
                this._setOption('elementAttr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "export", {
            /**
             * Configures export settings.
            
             */
            get: function () {
                return this._getOption('export');
            },
            set: function (value) {
                this._setOption('export', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "fullScreen", {
            /**
             * Specifies whether or not to display the UI component in full-screen mode.
            
             */
            get: function () {
                return this._getOption('fullScreen');
            },
            set: function (value) {
                this._setOption('fullScreen', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "gridSize", {
            /**
             * Specifies the grid pitch.
            
             */
            get: function () {
                return this._getOption('gridSize');
            },
            set: function (value) {
                this._setOption('gridSize', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "hasChanges", {
            /**
             * Indicates whether diagram content has unsaved changes.
            
             */
            get: function () {
                return this._getOption('hasChanges');
            },
            set: function (value) {
                this._setOption('hasChanges', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "height", {
            /**
             * Specifies the UI component&apos;s height.
            
             */
            get: function () {
                return this._getOption('height');
            },
            set: function (value) {
                this._setOption('height', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "historyToolbar", {
            /**
             * Configures the history toolbar&apos;s settings.
            
             */
            get: function () {
                return this._getOption('historyToolbar');
            },
            set: function (value) {
                this._setOption('historyToolbar', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "mainToolbar", {
            /**
             * Configures the main toolbar settings.
            
             */
            get: function () {
                return this._getOption('mainToolbar');
            },
            set: function (value) {
                this._setOption('mainToolbar', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "nodes", {
            /**
             * Allows you to bind the collection of diagram nodes to a data source. For more information, see the Data Binding section.
            
             */
            get: function () {
                return this._getOption('nodes');
            },
            set: function (value) {
                this._setOption('nodes', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "pageColor", {
            /**
             * Specifies the color of a diagram page.
            
             */
            get: function () {
                return this._getOption('pageColor');
            },
            set: function (value) {
                this._setOption('pageColor', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "pageOrientation", {
            /**
             * Specifies the page orientation.
            
             */
            get: function () {
                return this._getOption('pageOrientation');
            },
            set: function (value) {
                this._setOption('pageOrientation', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "pageSize", {
            /**
             * Specifies a size of pages.
            
             */
            get: function () {
                return this._getOption('pageSize');
            },
            set: function (value) {
                this._setOption('pageSize', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "propertiesPanel", {
            /**
             * Configures the Properties panel settings.
            
             */
            get: function () {
                return this._getOption('propertiesPanel');
            },
            set: function (value) {
                this._setOption('propertiesPanel', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "readOnly", {
            /**
             * Specifies whether the diagram is read-only.
            
             */
            get: function () {
                return this._getOption('readOnly');
            },
            set: function (value) {
                this._setOption('readOnly', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "rtlEnabled", {
            /**
             * Switches the UI component to a right-to-left representation.
            
             */
            get: function () {
                return this._getOption('rtlEnabled');
            },
            set: function (value) {
                this._setOption('rtlEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "showGrid", {
            /**
             * Specifies whether grid lines are visible.
            
             */
            get: function () {
                return this._getOption('showGrid');
            },
            set: function (value) {
                this._setOption('showGrid', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "simpleView", {
            /**
             * Switch the Diagram UI component to simple view mode.
            
             */
            get: function () {
                return this._getOption('simpleView');
            },
            set: function (value) {
                this._setOption('simpleView', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "snapToGrid", {
            /**
             * Specifies whether diagram elements should snap to grid lines.
            
             */
            get: function () {
                return this._getOption('snapToGrid');
            },
            set: function (value) {
                this._setOption('snapToGrid', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "toolbox", {
            /**
             * Configures the toolbox settings.
            
             */
            get: function () {
                return this._getOption('toolbox');
            },
            set: function (value) {
                this._setOption('toolbox', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "units", {
            /**
             * Specifies the measurement unit for size properties.
            
             */
            get: function () {
                return this._getOption('units');
            },
            set: function (value) {
                this._setOption('units', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "useNativeScrolling", {
            /**
             * Specifies whether or not the UI component uses native scrolling.
            
             */
            get: function () {
                return this._getOption('useNativeScrolling');
            },
            set: function (value) {
                this._setOption('useNativeScrolling', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "viewToolbar", {
            /**
             * Configures the view toolbar settings.
            
             */
            get: function () {
                return this._getOption('viewToolbar');
            },
            set: function (value) {
                this._setOption('viewToolbar', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "viewUnits", {
            /**
             * Specifies the measurement unit that is displayed in user interface elements.
            
             */
            get: function () {
                return this._getOption('viewUnits');
            },
            set: function (value) {
                this._setOption('viewUnits', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "visible", {
            /**
             * Specifies whether the UI component is visible.
            
             */
            get: function () {
                return this._getOption('visible');
            },
            set: function (value) {
                this._setOption('visible', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "width", {
            /**
             * Specifies the UI component&apos;s width.
            
             */
            get: function () {
                return this._getOption('width');
            },
            set: function (value) {
                this._setOption('width', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "zoomLevel", {
            /**
             * Specifies the zoom level.
            
             */
            get: function () {
                return this._getOption('zoomLevel');
            },
            set: function (value) {
                this._setOption('zoomLevel', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDiagramComponent.prototype, "customShapesChildren", {
            get: function () {
                return this._getOption('customShapes');
            },
            set: function (value) {
                this.setChildren('customShapes', value);
            },
            enumerable: false,
            configurable: true
        });
        DxDiagramComponent.prototype._createInstance = function (element, options) {
            return new DxDiagram__default["default"](element, options);
        };
        DxDiagramComponent.prototype.ngOnDestroy = function () {
            this._destroyWidget();
        };
        DxDiagramComponent.prototype.ngOnChanges = function (changes) {
            _super.prototype.ngOnChanges.call(this, changes);
            this.setupChanges('customShapes', changes);
        };
        DxDiagramComponent.prototype.setupChanges = function (prop, changes) {
            if (!(prop in this._optionsToUpdate)) {
                this._idh.setup(prop, changes);
            }
        };
        DxDiagramComponent.prototype.ngDoCheck = function () {
            this._idh.doCheck('customShapes');
            this._watcherHelper.checkWatchers();
            _super.prototype.ngDoCheck.call(this);
            _super.prototype.clearChangedOptions.call(this);
        };
        DxDiagramComponent.prototype._setOption = function (name, value) {
            var isSetup = this._idh.setupSingle(name, value);
            var isChanged = this._idh.getChanges(name, value) !== null;
            if (isSetup || isChanged) {
                _super.prototype._setOption.call(this, name, value);
            }
        };
        return DxDiagramComponent;
    }(i1.DxComponent));
    /** @nocollapse */ DxDiagramComponent.ɵfac = function DxDiagramComponent_Factory(t) { return new (t || DxDiagramComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef), i0__namespace.ɵɵdirectiveInject(i0__namespace.NgZone), i0__namespace.ɵɵdirectiveInject(i1__namespace.DxTemplateHost), i0__namespace.ɵɵdirectiveInject(i1__namespace.WatcherHelper), i0__namespace.ɵɵdirectiveInject(i1__namespace.IterableDifferHelper), i0__namespace.ɵɵdirectiveInject(i1__namespace.NestedOptionHost), i0__namespace.ɵɵdirectiveInject(i2__namespace.TransferState), i0__namespace.ɵɵdirectiveInject(i0.PLATFORM_ID)); };
    /** @nocollapse */ DxDiagramComponent.ɵcmp = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineComponent({ type: DxDiagramComponent, selectors: [["dx-diagram"]], contentQueries: function DxDiagramComponent_ContentQueries(rf, ctx, dirIndex) {
            if (rf & 1) {
                i0__namespace.ɵɵcontentQuery(dirIndex, nested.DxiCustomShapeComponent, 4);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.customShapesChildren = _t);
            }
        }, inputs: { autoZoomMode: "autoZoomMode", contextMenu: "contextMenu", contextToolbox: "contextToolbox", customShapes: "customShapes", customShapeTemplate: "customShapeTemplate", customShapeToolboxTemplate: "customShapeToolboxTemplate", defaultItemProperties: "defaultItemProperties", disabled: "disabled", edges: "edges", editing: "editing", elementAttr: "elementAttr", export: "export", fullScreen: "fullScreen", gridSize: "gridSize", hasChanges: "hasChanges", height: "height", historyToolbar: "historyToolbar", mainToolbar: "mainToolbar", nodes: "nodes", pageColor: "pageColor", pageOrientation: "pageOrientation", pageSize: "pageSize", propertiesPanel: "propertiesPanel", readOnly: "readOnly", rtlEnabled: "rtlEnabled", showGrid: "showGrid", simpleView: "simpleView", snapToGrid: "snapToGrid", toolbox: "toolbox", units: "units", useNativeScrolling: "useNativeScrolling", viewToolbar: "viewToolbar", viewUnits: "viewUnits", visible: "visible", width: "width", zoomLevel: "zoomLevel" }, outputs: { onContentReady: "onContentReady", onCustomCommand: "onCustomCommand", onDisposing: "onDisposing", onInitialized: "onInitialized", onItemClick: "onItemClick", onItemDblClick: "onItemDblClick", onOptionChanged: "onOptionChanged", onRequestEditOperation: "onRequestEditOperation", onRequestLayoutUpdate: "onRequestLayoutUpdate", onSelectionChanged: "onSelectionChanged", autoZoomModeChange: "autoZoomModeChange", contextMenuChange: "contextMenuChange", contextToolboxChange: "contextToolboxChange", customShapesChange: "customShapesChange", customShapeTemplateChange: "customShapeTemplateChange", customShapeToolboxTemplateChange: "customShapeToolboxTemplateChange", defaultItemPropertiesChange: "defaultItemPropertiesChange", disabledChange: "disabledChange", edgesChange: "edgesChange", editingChange: "editingChange", elementAttrChange: "elementAttrChange", exportChange: "exportChange", fullScreenChange: "fullScreenChange", gridSizeChange: "gridSizeChange", hasChangesChange: "hasChangesChange", heightChange: "heightChange", historyToolbarChange: "historyToolbarChange", mainToolbarChange: "mainToolbarChange", nodesChange: "nodesChange", pageColorChange: "pageColorChange", pageOrientationChange: "pageOrientationChange", pageSizeChange: "pageSizeChange", propertiesPanelChange: "propertiesPanelChange", readOnlyChange: "readOnlyChange", rtlEnabledChange: "rtlEnabledChange", showGridChange: "showGridChange", simpleViewChange: "simpleViewChange", snapToGridChange: "snapToGridChange", toolboxChange: "toolboxChange", unitsChange: "unitsChange", useNativeScrollingChange: "useNativeScrollingChange", viewToolbarChange: "viewToolbarChange", viewUnitsChange: "viewUnitsChange", visibleChange: "visibleChange", widthChange: "widthChange", zoomLevelChange: "zoomLevelChange" }, features: [i0__namespace.ɵɵProvidersFeature([
                i1.DxTemplateHost,
                i1.WatcherHelper,
                i1.NestedOptionHost,
                i1.IterableDifferHelper
            ]), i0__namespace.ɵɵInheritDefinitionFeature, i0__namespace.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function DxDiagramComponent_Template(rf, ctx) { }, encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DxDiagramComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'dx-diagram',
                        template: '',
                        providers: [
                            i1.DxTemplateHost,
                            i1.WatcherHelper,
                            i1.NestedOptionHost,
                            i1.IterableDifferHelper
                        ]
                    }]
            }], function () {
            return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.NgZone }, { type: i1__namespace.DxTemplateHost }, { type: i1__namespace.WatcherHelper }, { type: i1__namespace.IterableDifferHelper }, { type: i1__namespace.NestedOptionHost }, { type: i2__namespace.TransferState }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.PLATFORM_ID]
                        }] }];
        }, { autoZoomMode: [{
                    type: i0.Input
                }], contextMenu: [{
                    type: i0.Input
                }], contextToolbox: [{
                    type: i0.Input
                }], customShapes: [{
                    type: i0.Input
                }], customShapeTemplate: [{
                    type: i0.Input
                }], customShapeToolboxTemplate: [{
                    type: i0.Input
                }], defaultItemProperties: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], edges: [{
                    type: i0.Input
                }], editing: [{
                    type: i0.Input
                }], elementAttr: [{
                    type: i0.Input
                }], export: [{
                    type: i0.Input
                }], fullScreen: [{
                    type: i0.Input
                }], gridSize: [{
                    type: i0.Input
                }], hasChanges: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], historyToolbar: [{
                    type: i0.Input
                }], mainToolbar: [{
                    type: i0.Input
                }], nodes: [{
                    type: i0.Input
                }], pageColor: [{
                    type: i0.Input
                }], pageOrientation: [{
                    type: i0.Input
                }], pageSize: [{
                    type: i0.Input
                }], propertiesPanel: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], rtlEnabled: [{
                    type: i0.Input
                }], showGrid: [{
                    type: i0.Input
                }], simpleView: [{
                    type: i0.Input
                }], snapToGrid: [{
                    type: i0.Input
                }], toolbox: [{
                    type: i0.Input
                }], units: [{
                    type: i0.Input
                }], useNativeScrolling: [{
                    type: i0.Input
                }], viewToolbar: [{
                    type: i0.Input
                }], viewUnits: [{
                    type: i0.Input
                }], visible: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], zoomLevel: [{
                    type: i0.Input
                }], onContentReady: [{
                    type: i0.Output
                }], onCustomCommand: [{
                    type: i0.Output
                }], onDisposing: [{
                    type: i0.Output
                }], onInitialized: [{
                    type: i0.Output
                }], onItemClick: [{
                    type: i0.Output
                }], onItemDblClick: [{
                    type: i0.Output
                }], onOptionChanged: [{
                    type: i0.Output
                }], onRequestEditOperation: [{
                    type: i0.Output
                }], onRequestLayoutUpdate: [{
                    type: i0.Output
                }], onSelectionChanged: [{
                    type: i0.Output
                }], autoZoomModeChange: [{
                    type: i0.Output
                }], contextMenuChange: [{
                    type: i0.Output
                }], contextToolboxChange: [{
                    type: i0.Output
                }], customShapesChange: [{
                    type: i0.Output
                }], customShapeTemplateChange: [{
                    type: i0.Output
                }], customShapeToolboxTemplateChange: [{
                    type: i0.Output
                }], defaultItemPropertiesChange: [{
                    type: i0.Output
                }], disabledChange: [{
                    type: i0.Output
                }], edgesChange: [{
                    type: i0.Output
                }], editingChange: [{
                    type: i0.Output
                }], elementAttrChange: [{
                    type: i0.Output
                }], exportChange: [{
                    type: i0.Output
                }], fullScreenChange: [{
                    type: i0.Output
                }], gridSizeChange: [{
                    type: i0.Output
                }], hasChangesChange: [{
                    type: i0.Output
                }], heightChange: [{
                    type: i0.Output
                }], historyToolbarChange: [{
                    type: i0.Output
                }], mainToolbarChange: [{
                    type: i0.Output
                }], nodesChange: [{
                    type: i0.Output
                }], pageColorChange: [{
                    type: i0.Output
                }], pageOrientationChange: [{
                    type: i0.Output
                }], pageSizeChange: [{
                    type: i0.Output
                }], propertiesPanelChange: [{
                    type: i0.Output
                }], readOnlyChange: [{
                    type: i0.Output
                }], rtlEnabledChange: [{
                    type: i0.Output
                }], showGridChange: [{
                    type: i0.Output
                }], simpleViewChange: [{
                    type: i0.Output
                }], snapToGridChange: [{
                    type: i0.Output
                }], toolboxChange: [{
                    type: i0.Output
                }], unitsChange: [{
                    type: i0.Output
                }], useNativeScrollingChange: [{
                    type: i0.Output
                }], viewToolbarChange: [{
                    type: i0.Output
                }], viewUnitsChange: [{
                    type: i0.Output
                }], visibleChange: [{
                    type: i0.Output
                }], widthChange: [{
                    type: i0.Output
                }], zoomLevelChange: [{
                    type: i0.Output
                }], customShapesChildren: [{
                    type: i0.ContentChildren,
                    args: [nested.DxiCustomShapeComponent]
                }] });
    })();
    var DxDiagramModule = /** @class */ (function () {
        function DxDiagramModule() {
        }
        return DxDiagramModule;
    }());
    /** @nocollapse */ DxDiagramModule.ɵfac = function DxDiagramModule_Factory(t) { return new (t || DxDiagramModule)(); };
    /** @nocollapse */ DxDiagramModule.ɵmod = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineNgModule({ type: DxDiagramModule });
    /** @nocollapse */ DxDiagramModule.ɵinj = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineInjector({ imports: [[
                nested.DxoContextMenuModule,
                nested.DxiCommandModule,
                nested.DxiItemModule,
                nested.DxoContextToolboxModule,
                nested.DxiCustomShapeModule,
                nested.DxiConnectionPointModule,
                nested.DxoDefaultItemPropertiesModule,
                nested.DxoEdgesModule,
                nested.DxoEditingModule,
                nested.DxoExportModule,
                nested.DxoGridSizeModule,
                nested.DxoHistoryToolbarModule,
                nested.DxoMainToolbarModule,
                nested.DxoNodesModule,
                nested.DxoAutoLayoutModule,
                nested.DxoPageSizeModule,
                nested.DxoPropertiesPanelModule,
                nested.DxiTabModule,
                nested.DxiGroupModule,
                nested.DxoToolboxModule,
                nested.DxoViewToolbarModule,
                nested.DxoZoomLevelModule,
                i1.DxIntegrationModule,
                i1.DxTemplateModule,
                i2.BrowserTransferStateModule
            ], nested.DxoContextMenuModule,
            nested.DxiCommandModule,
            nested.DxiItemModule,
            nested.DxoContextToolboxModule,
            nested.DxiCustomShapeModule,
            nested.DxiConnectionPointModule,
            nested.DxoDefaultItemPropertiesModule,
            nested.DxoEdgesModule,
            nested.DxoEditingModule,
            nested.DxoExportModule,
            nested.DxoGridSizeModule,
            nested.DxoHistoryToolbarModule,
            nested.DxoMainToolbarModule,
            nested.DxoNodesModule,
            nested.DxoAutoLayoutModule,
            nested.DxoPageSizeModule,
            nested.DxoPropertiesPanelModule,
            nested.DxiTabModule,
            nested.DxiGroupModule,
            nested.DxoToolboxModule,
            nested.DxoViewToolbarModule,
            nested.DxoZoomLevelModule,
            i1.DxTemplateModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DxDiagramModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            nested.DxoContextMenuModule,
                            nested.DxiCommandModule,
                            nested.DxiItemModule,
                            nested.DxoContextToolboxModule,
                            nested.DxiCustomShapeModule,
                            nested.DxiConnectionPointModule,
                            nested.DxoDefaultItemPropertiesModule,
                            nested.DxoEdgesModule,
                            nested.DxoEditingModule,
                            nested.DxoExportModule,
                            nested.DxoGridSizeModule,
                            nested.DxoHistoryToolbarModule,
                            nested.DxoMainToolbarModule,
                            nested.DxoNodesModule,
                            nested.DxoAutoLayoutModule,
                            nested.DxoPageSizeModule,
                            nested.DxoPropertiesPanelModule,
                            nested.DxiTabModule,
                            nested.DxiGroupModule,
                            nested.DxoToolboxModule,
                            nested.DxoViewToolbarModule,
                            nested.DxoZoomLevelModule,
                            i1.DxIntegrationModule,
                            i1.DxTemplateModule,
                            i2.BrowserTransferStateModule
                        ],
                        declarations: [
                            DxDiagramComponent
                        ],
                        exports: [
                            DxDiagramComponent,
                            nested.DxoContextMenuModule,
                            nested.DxiCommandModule,
                            nested.DxiItemModule,
                            nested.DxoContextToolboxModule,
                            nested.DxiCustomShapeModule,
                            nested.DxiConnectionPointModule,
                            nested.DxoDefaultItemPropertiesModule,
                            nested.DxoEdgesModule,
                            nested.DxoEditingModule,
                            nested.DxoExportModule,
                            nested.DxoGridSizeModule,
                            nested.DxoHistoryToolbarModule,
                            nested.DxoMainToolbarModule,
                            nested.DxoNodesModule,
                            nested.DxoAutoLayoutModule,
                            nested.DxoPageSizeModule,
                            nested.DxoPropertiesPanelModule,
                            nested.DxiTabModule,
                            nested.DxiGroupModule,
                            nested.DxoToolboxModule,
                            nested.DxoViewToolbarModule,
                            nested.DxoZoomLevelModule,
                            i1.DxTemplateModule
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(DxDiagramModule, { declarations: [DxDiagramComponent], imports: [nested.DxoContextMenuModule,
                nested.DxiCommandModule,
                nested.DxiItemModule,
                nested.DxoContextToolboxModule,
                nested.DxiCustomShapeModule,
                nested.DxiConnectionPointModule,
                nested.DxoDefaultItemPropertiesModule,
                nested.DxoEdgesModule,
                nested.DxoEditingModule,
                nested.DxoExportModule,
                nested.DxoGridSizeModule,
                nested.DxoHistoryToolbarModule,
                nested.DxoMainToolbarModule,
                nested.DxoNodesModule,
                nested.DxoAutoLayoutModule,
                nested.DxoPageSizeModule,
                nested.DxoPropertiesPanelModule,
                nested.DxiTabModule,
                nested.DxiGroupModule,
                nested.DxoToolboxModule,
                nested.DxoViewToolbarModule,
                nested.DxoZoomLevelModule,
                i1.DxIntegrationModule,
                i1.DxTemplateModule,
                i2.BrowserTransferStateModule], exports: [DxDiagramComponent, nested.DxoContextMenuModule,
                nested.DxiCommandModule,
                nested.DxiItemModule,
                nested.DxoContextToolboxModule,
                nested.DxiCustomShapeModule,
                nested.DxiConnectionPointModule,
                nested.DxoDefaultItemPropertiesModule,
                nested.DxoEdgesModule,
                nested.DxoEditingModule,
                nested.DxoExportModule,
                nested.DxoGridSizeModule,
                nested.DxoHistoryToolbarModule,
                nested.DxoMainToolbarModule,
                nested.DxoNodesModule,
                nested.DxoAutoLayoutModule,
                nested.DxoPageSizeModule,
                nested.DxoPropertiesPanelModule,
                nested.DxiTabModule,
                nested.DxiGroupModule,
                nested.DxoToolboxModule,
                nested.DxoViewToolbarModule,
                nested.DxoZoomLevelModule,
                i1.DxTemplateModule] });
    })();

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DxDiagramComponent = DxDiagramComponent;
    exports.DxDiagramModule = DxDiagramModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=devextreme-angular-ui-diagram.umd.js.map
