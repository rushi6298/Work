(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/platform-browser'), require('@angular/core'), require('devextreme/ui/drop_down_box'), require('@angular/forms'), require('devextreme-angular/core'), require('devextreme-angular/ui/nested')) :
    typeof define === 'function' && define.amd ? define('devextreme-angular/ui/drop-down-box', ['exports', '@angular/platform-browser', '@angular/core', 'devextreme/ui/drop_down_box', '@angular/forms', 'devextreme-angular/core', 'devextreme-angular/ui/nested'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["devextreme-angular"] = global["devextreme-angular"] || {}, global["devextreme-angular"].ui = global["devextreme-angular"].ui || {}, global["devextreme-angular"].ui["drop-down-box"] = {}), global.ng.platformBrowser, global.ng.core, global.DxDropDownBox, global.ng.forms, global["devextreme-angular"].core, global["devextreme-angular"].ui.nested));
})(this, (function (exports, i2, i0, DxDropDownBox, forms, i1, nested) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var DxDropDownBox__default = /*#__PURE__*/_interopDefaultLegacy(DxDropDownBox);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    function __createBinding(o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    }
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                exports[p] = m[p];
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    result[k] = mod[k];
        result.default = mod;
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var _c0 = ["*"];
    var CUSTOM_VALUE_ACCESSOR_PROVIDER = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return DxDropDownBoxComponent; }),
        multi: true
    };
    /**
     * The DropDownBox UI component consists of a text field, which displays the current value, and a drop-down field, which can contain any UI element.

     */
    var DxDropDownBoxComponent = /** @class */ (function (_super) {
        __extends(DxDropDownBoxComponent, _super);
        function DxDropDownBoxComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
            var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;
            _this._watcherHelper = _watcherHelper;
            _this._idh = _idh;
            _this.touched = function (_) { };
            _this._createEventEmitters([
                { subscribe: 'change', emit: 'onChange' },
                { subscribe: 'closed', emit: 'onClosed' },
                { subscribe: 'copy', emit: 'onCopy' },
                { subscribe: 'cut', emit: 'onCut' },
                { subscribe: 'disposing', emit: 'onDisposing' },
                { subscribe: 'enterKey', emit: 'onEnterKey' },
                { subscribe: 'focusIn', emit: 'onFocusIn' },
                { subscribe: 'focusOut', emit: 'onFocusOut' },
                { subscribe: 'initialized', emit: 'onInitialized' },
                { subscribe: 'input', emit: 'onInput' },
                { subscribe: 'keyDown', emit: 'onKeyDown' },
                { subscribe: 'keyUp', emit: 'onKeyUp' },
                { subscribe: 'opened', emit: 'onOpened' },
                { subscribe: 'optionChanged', emit: 'onOptionChanged' },
                { subscribe: 'paste', emit: 'onPaste' },
                { subscribe: 'valueChanged', emit: 'onValueChanged' },
                { emit: 'acceptCustomValueChange' },
                { emit: 'accessKeyChange' },
                { emit: 'activeStateEnabledChange' },
                { emit: 'buttonsChange' },
                { emit: 'contentTemplateChange' },
                { emit: 'dataSourceChange' },
                { emit: 'deferRenderingChange' },
                { emit: 'disabledChange' },
                { emit: 'displayExprChange' },
                { emit: 'displayValueFormatterChange' },
                { emit: 'dropDownButtonTemplateChange' },
                { emit: 'dropDownOptionsChange' },
                { emit: 'elementAttrChange' },
                { emit: 'fieldTemplateChange' },
                { emit: 'focusStateEnabledChange' },
                { emit: 'heightChange' },
                { emit: 'hintChange' },
                { emit: 'hoverStateEnabledChange' },
                { emit: 'inputAttrChange' },
                { emit: 'isValidChange' },
                { emit: 'itemsChange' },
                { emit: 'labelChange' },
                { emit: 'labelModeChange' },
                { emit: 'maxLengthChange' },
                { emit: 'nameChange' },
                { emit: 'openedChange' },
                { emit: 'openOnFieldClickChange' },
                { emit: 'placeholderChange' },
                { emit: 'readOnlyChange' },
                { emit: 'rtlEnabledChange' },
                { emit: 'showClearButtonChange' },
                { emit: 'showDropDownButtonChange' },
                { emit: 'stylingModeChange' },
                { emit: 'tabIndexChange' },
                { emit: 'textChange' },
                { emit: 'validationErrorChange' },
                { emit: 'validationErrorsChange' },
                { emit: 'validationMessageModeChange' },
                { emit: 'validationMessagePositionChange' },
                { emit: 'validationStatusChange' },
                { emit: 'valueChange' },
                { emit: 'valueChangeEventChange' },
                { emit: 'valueExprChange' },
                { emit: 'visibleChange' },
                { emit: 'widthChange' },
                { emit: 'onBlur' }
            ]);
            _this._idh.setHost(_this);
            optionHost.setHost(_this);
            return _this;
        }
        Object.defineProperty(DxDropDownBoxComponent.prototype, "acceptCustomValue", {
            /**
             * Specifies whether the UI component allows a user to enter a custom value.
            
             */
            get: function () {
                return this._getOption('acceptCustomValue');
            },
            set: function (value) {
                this._setOption('acceptCustomValue', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "accessKey", {
            /**
             * Specifies the shortcut key that sets focus on the UI component.
            
             */
            get: function () {
                return this._getOption('accessKey');
            },
            set: function (value) {
                this._setOption('accessKey', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "activeStateEnabled", {
            /**
             * Specifies whether the UI component changes its visual state as a result of user interaction.
            
             */
            get: function () {
                return this._getOption('activeStateEnabled');
            },
            set: function (value) {
                this._setOption('activeStateEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "buttons", {
            /**
             * Allows you to add custom buttons to the input text field.
            
             */
            get: function () {
                return this._getOption('buttons');
            },
            set: function (value) {
                this._setOption('buttons', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "contentTemplate", {
            /**
             * Specifies a custom template for the drop-down content.
            
             */
            get: function () {
                return this._getOption('contentTemplate');
            },
            set: function (value) {
                this._setOption('contentTemplate', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "dataSource", {
            /**
             * Binds the UI component to data.
            
             */
            get: function () {
                return this._getOption('dataSource');
            },
            set: function (value) {
                this._setOption('dataSource', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "deferRendering", {
            /**
             * Specifies whether to render the drop-down field&apos;s content when it is displayed. If false, the content is rendered immediately.
            
             */
            get: function () {
                return this._getOption('deferRendering');
            },
            set: function (value) {
                this._setOption('deferRendering', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "disabled", {
            /**
             * Specifies whether the UI component responds to user interaction.
            
             */
            get: function () {
                return this._getOption('disabled');
            },
            set: function (value) {
                this._setOption('disabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "displayExpr", {
            /**
             * Specifies the data field whose values should be displayed.
            
             */
            get: function () {
                return this._getOption('displayExpr');
            },
            set: function (value) {
                this._setOption('displayExpr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "displayValueFormatter", {
            /**
             * Customizes text before it is displayed in the input field.
            
             */
            get: function () {
                return this._getOption('displayValueFormatter');
            },
            set: function (value) {
                this._setOption('displayValueFormatter', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "dropDownButtonTemplate", {
            /**
             * Specifies a custom template for the drop-down button.
            
             */
            get: function () {
                return this._getOption('dropDownButtonTemplate');
            },
            set: function (value) {
                this._setOption('dropDownButtonTemplate', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "dropDownOptions", {
            /**
             * Configures the drop-down field which holds the content.
            
             */
            get: function () {
                return this._getOption('dropDownOptions');
            },
            set: function (value) {
                this._setOption('dropDownOptions', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "elementAttr", {
            /**
             * Specifies the global attributes to be attached to the UI component&apos;s container element.
            
             */
            get: function () {
                return this._getOption('elementAttr');
            },
            set: function (value) {
                this._setOption('elementAttr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "fieldTemplate", {
            /**
             * Specifies a custom template for the text field. Must contain the TextBox UI component.
            
             */
            get: function () {
                return this._getOption('fieldTemplate');
            },
            set: function (value) {
                this._setOption('fieldTemplate', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "focusStateEnabled", {
            /**
             * Specifies whether the UI component can be focused using keyboard navigation.
            
             */
            get: function () {
                return this._getOption('focusStateEnabled');
            },
            set: function (value) {
                this._setOption('focusStateEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "height", {
            /**
             * Specifies the UI component&apos;s height.
            
             */
            get: function () {
                return this._getOption('height');
            },
            set: function (value) {
                this._setOption('height', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "hint", {
            /**
             * Specifies text for a hint that appears when a user pauses on the UI component.
            
             */
            get: function () {
                return this._getOption('hint');
            },
            set: function (value) {
                this._setOption('hint', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "hoverStateEnabled", {
            /**
             * Specifies whether the UI component changes its state when a user pauses on it.
            
             */
            get: function () {
                return this._getOption('hoverStateEnabled');
            },
            set: function (value) {
                this._setOption('hoverStateEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "inputAttr", {
            /**
             * Specifies the attributes to be passed on to the underlying HTML element.
            
             */
            get: function () {
                return this._getOption('inputAttr');
            },
            set: function (value) {
                this._setOption('inputAttr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "isValid", {
            /**
             * Specifies or indicates whether the editor&apos;s value is valid.
            
             */
            get: function () {
                return this._getOption('isValid');
            },
            set: function (value) {
                this._setOption('isValid', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "items", {
            /**
             * An array of items used to synchronize the DropDownBox with an embedded UI component.
            
             */
            get: function () {
                return this._getOption('items');
            },
            set: function (value) {
                this._setOption('items', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "label", {
            /**
             * Specifies a text string used to annotate the editor&apos;s value.
            
             */
            get: function () {
                return this._getOption('label');
            },
            set: function (value) {
                this._setOption('label', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "labelMode", {
            /**
             * Specifies the label&apos;s display mode.
            
             */
            get: function () {
                return this._getOption('labelMode');
            },
            set: function (value) {
                this._setOption('labelMode', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "maxLength", {
            /**
             * Specifies the maximum number of characters you can enter into the textbox.
            
             */
            get: function () {
                return this._getOption('maxLength');
            },
            set: function (value) {
                this._setOption('maxLength', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "name", {
            /**
             * The value to be assigned to the `name` attribute of the underlying HTML element.
            
             */
            get: function () {
                return this._getOption('name');
            },
            set: function (value) {
                this._setOption('name', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "opened", {
            /**
             * Specifies whether or not the drop-down editor is displayed.
            
             */
            get: function () {
                return this._getOption('opened');
            },
            set: function (value) {
                this._setOption('opened', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "openOnFieldClick", {
            /**
             * Specifies whether a user can open the drop-down list by clicking a text field.
            
             */
            get: function () {
                return this._getOption('openOnFieldClick');
            },
            set: function (value) {
                this._setOption('openOnFieldClick', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "placeholder", {
            /**
             * Specifies a text string displayed when the editor&apos;s value is empty.
            
             */
            get: function () {
                return this._getOption('placeholder');
            },
            set: function (value) {
                this._setOption('placeholder', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "readOnly", {
            /**
             * Specifies whether the editor is read-only.
            
             */
            get: function () {
                return this._getOption('readOnly');
            },
            set: function (value) {
                this._setOption('readOnly', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "rtlEnabled", {
            /**
             * Switches the UI component to a right-to-left representation.
            
             */
            get: function () {
                return this._getOption('rtlEnabled');
            },
            set: function (value) {
                this._setOption('rtlEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "showClearButton", {
            /**
             * Specifies whether to display the Clear button in the UI component.
            
             */
            get: function () {
                return this._getOption('showClearButton');
            },
            set: function (value) {
                this._setOption('showClearButton', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "showDropDownButton", {
            /**
             * Specifies whether the drop-down button is visible.
            
             */
            get: function () {
                return this._getOption('showDropDownButton');
            },
            set: function (value) {
                this._setOption('showDropDownButton', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "stylingMode", {
            /**
             * Specifies how the UI component&apos;s text field is styled.
            
             */
            get: function () {
                return this._getOption('stylingMode');
            },
            set: function (value) {
                this._setOption('stylingMode', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "tabIndex", {
            /**
             * Specifies the number of the element when the Tab key is used for navigating.
            
             */
            get: function () {
                return this._getOption('tabIndex');
            },
            set: function (value) {
                this._setOption('tabIndex', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "text", {
            /**
             * The read-only property that holds the text displayed by the UI component input element.
            
             */
            get: function () {
                return this._getOption('text');
            },
            set: function (value) {
                this._setOption('text', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "validationError", {
            /**
             * Information on the broken validation rule. Contains the first item from the validationErrors array.
            
             */
            get: function () {
                return this._getOption('validationError');
            },
            set: function (value) {
                this._setOption('validationError', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "validationErrors", {
            /**
             * An array of the validation rules that failed.
            
             */
            get: function () {
                return this._getOption('validationErrors');
            },
            set: function (value) {
                this._setOption('validationErrors', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "validationMessageMode", {
            /**
             * Specifies how the message about the validation rules that are not satisfied by this editor&apos;s value is displayed.
            
             */
            get: function () {
                return this._getOption('validationMessageMode');
            },
            set: function (value) {
                this._setOption('validationMessageMode', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "validationMessagePosition", {
            /**
             * Specifies the position of a validation message relative to the component. The validation message describes the validation rules that this component&apos;s value does not satisfy.
            
             */
            get: function () {
                return this._getOption('validationMessagePosition');
            },
            set: function (value) {
                this._setOption('validationMessagePosition', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "validationStatus", {
            /**
             * Indicates or specifies the current validation status.
            
             */
            get: function () {
                return this._getOption('validationStatus');
            },
            set: function (value) {
                this._setOption('validationStatus', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "value", {
            /**
             * Specifies the currently selected value. May be an object if dataSource contains objects, the store key is specified, and valueExpr is not set.
            
             */
            get: function () {
                return this._getOption('value');
            },
            set: function (value) {
                this._setOption('value', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "valueChangeEvent", {
            /**
             * Specifies the DOM events after which the UI component&apos;s value should be updated.
            
             */
            get: function () {
                return this._getOption('valueChangeEvent');
            },
            set: function (value) {
                this._setOption('valueChangeEvent', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "valueExpr", {
            /**
             * Specifies which data field provides unique values to the UI component&apos;s value.
            
             */
            get: function () {
                return this._getOption('valueExpr');
            },
            set: function (value) {
                this._setOption('valueExpr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "visible", {
            /**
             * Specifies whether the UI component is visible.
            
             */
            get: function () {
                return this._getOption('visible');
            },
            set: function (value) {
                this._setOption('visible', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "width", {
            /**
             * Specifies the UI component&apos;s width.
            
             */
            get: function () {
                return this._getOption('width');
            },
            set: function (value) {
                this._setOption('width', value);
            },
            enumerable: false,
            configurable: true
        });
        DxDropDownBoxComponent.prototype.change = function (_) { };
        Object.defineProperty(DxDropDownBoxComponent.prototype, "buttonsChildren", {
            get: function () {
                return this._getOption('buttons');
            },
            set: function (value) {
                this.setChildren('buttons', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxDropDownBoxComponent.prototype, "itemsChildren", {
            get: function () {
                return this._getOption('items');
            },
            set: function (value) {
                this.setChildren('items', value);
            },
            enumerable: false,
            configurable: true
        });
        DxDropDownBoxComponent.prototype._createInstance = function (element, options) {
            return new DxDropDownBox__default["default"](element, options);
        };
        DxDropDownBoxComponent.prototype.writeValue = function (value) {
            this.eventHelper.lockedValueChangeEvent = true;
            this.value = value;
            this.eventHelper.lockedValueChangeEvent = false;
        };
        DxDropDownBoxComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        DxDropDownBoxComponent.prototype.registerOnChange = function (fn) { this.change = fn; };
        DxDropDownBoxComponent.prototype.registerOnTouched = function (fn) { this.touched = fn; };
        DxDropDownBoxComponent.prototype._createWidget = function (element) {
            var _this = this;
            _super.prototype._createWidget.call(this, element);
            this.instance.on('focusOut', function (e) {
                _this.eventHelper.fireNgEvent('onBlur', [e]);
            });
        };
        DxDropDownBoxComponent.prototype.ngOnDestroy = function () {
            this._destroyWidget();
        };
        DxDropDownBoxComponent.prototype.ngOnChanges = function (changes) {
            _super.prototype.ngOnChanges.call(this, changes);
            this.setupChanges('buttons', changes);
            this.setupChanges('dataSource', changes);
            this.setupChanges('items', changes);
            this.setupChanges('validationErrors', changes);
        };
        DxDropDownBoxComponent.prototype.setupChanges = function (prop, changes) {
            if (!(prop in this._optionsToUpdate)) {
                this._idh.setup(prop, changes);
            }
        };
        DxDropDownBoxComponent.prototype.ngDoCheck = function () {
            this._idh.doCheck('buttons');
            this._idh.doCheck('dataSource');
            this._idh.doCheck('items');
            this._idh.doCheck('validationErrors');
            this._watcherHelper.checkWatchers();
            _super.prototype.ngDoCheck.call(this);
            _super.prototype.clearChangedOptions.call(this);
        };
        DxDropDownBoxComponent.prototype._setOption = function (name, value) {
            var isSetup = this._idh.setupSingle(name, value);
            var isChanged = this._idh.getChanges(name, value) !== null;
            if (isSetup || isChanged) {
                _super.prototype._setOption.call(this, name, value);
            }
        };
        return DxDropDownBoxComponent;
    }(i1.DxComponent));
    /** @nocollapse */ DxDropDownBoxComponent.ɵfac = function DxDropDownBoxComponent_Factory(t) { return new (t || DxDropDownBoxComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef), i0__namespace.ɵɵdirectiveInject(i0__namespace.NgZone), i0__namespace.ɵɵdirectiveInject(i1__namespace.DxTemplateHost), i0__namespace.ɵɵdirectiveInject(i1__namespace.WatcherHelper), i0__namespace.ɵɵdirectiveInject(i1__namespace.IterableDifferHelper), i0__namespace.ɵɵdirectiveInject(i1__namespace.NestedOptionHost), i0__namespace.ɵɵdirectiveInject(i2__namespace.TransferState), i0__namespace.ɵɵdirectiveInject(i0.PLATFORM_ID)); };
    /** @nocollapse */ DxDropDownBoxComponent.ɵcmp = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineComponent({ type: DxDropDownBoxComponent, selectors: [["dx-drop-down-box"]], contentQueries: function DxDropDownBoxComponent_ContentQueries(rf, ctx, dirIndex) {
            if (rf & 1) {
                i0__namespace.ɵɵcontentQuery(dirIndex, nested.DxiButtonComponent, 4);
                i0__namespace.ɵɵcontentQuery(dirIndex, nested.DxiItemComponent, 4);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.buttonsChildren = _t);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.itemsChildren = _t);
            }
        }, hostBindings: function DxDropDownBoxComponent_HostBindings(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵlistener("valueChange", function DxDropDownBoxComponent_valueChange_HostBindingHandler($event) { return ctx.change($event); })("onBlur", function DxDropDownBoxComponent_onBlur_HostBindingHandler($event) { return ctx.touched($event); });
            }
        }, inputs: { acceptCustomValue: "acceptCustomValue", accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", buttons: "buttons", contentTemplate: "contentTemplate", dataSource: "dataSource", deferRendering: "deferRendering", disabled: "disabled", displayExpr: "displayExpr", displayValueFormatter: "displayValueFormatter", dropDownButtonTemplate: "dropDownButtonTemplate", dropDownOptions: "dropDownOptions", elementAttr: "elementAttr", fieldTemplate: "fieldTemplate", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", inputAttr: "inputAttr", isValid: "isValid", items: "items", label: "label", labelMode: "labelMode", maxLength: "maxLength", name: "name", opened: "opened", openOnFieldClick: "openOnFieldClick", placeholder: "placeholder", readOnly: "readOnly", rtlEnabled: "rtlEnabled", showClearButton: "showClearButton", showDropDownButton: "showDropDownButton", stylingMode: "stylingMode", tabIndex: "tabIndex", text: "text", validationError: "validationError", validationErrors: "validationErrors", validationMessageMode: "validationMessageMode", validationMessagePosition: "validationMessagePosition", validationStatus: "validationStatus", value: "value", valueChangeEvent: "valueChangeEvent", valueExpr: "valueExpr", visible: "visible", width: "width" }, outputs: { onChange: "onChange", onClosed: "onClosed", onCopy: "onCopy", onCut: "onCut", onDisposing: "onDisposing", onEnterKey: "onEnterKey", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onInitialized: "onInitialized", onInput: "onInput", onKeyDown: "onKeyDown", onKeyUp: "onKeyUp", onOpened: "onOpened", onOptionChanged: "onOptionChanged", onPaste: "onPaste", onValueChanged: "onValueChanged", acceptCustomValueChange: "acceptCustomValueChange", accessKeyChange: "accessKeyChange", activeStateEnabledChange: "activeStateEnabledChange", buttonsChange: "buttonsChange", contentTemplateChange: "contentTemplateChange", dataSourceChange: "dataSourceChange", deferRenderingChange: "deferRenderingChange", disabledChange: "disabledChange", displayExprChange: "displayExprChange", displayValueFormatterChange: "displayValueFormatterChange", dropDownButtonTemplateChange: "dropDownButtonTemplateChange", dropDownOptionsChange: "dropDownOptionsChange", elementAttrChange: "elementAttrChange", fieldTemplateChange: "fieldTemplateChange", focusStateEnabledChange: "focusStateEnabledChange", heightChange: "heightChange", hintChange: "hintChange", hoverStateEnabledChange: "hoverStateEnabledChange", inputAttrChange: "inputAttrChange", isValidChange: "isValidChange", itemsChange: "itemsChange", labelChange: "labelChange", labelModeChange: "labelModeChange", maxLengthChange: "maxLengthChange", nameChange: "nameChange", openedChange: "openedChange", openOnFieldClickChange: "openOnFieldClickChange", placeholderChange: "placeholderChange", readOnlyChange: "readOnlyChange", rtlEnabledChange: "rtlEnabledChange", showClearButtonChange: "showClearButtonChange", showDropDownButtonChange: "showDropDownButtonChange", stylingModeChange: "stylingModeChange", tabIndexChange: "tabIndexChange", textChange: "textChange", validationErrorChange: "validationErrorChange", validationErrorsChange: "validationErrorsChange", validationMessageModeChange: "validationMessageModeChange", validationMessagePositionChange: "validationMessagePositionChange", validationStatusChange: "validationStatusChange", valueChange: "valueChange", valueChangeEventChange: "valueChangeEventChange", valueExprChange: "valueExprChange", visibleChange: "visibleChange", widthChange: "widthChange", onBlur: "onBlur" }, features: [i0__namespace.ɵɵProvidersFeature([
                i1.DxTemplateHost,
                i1.WatcherHelper,
                CUSTOM_VALUE_ACCESSOR_PROVIDER,
                i1.NestedOptionHost,
                i1.IterableDifferHelper
            ]), i0__namespace.ɵɵInheritDefinitionFeature, i0__namespace.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxDropDownBoxComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵprojectionDef();
                i0__namespace.ɵɵprojection(0);
            }
        }, encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DxDropDownBoxComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'dx-drop-down-box',
                        template: '<ng-content></ng-content>',
                        providers: [
                            i1.DxTemplateHost,
                            i1.WatcherHelper,
                            CUSTOM_VALUE_ACCESSOR_PROVIDER,
                            i1.NestedOptionHost,
                            i1.IterableDifferHelper
                        ]
                    }]
            }], function () {
            return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.NgZone }, { type: i1__namespace.DxTemplateHost }, { type: i1__namespace.WatcherHelper }, { type: i1__namespace.IterableDifferHelper }, { type: i1__namespace.NestedOptionHost }, { type: i2__namespace.TransferState }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.PLATFORM_ID]
                        }] }];
        }, { acceptCustomValue: [{
                    type: i0.Input
                }], accessKey: [{
                    type: i0.Input
                }], activeStateEnabled: [{
                    type: i0.Input
                }], buttons: [{
                    type: i0.Input
                }], contentTemplate: [{
                    type: i0.Input
                }], dataSource: [{
                    type: i0.Input
                }], deferRendering: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], displayExpr: [{
                    type: i0.Input
                }], displayValueFormatter: [{
                    type: i0.Input
                }], dropDownButtonTemplate: [{
                    type: i0.Input
                }], dropDownOptions: [{
                    type: i0.Input
                }], elementAttr: [{
                    type: i0.Input
                }], fieldTemplate: [{
                    type: i0.Input
                }], focusStateEnabled: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hoverStateEnabled: [{
                    type: i0.Input
                }], inputAttr: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], labelMode: [{
                    type: i0.Input
                }], maxLength: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], opened: [{
                    type: i0.Input
                }], openOnFieldClick: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], rtlEnabled: [{
                    type: i0.Input
                }], showClearButton: [{
                    type: i0.Input
                }], showDropDownButton: [{
                    type: i0.Input
                }], stylingMode: [{
                    type: i0.Input
                }], tabIndex: [{
                    type: i0.Input
                }], text: [{
                    type: i0.Input
                }], validationError: [{
                    type: i0.Input
                }], validationErrors: [{
                    type: i0.Input
                }], validationMessageMode: [{
                    type: i0.Input
                }], validationMessagePosition: [{
                    type: i0.Input
                }], validationStatus: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], valueChangeEvent: [{
                    type: i0.Input
                }], valueExpr: [{
                    type: i0.Input
                }], visible: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], onChange: [{
                    type: i0.Output
                }], onClosed: [{
                    type: i0.Output
                }], onCopy: [{
                    type: i0.Output
                }], onCut: [{
                    type: i0.Output
                }], onDisposing: [{
                    type: i0.Output
                }], onEnterKey: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onInitialized: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onKeyDown: [{
                    type: i0.Output
                }], onKeyUp: [{
                    type: i0.Output
                }], onOpened: [{
                    type: i0.Output
                }], onOptionChanged: [{
                    type: i0.Output
                }], onPaste: [{
                    type: i0.Output
                }], onValueChanged: [{
                    type: i0.Output
                }], acceptCustomValueChange: [{
                    type: i0.Output
                }], accessKeyChange: [{
                    type: i0.Output
                }], activeStateEnabledChange: [{
                    type: i0.Output
                }], buttonsChange: [{
                    type: i0.Output
                }], contentTemplateChange: [{
                    type: i0.Output
                }], dataSourceChange: [{
                    type: i0.Output
                }], deferRenderingChange: [{
                    type: i0.Output
                }], disabledChange: [{
                    type: i0.Output
                }], displayExprChange: [{
                    type: i0.Output
                }], displayValueFormatterChange: [{
                    type: i0.Output
                }], dropDownButtonTemplateChange: [{
                    type: i0.Output
                }], dropDownOptionsChange: [{
                    type: i0.Output
                }], elementAttrChange: [{
                    type: i0.Output
                }], fieldTemplateChange: [{
                    type: i0.Output
                }], focusStateEnabledChange: [{
                    type: i0.Output
                }], heightChange: [{
                    type: i0.Output
                }], hintChange: [{
                    type: i0.Output
                }], hoverStateEnabledChange: [{
                    type: i0.Output
                }], inputAttrChange: [{
                    type: i0.Output
                }], isValidChange: [{
                    type: i0.Output
                }], itemsChange: [{
                    type: i0.Output
                }], labelChange: [{
                    type: i0.Output
                }], labelModeChange: [{
                    type: i0.Output
                }], maxLengthChange: [{
                    type: i0.Output
                }], nameChange: [{
                    type: i0.Output
                }], openedChange: [{
                    type: i0.Output
                }], openOnFieldClickChange: [{
                    type: i0.Output
                }], placeholderChange: [{
                    type: i0.Output
                }], readOnlyChange: [{
                    type: i0.Output
                }], rtlEnabledChange: [{
                    type: i0.Output
                }], showClearButtonChange: [{
                    type: i0.Output
                }], showDropDownButtonChange: [{
                    type: i0.Output
                }], stylingModeChange: [{
                    type: i0.Output
                }], tabIndexChange: [{
                    type: i0.Output
                }], textChange: [{
                    type: i0.Output
                }], validationErrorChange: [{
                    type: i0.Output
                }], validationErrorsChange: [{
                    type: i0.Output
                }], validationMessageModeChange: [{
                    type: i0.Output
                }], validationMessagePositionChange: [{
                    type: i0.Output
                }], validationStatusChange: [{
                    type: i0.Output
                }], valueChange: [{
                    type: i0.Output
                }], valueChangeEventChange: [{
                    type: i0.Output
                }], valueExprChange: [{
                    type: i0.Output
                }], visibleChange: [{
                    type: i0.Output
                }], widthChange: [{
                    type: i0.Output
                }], onBlur: [{
                    type: i0.Output
                }], change: [{
                    type: i0.HostListener,
                    args: ['valueChange', ['$event']]
                }], touched: [{
                    type: i0.HostListener,
                    args: ['onBlur', ['$event']]
                }], buttonsChildren: [{
                    type: i0.ContentChildren,
                    args: [nested.DxiButtonComponent]
                }], itemsChildren: [{
                    type: i0.ContentChildren,
                    args: [nested.DxiItemComponent]
                }] });
    })();
    var DxDropDownBoxModule = /** @class */ (function () {
        function DxDropDownBoxModule() {
        }
        return DxDropDownBoxModule;
    }());
    /** @nocollapse */ DxDropDownBoxModule.ɵfac = function DxDropDownBoxModule_Factory(t) { return new (t || DxDropDownBoxModule)(); };
    /** @nocollapse */ DxDropDownBoxModule.ɵmod = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineNgModule({ type: DxDropDownBoxModule });
    /** @nocollapse */ DxDropDownBoxModule.ɵinj = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineInjector({ imports: [[
                nested.DxiButtonModule,
                nested.DxoOptionsModule,
                nested.DxoDropDownOptionsModule,
                nested.DxoAnimationModule,
                nested.DxoHideModule,
                nested.DxoFromModule,
                nested.DxoPositionModule,
                nested.DxoAtModule,
                nested.DxoBoundaryOffsetModule,
                nested.DxoCollisionModule,
                nested.DxoMyModule,
                nested.DxoOffsetModule,
                nested.DxoToModule,
                nested.DxoShowModule,
                nested.DxiToolbarItemModule,
                nested.DxiItemModule,
                i1.DxIntegrationModule,
                i1.DxTemplateModule,
                i2.BrowserTransferStateModule
            ], nested.DxiButtonModule,
            nested.DxoOptionsModule,
            nested.DxoDropDownOptionsModule,
            nested.DxoAnimationModule,
            nested.DxoHideModule,
            nested.DxoFromModule,
            nested.DxoPositionModule,
            nested.DxoAtModule,
            nested.DxoBoundaryOffsetModule,
            nested.DxoCollisionModule,
            nested.DxoMyModule,
            nested.DxoOffsetModule,
            nested.DxoToModule,
            nested.DxoShowModule,
            nested.DxiToolbarItemModule,
            nested.DxiItemModule,
            i1.DxTemplateModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DxDropDownBoxModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            nested.DxiButtonModule,
                            nested.DxoOptionsModule,
                            nested.DxoDropDownOptionsModule,
                            nested.DxoAnimationModule,
                            nested.DxoHideModule,
                            nested.DxoFromModule,
                            nested.DxoPositionModule,
                            nested.DxoAtModule,
                            nested.DxoBoundaryOffsetModule,
                            nested.DxoCollisionModule,
                            nested.DxoMyModule,
                            nested.DxoOffsetModule,
                            nested.DxoToModule,
                            nested.DxoShowModule,
                            nested.DxiToolbarItemModule,
                            nested.DxiItemModule,
                            i1.DxIntegrationModule,
                            i1.DxTemplateModule,
                            i2.BrowserTransferStateModule
                        ],
                        declarations: [
                            DxDropDownBoxComponent
                        ],
                        exports: [
                            DxDropDownBoxComponent,
                            nested.DxiButtonModule,
                            nested.DxoOptionsModule,
                            nested.DxoDropDownOptionsModule,
                            nested.DxoAnimationModule,
                            nested.DxoHideModule,
                            nested.DxoFromModule,
                            nested.DxoPositionModule,
                            nested.DxoAtModule,
                            nested.DxoBoundaryOffsetModule,
                            nested.DxoCollisionModule,
                            nested.DxoMyModule,
                            nested.DxoOffsetModule,
                            nested.DxoToModule,
                            nested.DxoShowModule,
                            nested.DxiToolbarItemModule,
                            nested.DxiItemModule,
                            i1.DxTemplateModule
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(DxDropDownBoxModule, { declarations: [DxDropDownBoxComponent], imports: [nested.DxiButtonModule,
                nested.DxoOptionsModule,
                nested.DxoDropDownOptionsModule,
                nested.DxoAnimationModule,
                nested.DxoHideModule,
                nested.DxoFromModule,
                nested.DxoPositionModule,
                nested.DxoAtModule,
                nested.DxoBoundaryOffsetModule,
                nested.DxoCollisionModule,
                nested.DxoMyModule,
                nested.DxoOffsetModule,
                nested.DxoToModule,
                nested.DxoShowModule,
                nested.DxiToolbarItemModule,
                nested.DxiItemModule,
                i1.DxIntegrationModule,
                i1.DxTemplateModule,
                i2.BrowserTransferStateModule], exports: [DxDropDownBoxComponent, nested.DxiButtonModule,
                nested.DxoOptionsModule,
                nested.DxoDropDownOptionsModule,
                nested.DxoAnimationModule,
                nested.DxoHideModule,
                nested.DxoFromModule,
                nested.DxoPositionModule,
                nested.DxoAtModule,
                nested.DxoBoundaryOffsetModule,
                nested.DxoCollisionModule,
                nested.DxoMyModule,
                nested.DxoOffsetModule,
                nested.DxoToModule,
                nested.DxoShowModule,
                nested.DxiToolbarItemModule,
                nested.DxiItemModule,
                i1.DxTemplateModule] });
    })();

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DxDropDownBoxComponent = DxDropDownBoxComponent;
    exports.DxDropDownBoxModule = DxDropDownBoxModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=devextreme-angular-ui-drop-down-box.umd.js.map
