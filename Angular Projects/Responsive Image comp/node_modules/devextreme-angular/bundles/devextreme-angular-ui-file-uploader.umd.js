(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/platform-browser'), require('@angular/core'), require('devextreme/ui/file_uploader'), require('@angular/forms'), require('devextreme-angular/core')) :
    typeof define === 'function' && define.amd ? define('devextreme-angular/ui/file-uploader', ['exports', '@angular/platform-browser', '@angular/core', 'devextreme/ui/file_uploader', '@angular/forms', 'devextreme-angular/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["devextreme-angular"] = global["devextreme-angular"] || {}, global["devextreme-angular"].ui = global["devextreme-angular"].ui || {}, global["devextreme-angular"].ui["file-uploader"] = {}), global.ng.platformBrowser, global.ng.core, global.DxFileUploader, global.ng.forms, global["devextreme-angular"].core));
})(this, (function (exports, i2, i0, DxFileUploader, forms, i1) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var DxFileUploader__default = /*#__PURE__*/_interopDefaultLegacy(DxFileUploader);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    function __createBinding(o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    }
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                exports[p] = m[p];
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    result[k] = mod[k];
        result.default = mod;
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var CUSTOM_VALUE_ACCESSOR_PROVIDER = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return DxFileUploaderComponent; }),
        multi: true
    };
    /**
     * The FileUploader UI component enables an end user to upload files to the server. An end user can select files in the file explorer or drag and drop files to the FileUploader area on the page.

     */
    var DxFileUploaderComponent = /** @class */ (function (_super) {
        __extends(DxFileUploaderComponent, _super);
        function DxFileUploaderComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
            var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;
            _this._watcherHelper = _watcherHelper;
            _this._idh = _idh;
            _this.touched = function (_) { };
            _this._createEventEmitters([
                { subscribe: 'beforeSend', emit: 'onBeforeSend' },
                { subscribe: 'contentReady', emit: 'onContentReady' },
                { subscribe: 'disposing', emit: 'onDisposing' },
                { subscribe: 'dropZoneEnter', emit: 'onDropZoneEnter' },
                { subscribe: 'dropZoneLeave', emit: 'onDropZoneLeave' },
                { subscribe: 'filesUploaded', emit: 'onFilesUploaded' },
                { subscribe: 'initialized', emit: 'onInitialized' },
                { subscribe: 'optionChanged', emit: 'onOptionChanged' },
                { subscribe: 'progress', emit: 'onProgress' },
                { subscribe: 'uploadAborted', emit: 'onUploadAborted' },
                { subscribe: 'uploaded', emit: 'onUploaded' },
                { subscribe: 'uploadError', emit: 'onUploadError' },
                { subscribe: 'uploadStarted', emit: 'onUploadStarted' },
                { subscribe: 'valueChanged', emit: 'onValueChanged' },
                { emit: 'abortUploadChange' },
                { emit: 'acceptChange' },
                { emit: 'accessKeyChange' },
                { emit: 'activeStateEnabledChange' },
                { emit: 'allowCancelingChange' },
                { emit: 'allowedFileExtensionsChange' },
                { emit: 'chunkSizeChange' },
                { emit: 'dialogTriggerChange' },
                { emit: 'disabledChange' },
                { emit: 'dropZoneChange' },
                { emit: 'elementAttrChange' },
                { emit: 'focusStateEnabledChange' },
                { emit: 'heightChange' },
                { emit: 'hintChange' },
                { emit: 'hoverStateEnabledChange' },
                { emit: 'inputAttrChange' },
                { emit: 'invalidFileExtensionMessageChange' },
                { emit: 'invalidMaxFileSizeMessageChange' },
                { emit: 'invalidMinFileSizeMessageChange' },
                { emit: 'isValidChange' },
                { emit: 'labelTextChange' },
                { emit: 'maxFileSizeChange' },
                { emit: 'minFileSizeChange' },
                { emit: 'multipleChange' },
                { emit: 'nameChange' },
                { emit: 'progressChange' },
                { emit: 'readOnlyChange' },
                { emit: 'readyToUploadMessageChange' },
                { emit: 'rtlEnabledChange' },
                { emit: 'selectButtonTextChange' },
                { emit: 'showFileListChange' },
                { emit: 'tabIndexChange' },
                { emit: 'uploadAbortedMessageChange' },
                { emit: 'uploadButtonTextChange' },
                { emit: 'uploadChunkChange' },
                { emit: 'uploadCustomDataChange' },
                { emit: 'uploadedMessageChange' },
                { emit: 'uploadFailedMessageChange' },
                { emit: 'uploadFileChange' },
                { emit: 'uploadHeadersChange' },
                { emit: 'uploadMethodChange' },
                { emit: 'uploadModeChange' },
                { emit: 'uploadUrlChange' },
                { emit: 'validationErrorChange' },
                { emit: 'validationErrorsChange' },
                { emit: 'validationStatusChange' },
                { emit: 'valueChange' },
                { emit: 'visibleChange' },
                { emit: 'widthChange' },
                { emit: 'onBlur' }
            ]);
            _this._idh.setHost(_this);
            optionHost.setHost(_this);
            return _this;
        }
        Object.defineProperty(DxFileUploaderComponent.prototype, "abortUpload", {
            /**
             * A function that cancels the file upload.
            
             */
            get: function () {
                return this._getOption('abortUpload');
            },
            set: function (value) {
                this._setOption('abortUpload', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "accept", {
            /**
             * Specifies a file type or several types accepted by the UI component.
            
             */
            get: function () {
                return this._getOption('accept');
            },
            set: function (value) {
                this._setOption('accept', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "accessKey", {
            /**
             * Specifies the shortcut key that sets focus on the UI component.
            
             */
            get: function () {
                return this._getOption('accessKey');
            },
            set: function (value) {
                this._setOption('accessKey', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "activeStateEnabled", {
            /**
             * Specifies whether the UI component changes its visual state as a result of user interaction.
            
             */
            get: function () {
                return this._getOption('activeStateEnabled');
            },
            set: function (value) {
                this._setOption('activeStateEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "allowCanceling", {
            /**
             * Specifies if an end user can remove a file from the selection and interrupt uploading.
            
             */
            get: function () {
                return this._getOption('allowCanceling');
            },
            set: function (value) {
                this._setOption('allowCanceling', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "allowedFileExtensions", {
            /**
             * Restricts file extensions that can be uploaded to the server.
            
             */
            get: function () {
                return this._getOption('allowedFileExtensions');
            },
            set: function (value) {
                this._setOption('allowedFileExtensions', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "chunkSize", {
            /**
             * Specifies the chunk size in bytes. Applies only if uploadMode is &apos;instantly&apos; or &apos;useButtons&apos;. Requires a server that can process file chunks.
            
             */
            get: function () {
                return this._getOption('chunkSize');
            },
            set: function (value) {
                this._setOption('chunkSize', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "dialogTrigger", {
            /**
             * Specifies the HTML element which invokes the file upload dialog.
            
             */
            get: function () {
                return this._getOption('dialogTrigger');
            },
            set: function (value) {
                this._setOption('dialogTrigger', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "disabled", {
            /**
             * Specifies whether the UI component responds to user interaction.
            
             */
            get: function () {
                return this._getOption('disabled');
            },
            set: function (value) {
                this._setOption('disabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "dropZone", {
            /**
             * Specifies the HTML element in which users can drag and drop files for upload.
            
             */
            get: function () {
                return this._getOption('dropZone');
            },
            set: function (value) {
                this._setOption('dropZone', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "elementAttr", {
            /**
             * Specifies the global attributes to be attached to the UI component&apos;s container element.
            
             */
            get: function () {
                return this._getOption('elementAttr');
            },
            set: function (value) {
                this._setOption('elementAttr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "focusStateEnabled", {
            /**
             * Specifies whether the UI component can be focused using keyboard navigation.
            
             */
            get: function () {
                return this._getOption('focusStateEnabled');
            },
            set: function (value) {
                this._setOption('focusStateEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "height", {
            /**
             * Specifies the UI component&apos;s height.
            
             */
            get: function () {
                return this._getOption('height');
            },
            set: function (value) {
                this._setOption('height', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "hint", {
            /**
             * Specifies text for a hint that appears when a user pauses on the UI component.
            
             */
            get: function () {
                return this._getOption('hint');
            },
            set: function (value) {
                this._setOption('hint', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "hoverStateEnabled", {
            /**
             * Specifies whether the FileUploader component changes the state of all its buttons when users hover over them.
            
             */
            get: function () {
                return this._getOption('hoverStateEnabled');
            },
            set: function (value) {
                this._setOption('hoverStateEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "inputAttr", {
            /**
             * Specifies the attributes to be passed on to the underlying `` element of the `file` type.
            
             */
            get: function () {
                return this._getOption('inputAttr');
            },
            set: function (value) {
                this._setOption('inputAttr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "invalidFileExtensionMessage", {
            /**
             * The text displayed when the extension of the file being uploaded is not an allowed file extension.
            
             */
            get: function () {
                return this._getOption('invalidFileExtensionMessage');
            },
            set: function (value) {
                this._setOption('invalidFileExtensionMessage', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "invalidMaxFileSizeMessage", {
            /**
             * The text displayed when the size of the file being uploaded is greater than the maxFileSize.
            
             */
            get: function () {
                return this._getOption('invalidMaxFileSizeMessage');
            },
            set: function (value) {
                this._setOption('invalidMaxFileSizeMessage', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "invalidMinFileSizeMessage", {
            /**
             * The text displayed when the size of the file being uploaded is less than the minFileSize.
            
             */
            get: function () {
                return this._getOption('invalidMinFileSizeMessage');
            },
            set: function (value) {
                this._setOption('invalidMinFileSizeMessage', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "isValid", {
            /**
             * Specifies or indicates whether the editor&apos;s value is valid.
            
             */
            get: function () {
                return this._getOption('isValid');
            },
            set: function (value) {
                this._setOption('isValid', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "labelText", {
            /**
             * Specifies the text displayed on the area to which an end user can drop a file.
            
             */
            get: function () {
                return this._getOption('labelText');
            },
            set: function (value) {
                this._setOption('labelText', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "maxFileSize", {
            /**
             * Specifies the maximum file size (in bytes) allowed for uploading. Applies only if uploadMode is &apos;instantly&apos; or &apos;useButtons&apos;.
            
             */
            get: function () {
                return this._getOption('maxFileSize');
            },
            set: function (value) {
                this._setOption('maxFileSize', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "minFileSize", {
            /**
             * Specifies the minimum file size (in bytes) allowed for uploading. Applies only if uploadMode is &apos;instantly&apos; or &apos;useButtons&apos;.
            
             */
            get: function () {
                return this._getOption('minFileSize');
            },
            set: function (value) {
                this._setOption('minFileSize', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "multiple", {
            /**
             * Specifies whether the UI component enables an end user to select a single file or multiple files.
            
             */
            get: function () {
                return this._getOption('multiple');
            },
            set: function (value) {
                this._setOption('multiple', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "name", {
            /**
             * Specifies the value passed to the name attribute of the underlying input element. Required to access uploaded files on the server.
            
             */
            get: function () {
                return this._getOption('name');
            },
            set: function (value) {
                this._setOption('name', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "progress", {
            /**
             * Gets the current progress in percentages.
            
             */
            get: function () {
                return this._getOption('progress');
            },
            set: function (value) {
                this._setOption('progress', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "readOnly", {
            /**
             * Specifies whether the editor is read-only.
            
             */
            get: function () {
                return this._getOption('readOnly');
            },
            set: function (value) {
                this._setOption('readOnly', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "readyToUploadMessage", {
            /**
             * The message displayed by the UI component when it is ready to upload the specified files.
            
             */
            get: function () {
                return this._getOption('readyToUploadMessage');
            },
            set: function (value) {
                this._setOption('readyToUploadMessage', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "rtlEnabled", {
            /**
             * Switches the UI component to a right-to-left representation.
            
             */
            get: function () {
                return this._getOption('rtlEnabled');
            },
            set: function (value) {
                this._setOption('rtlEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "selectButtonText", {
            /**
             * The text displayed on the button that opens the file browser.
            
             */
            get: function () {
                return this._getOption('selectButtonText');
            },
            set: function (value) {
                this._setOption('selectButtonText', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "showFileList", {
            /**
             * Specifies whether or not the UI component displays the list of selected files.
            
             */
            get: function () {
                return this._getOption('showFileList');
            },
            set: function (value) {
                this._setOption('showFileList', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "tabIndex", {
            /**
             * Specifies the number of the element when the Tab key is used for navigating.
            
             */
            get: function () {
                return this._getOption('tabIndex');
            },
            set: function (value) {
                this._setOption('tabIndex', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "uploadAbortedMessage", {
            /**
             * The message displayed by the UI component when the file upload is cancelled.
            
             */
            get: function () {
                return this._getOption('uploadAbortedMessage');
            },
            set: function (value) {
                this._setOption('uploadAbortedMessage', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "uploadButtonText", {
            /**
             * The text displayed on the button that starts uploading.
            
             */
            get: function () {
                return this._getOption('uploadButtonText');
            },
            set: function (value) {
                this._setOption('uploadButtonText', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "uploadChunk", {
            /**
             * A function that uploads a file in chunks.
            
             */
            get: function () {
                return this._getOption('uploadChunk');
            },
            set: function (value) {
                this._setOption('uploadChunk', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "uploadCustomData", {
            /**
             * Specifies custom data for the upload request.
            
             */
            get: function () {
                return this._getOption('uploadCustomData');
            },
            set: function (value) {
                this._setOption('uploadCustomData', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "uploadedMessage", {
            /**
             * The message displayed by the UI component when uploading is finished.
            
             */
            get: function () {
                return this._getOption('uploadedMessage');
            },
            set: function (value) {
                this._setOption('uploadedMessage', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "uploadFailedMessage", {
            /**
             * The message displayed by the UI component on uploading failure.
            
             */
            get: function () {
                return this._getOption('uploadFailedMessage');
            },
            set: function (value) {
                this._setOption('uploadFailedMessage', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "uploadFile", {
            /**
             * A function that uploads a file.
            
             */
            get: function () {
                return this._getOption('uploadFile');
            },
            set: function (value) {
                this._setOption('uploadFile', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "uploadHeaders", {
            /**
             * Specifies headers for the upload request.
            
             */
            get: function () {
                return this._getOption('uploadHeaders');
            },
            set: function (value) {
                this._setOption('uploadHeaders', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "uploadMethod", {
            /**
             * Specifies the method for the upload request.
            
             */
            get: function () {
                return this._getOption('uploadMethod');
            },
            set: function (value) {
                this._setOption('uploadMethod', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "uploadMode", {
            /**
             * Specifies how the UI component uploads files.
            
             */
            get: function () {
                return this._getOption('uploadMode');
            },
            set: function (value) {
                this._setOption('uploadMode', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "uploadUrl", {
            /**
             * Specifies a target Url for the upload request.
            
             */
            get: function () {
                return this._getOption('uploadUrl');
            },
            set: function (value) {
                this._setOption('uploadUrl', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "validationError", {
            /**
             * Information on the broken validation rule. Contains the first item from the validationErrors array.
            
             */
            get: function () {
                return this._getOption('validationError');
            },
            set: function (value) {
                this._setOption('validationError', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "validationErrors", {
            /**
             * An array of the validation rules that failed.
            
             */
            get: function () {
                return this._getOption('validationErrors');
            },
            set: function (value) {
                this._setOption('validationErrors', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "validationStatus", {
            /**
             * Indicates or specifies the current validation status.
            
             */
            get: function () {
                return this._getOption('validationStatus');
            },
            set: function (value) {
                this._setOption('validationStatus', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "value", {
            /**
             * Specifies a File instance representing the selected file. Read-only when uploadMode is &apos;useForm&apos;.
            
             */
            get: function () {
                return this._getOption('value');
            },
            set: function (value) {
                this._setOption('value', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "visible", {
            /**
             * Specifies whether the UI component is visible.
            
             */
            get: function () {
                return this._getOption('visible');
            },
            set: function (value) {
                this._setOption('visible', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxFileUploaderComponent.prototype, "width", {
            /**
             * Specifies the UI component&apos;s width.
            
             */
            get: function () {
                return this._getOption('width');
            },
            set: function (value) {
                this._setOption('width', value);
            },
            enumerable: false,
            configurable: true
        });
        DxFileUploaderComponent.prototype.change = function (_) { };
        DxFileUploaderComponent.prototype._createInstance = function (element, options) {
            return new DxFileUploader__default["default"](element, options);
        };
        DxFileUploaderComponent.prototype.writeValue = function (value) {
            this.eventHelper.lockedValueChangeEvent = true;
            this.value = value;
            this.eventHelper.lockedValueChangeEvent = false;
        };
        DxFileUploaderComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        DxFileUploaderComponent.prototype.registerOnChange = function (fn) { this.change = fn; };
        DxFileUploaderComponent.prototype.registerOnTouched = function (fn) { this.touched = fn; };
        DxFileUploaderComponent.prototype._createWidget = function (element) {
            var _this = this;
            _super.prototype._createWidget.call(this, element);
            this.instance.on('focusOut', function (e) {
                _this.eventHelper.fireNgEvent('onBlur', [e]);
            });
        };
        DxFileUploaderComponent.prototype.ngOnDestroy = function () {
            this._destroyWidget();
        };
        DxFileUploaderComponent.prototype.ngOnChanges = function (changes) {
            _super.prototype.ngOnChanges.call(this, changes);
            this.setupChanges('allowedFileExtensions', changes);
            this.setupChanges('validationErrors', changes);
            this.setupChanges('value', changes);
        };
        DxFileUploaderComponent.prototype.setupChanges = function (prop, changes) {
            if (!(prop in this._optionsToUpdate)) {
                this._idh.setup(prop, changes);
            }
        };
        DxFileUploaderComponent.prototype.ngDoCheck = function () {
            this._idh.doCheck('allowedFileExtensions');
            this._idh.doCheck('validationErrors');
            this._idh.doCheck('value');
            this._watcherHelper.checkWatchers();
            _super.prototype.ngDoCheck.call(this);
            _super.prototype.clearChangedOptions.call(this);
        };
        DxFileUploaderComponent.prototype._setOption = function (name, value) {
            var isSetup = this._idh.setupSingle(name, value);
            var isChanged = this._idh.getChanges(name, value) !== null;
            if (isSetup || isChanged) {
                _super.prototype._setOption.call(this, name, value);
            }
        };
        return DxFileUploaderComponent;
    }(i1.DxComponent));
    /** @nocollapse */ DxFileUploaderComponent.ɵfac = function DxFileUploaderComponent_Factory(t) { return new (t || DxFileUploaderComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef), i0__namespace.ɵɵdirectiveInject(i0__namespace.NgZone), i0__namespace.ɵɵdirectiveInject(i1__namespace.DxTemplateHost), i0__namespace.ɵɵdirectiveInject(i1__namespace.WatcherHelper), i0__namespace.ɵɵdirectiveInject(i1__namespace.IterableDifferHelper), i0__namespace.ɵɵdirectiveInject(i1__namespace.NestedOptionHost), i0__namespace.ɵɵdirectiveInject(i2__namespace.TransferState), i0__namespace.ɵɵdirectiveInject(i0.PLATFORM_ID)); };
    /** @nocollapse */ DxFileUploaderComponent.ɵcmp = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineComponent({ type: DxFileUploaderComponent, selectors: [["dx-file-uploader"]], hostBindings: function DxFileUploaderComponent_HostBindings(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵlistener("valueChange", function DxFileUploaderComponent_valueChange_HostBindingHandler($event) { return ctx.change($event); })("onBlur", function DxFileUploaderComponent_onBlur_HostBindingHandler($event) { return ctx.touched($event); });
            }
        }, inputs: { abortUpload: "abortUpload", accept: "accept", accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", allowCanceling: "allowCanceling", allowedFileExtensions: "allowedFileExtensions", chunkSize: "chunkSize", dialogTrigger: "dialogTrigger", disabled: "disabled", dropZone: "dropZone", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", inputAttr: "inputAttr", invalidFileExtensionMessage: "invalidFileExtensionMessage", invalidMaxFileSizeMessage: "invalidMaxFileSizeMessage", invalidMinFileSizeMessage: "invalidMinFileSizeMessage", isValid: "isValid", labelText: "labelText", maxFileSize: "maxFileSize", minFileSize: "minFileSize", multiple: "multiple", name: "name", progress: "progress", readOnly: "readOnly", readyToUploadMessage: "readyToUploadMessage", rtlEnabled: "rtlEnabled", selectButtonText: "selectButtonText", showFileList: "showFileList", tabIndex: "tabIndex", uploadAbortedMessage: "uploadAbortedMessage", uploadButtonText: "uploadButtonText", uploadChunk: "uploadChunk", uploadCustomData: "uploadCustomData", uploadedMessage: "uploadedMessage", uploadFailedMessage: "uploadFailedMessage", uploadFile: "uploadFile", uploadHeaders: "uploadHeaders", uploadMethod: "uploadMethod", uploadMode: "uploadMode", uploadUrl: "uploadUrl", validationError: "validationError", validationErrors: "validationErrors", validationStatus: "validationStatus", value: "value", visible: "visible", width: "width" }, outputs: { onBeforeSend: "onBeforeSend", onContentReady: "onContentReady", onDisposing: "onDisposing", onDropZoneEnter: "onDropZoneEnter", onDropZoneLeave: "onDropZoneLeave", onFilesUploaded: "onFilesUploaded", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onProgress: "onProgress", onUploadAborted: "onUploadAborted", onUploaded: "onUploaded", onUploadError: "onUploadError", onUploadStarted: "onUploadStarted", onValueChanged: "onValueChanged", abortUploadChange: "abortUploadChange", acceptChange: "acceptChange", accessKeyChange: "accessKeyChange", activeStateEnabledChange: "activeStateEnabledChange", allowCancelingChange: "allowCancelingChange", allowedFileExtensionsChange: "allowedFileExtensionsChange", chunkSizeChange: "chunkSizeChange", dialogTriggerChange: "dialogTriggerChange", disabledChange: "disabledChange", dropZoneChange: "dropZoneChange", elementAttrChange: "elementAttrChange", focusStateEnabledChange: "focusStateEnabledChange", heightChange: "heightChange", hintChange: "hintChange", hoverStateEnabledChange: "hoverStateEnabledChange", inputAttrChange: "inputAttrChange", invalidFileExtensionMessageChange: "invalidFileExtensionMessageChange", invalidMaxFileSizeMessageChange: "invalidMaxFileSizeMessageChange", invalidMinFileSizeMessageChange: "invalidMinFileSizeMessageChange", isValidChange: "isValidChange", labelTextChange: "labelTextChange", maxFileSizeChange: "maxFileSizeChange", minFileSizeChange: "minFileSizeChange", multipleChange: "multipleChange", nameChange: "nameChange", progressChange: "progressChange", readOnlyChange: "readOnlyChange", readyToUploadMessageChange: "readyToUploadMessageChange", rtlEnabledChange: "rtlEnabledChange", selectButtonTextChange: "selectButtonTextChange", showFileListChange: "showFileListChange", tabIndexChange: "tabIndexChange", uploadAbortedMessageChange: "uploadAbortedMessageChange", uploadButtonTextChange: "uploadButtonTextChange", uploadChunkChange: "uploadChunkChange", uploadCustomDataChange: "uploadCustomDataChange", uploadedMessageChange: "uploadedMessageChange", uploadFailedMessageChange: "uploadFailedMessageChange", uploadFileChange: "uploadFileChange", uploadHeadersChange: "uploadHeadersChange", uploadMethodChange: "uploadMethodChange", uploadModeChange: "uploadModeChange", uploadUrlChange: "uploadUrlChange", validationErrorChange: "validationErrorChange", validationErrorsChange: "validationErrorsChange", validationStatusChange: "validationStatusChange", valueChange: "valueChange", visibleChange: "visibleChange", widthChange: "widthChange", onBlur: "onBlur" }, features: [i0__namespace.ɵɵProvidersFeature([
                i1.DxTemplateHost,
                i1.WatcherHelper,
                CUSTOM_VALUE_ACCESSOR_PROVIDER,
                i1.NestedOptionHost,
                i1.IterableDifferHelper
            ]), i0__namespace.ɵɵInheritDefinitionFeature, i0__namespace.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function DxFileUploaderComponent_Template(rf, ctx) { }, encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DxFileUploaderComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'dx-file-uploader',
                        template: '',
                        providers: [
                            i1.DxTemplateHost,
                            i1.WatcherHelper,
                            CUSTOM_VALUE_ACCESSOR_PROVIDER,
                            i1.NestedOptionHost,
                            i1.IterableDifferHelper
                        ]
                    }]
            }], function () {
            return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.NgZone }, { type: i1__namespace.DxTemplateHost }, { type: i1__namespace.WatcherHelper }, { type: i1__namespace.IterableDifferHelper }, { type: i1__namespace.NestedOptionHost }, { type: i2__namespace.TransferState }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.PLATFORM_ID]
                        }] }];
        }, { abortUpload: [{
                    type: i0.Input
                }], accept: [{
                    type: i0.Input
                }], accessKey: [{
                    type: i0.Input
                }], activeStateEnabled: [{
                    type: i0.Input
                }], allowCanceling: [{
                    type: i0.Input
                }], allowedFileExtensions: [{
                    type: i0.Input
                }], chunkSize: [{
                    type: i0.Input
                }], dialogTrigger: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], dropZone: [{
                    type: i0.Input
                }], elementAttr: [{
                    type: i0.Input
                }], focusStateEnabled: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hoverStateEnabled: [{
                    type: i0.Input
                }], inputAttr: [{
                    type: i0.Input
                }], invalidFileExtensionMessage: [{
                    type: i0.Input
                }], invalidMaxFileSizeMessage: [{
                    type: i0.Input
                }], invalidMinFileSizeMessage: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], labelText: [{
                    type: i0.Input
                }], maxFileSize: [{
                    type: i0.Input
                }], minFileSize: [{
                    type: i0.Input
                }], multiple: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], progress: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], readyToUploadMessage: [{
                    type: i0.Input
                }], rtlEnabled: [{
                    type: i0.Input
                }], selectButtonText: [{
                    type: i0.Input
                }], showFileList: [{
                    type: i0.Input
                }], tabIndex: [{
                    type: i0.Input
                }], uploadAbortedMessage: [{
                    type: i0.Input
                }], uploadButtonText: [{
                    type: i0.Input
                }], uploadChunk: [{
                    type: i0.Input
                }], uploadCustomData: [{
                    type: i0.Input
                }], uploadedMessage: [{
                    type: i0.Input
                }], uploadFailedMessage: [{
                    type: i0.Input
                }], uploadFile: [{
                    type: i0.Input
                }], uploadHeaders: [{
                    type: i0.Input
                }], uploadMethod: [{
                    type: i0.Input
                }], uploadMode: [{
                    type: i0.Input
                }], uploadUrl: [{
                    type: i0.Input
                }], validationError: [{
                    type: i0.Input
                }], validationErrors: [{
                    type: i0.Input
                }], validationStatus: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], visible: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], onBeforeSend: [{
                    type: i0.Output
                }], onContentReady: [{
                    type: i0.Output
                }], onDisposing: [{
                    type: i0.Output
                }], onDropZoneEnter: [{
                    type: i0.Output
                }], onDropZoneLeave: [{
                    type: i0.Output
                }], onFilesUploaded: [{
                    type: i0.Output
                }], onInitialized: [{
                    type: i0.Output
                }], onOptionChanged: [{
                    type: i0.Output
                }], onProgress: [{
                    type: i0.Output
                }], onUploadAborted: [{
                    type: i0.Output
                }], onUploaded: [{
                    type: i0.Output
                }], onUploadError: [{
                    type: i0.Output
                }], onUploadStarted: [{
                    type: i0.Output
                }], onValueChanged: [{
                    type: i0.Output
                }], abortUploadChange: [{
                    type: i0.Output
                }], acceptChange: [{
                    type: i0.Output
                }], accessKeyChange: [{
                    type: i0.Output
                }], activeStateEnabledChange: [{
                    type: i0.Output
                }], allowCancelingChange: [{
                    type: i0.Output
                }], allowedFileExtensionsChange: [{
                    type: i0.Output
                }], chunkSizeChange: [{
                    type: i0.Output
                }], dialogTriggerChange: [{
                    type: i0.Output
                }], disabledChange: [{
                    type: i0.Output
                }], dropZoneChange: [{
                    type: i0.Output
                }], elementAttrChange: [{
                    type: i0.Output
                }], focusStateEnabledChange: [{
                    type: i0.Output
                }], heightChange: [{
                    type: i0.Output
                }], hintChange: [{
                    type: i0.Output
                }], hoverStateEnabledChange: [{
                    type: i0.Output
                }], inputAttrChange: [{
                    type: i0.Output
                }], invalidFileExtensionMessageChange: [{
                    type: i0.Output
                }], invalidMaxFileSizeMessageChange: [{
                    type: i0.Output
                }], invalidMinFileSizeMessageChange: [{
                    type: i0.Output
                }], isValidChange: [{
                    type: i0.Output
                }], labelTextChange: [{
                    type: i0.Output
                }], maxFileSizeChange: [{
                    type: i0.Output
                }], minFileSizeChange: [{
                    type: i0.Output
                }], multipleChange: [{
                    type: i0.Output
                }], nameChange: [{
                    type: i0.Output
                }], progressChange: [{
                    type: i0.Output
                }], readOnlyChange: [{
                    type: i0.Output
                }], readyToUploadMessageChange: [{
                    type: i0.Output
                }], rtlEnabledChange: [{
                    type: i0.Output
                }], selectButtonTextChange: [{
                    type: i0.Output
                }], showFileListChange: [{
                    type: i0.Output
                }], tabIndexChange: [{
                    type: i0.Output
                }], uploadAbortedMessageChange: [{
                    type: i0.Output
                }], uploadButtonTextChange: [{
                    type: i0.Output
                }], uploadChunkChange: [{
                    type: i0.Output
                }], uploadCustomDataChange: [{
                    type: i0.Output
                }], uploadedMessageChange: [{
                    type: i0.Output
                }], uploadFailedMessageChange: [{
                    type: i0.Output
                }], uploadFileChange: [{
                    type: i0.Output
                }], uploadHeadersChange: [{
                    type: i0.Output
                }], uploadMethodChange: [{
                    type: i0.Output
                }], uploadModeChange: [{
                    type: i0.Output
                }], uploadUrlChange: [{
                    type: i0.Output
                }], validationErrorChange: [{
                    type: i0.Output
                }], validationErrorsChange: [{
                    type: i0.Output
                }], validationStatusChange: [{
                    type: i0.Output
                }], valueChange: [{
                    type: i0.Output
                }], visibleChange: [{
                    type: i0.Output
                }], widthChange: [{
                    type: i0.Output
                }], onBlur: [{
                    type: i0.Output
                }], change: [{
                    type: i0.HostListener,
                    args: ['valueChange', ['$event']]
                }], touched: [{
                    type: i0.HostListener,
                    args: ['onBlur', ['$event']]
                }] });
    })();
    var DxFileUploaderModule = /** @class */ (function () {
        function DxFileUploaderModule() {
        }
        return DxFileUploaderModule;
    }());
    /** @nocollapse */ DxFileUploaderModule.ɵfac = function DxFileUploaderModule_Factory(t) { return new (t || DxFileUploaderModule)(); };
    /** @nocollapse */ DxFileUploaderModule.ɵmod = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineNgModule({ type: DxFileUploaderModule });
    /** @nocollapse */ DxFileUploaderModule.ɵinj = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1.DxIntegrationModule,
                i1.DxTemplateModule,
                i2.BrowserTransferStateModule
            ], i1.DxTemplateModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DxFileUploaderModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1.DxIntegrationModule,
                            i1.DxTemplateModule,
                            i2.BrowserTransferStateModule
                        ],
                        declarations: [
                            DxFileUploaderComponent
                        ],
                        exports: [
                            DxFileUploaderComponent,
                            i1.DxTemplateModule
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(DxFileUploaderModule, { declarations: [DxFileUploaderComponent], imports: [i1.DxIntegrationModule,
                i1.DxTemplateModule,
                i2.BrowserTransferStateModule], exports: [DxFileUploaderComponent, i1.DxTemplateModule] });
    })();

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DxFileUploaderComponent = DxFileUploaderComponent;
    exports.DxFileUploaderModule = DxFileUploaderModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=devextreme-angular-ui-file-uploader.umd.js.map
