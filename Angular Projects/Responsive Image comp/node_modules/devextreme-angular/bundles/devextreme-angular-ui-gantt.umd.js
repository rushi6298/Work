(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/platform-browser'), require('@angular/core'), require('devextreme/ui/gantt'), require('devextreme-angular/core'), require('devextreme-angular/ui/nested')) :
    typeof define === 'function' && define.amd ? define('devextreme-angular/ui/gantt', ['exports', '@angular/platform-browser', '@angular/core', 'devextreme/ui/gantt', 'devextreme-angular/core', 'devextreme-angular/ui/nested'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["devextreme-angular"] = global["devextreme-angular"] || {}, global["devextreme-angular"].ui = global["devextreme-angular"].ui || {}, global["devextreme-angular"].ui.gantt = {}), global.ng.platformBrowser, global.ng.core, global.DxGantt, global["devextreme-angular"].core, global["devextreme-angular"].ui.nested));
})(this, (function (exports, i2, i0, DxGantt, i1, nested) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var DxGantt__default = /*#__PURE__*/_interopDefaultLegacy(DxGantt);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    function __createBinding(o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    }
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                exports[p] = m[p];
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    result[k] = mod[k];
        result.default = mod;
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * The Gantt is a UI component that displays the task flow and dependencies between tasks.

     */
    var DxGanttComponent = /** @class */ (function (_super) {
        __extends(DxGanttComponent, _super);
        function DxGanttComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
            var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;
            _this._watcherHelper = _watcherHelper;
            _this._idh = _idh;
            _this._createEventEmitters([
                { subscribe: 'contentReady', emit: 'onContentReady' },
                { subscribe: 'contextMenuPreparing', emit: 'onContextMenuPreparing' },
                { subscribe: 'customCommand', emit: 'onCustomCommand' },
                { subscribe: 'dependencyDeleted', emit: 'onDependencyDeleted' },
                { subscribe: 'dependencyDeleting', emit: 'onDependencyDeleting' },
                { subscribe: 'dependencyInserted', emit: 'onDependencyInserted' },
                { subscribe: 'dependencyInserting', emit: 'onDependencyInserting' },
                { subscribe: 'disposing', emit: 'onDisposing' },
                { subscribe: 'initialized', emit: 'onInitialized' },
                { subscribe: 'optionChanged', emit: 'onOptionChanged' },
                { subscribe: 'resourceAssigned', emit: 'onResourceAssigned' },
                { subscribe: 'resourceAssigning', emit: 'onResourceAssigning' },
                { subscribe: 'resourceDeleted', emit: 'onResourceDeleted' },
                { subscribe: 'resourceDeleting', emit: 'onResourceDeleting' },
                { subscribe: 'resourceInserted', emit: 'onResourceInserted' },
                { subscribe: 'resourceInserting', emit: 'onResourceInserting' },
                { subscribe: 'resourceManagerDialogShowing', emit: 'onResourceManagerDialogShowing' },
                { subscribe: 'resourceUnassigned', emit: 'onResourceUnassigned' },
                { subscribe: 'resourceUnassigning', emit: 'onResourceUnassigning' },
                { subscribe: 'scaleCellPrepared', emit: 'onScaleCellPrepared' },
                { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },
                { subscribe: 'taskClick', emit: 'onTaskClick' },
                { subscribe: 'taskDblClick', emit: 'onTaskDblClick' },
                { subscribe: 'taskDeleted', emit: 'onTaskDeleted' },
                { subscribe: 'taskDeleting', emit: 'onTaskDeleting' },
                { subscribe: 'taskEditDialogShowing', emit: 'onTaskEditDialogShowing' },
                { subscribe: 'taskInserted', emit: 'onTaskInserted' },
                { subscribe: 'taskInserting', emit: 'onTaskInserting' },
                { subscribe: 'taskMoving', emit: 'onTaskMoving' },
                { subscribe: 'taskUpdated', emit: 'onTaskUpdated' },
                { subscribe: 'taskUpdating', emit: 'onTaskUpdating' },
                { emit: 'accessKeyChange' },
                { emit: 'activeStateEnabledChange' },
                { emit: 'allowSelectionChange' },
                { emit: 'columnsChange' },
                { emit: 'contextMenuChange' },
                { emit: 'dependenciesChange' },
                { emit: 'disabledChange' },
                { emit: 'editingChange' },
                { emit: 'elementAttrChange' },
                { emit: 'endDateRangeChange' },
                { emit: 'filterRowChange' },
                { emit: 'firstDayOfWeekChange' },
                { emit: 'focusStateEnabledChange' },
                { emit: 'headerFilterChange' },
                { emit: 'heightChange' },
                { emit: 'hintChange' },
                { emit: 'hoverStateEnabledChange' },
                { emit: 'resourceAssignmentsChange' },
                { emit: 'resourcesChange' },
                { emit: 'rootValueChange' },
                { emit: 'scaleTypeChange' },
                { emit: 'scaleTypeRangeChange' },
                { emit: 'selectedRowKeyChange' },
                { emit: 'showDependenciesChange' },
                { emit: 'showResourcesChange' },
                { emit: 'showRowLinesChange' },
                { emit: 'sortingChange' },
                { emit: 'startDateRangeChange' },
                { emit: 'stripLinesChange' },
                { emit: 'tabIndexChange' },
                { emit: 'taskContentTemplateChange' },
                { emit: 'taskListWidthChange' },
                { emit: 'taskProgressTooltipContentTemplateChange' },
                { emit: 'tasksChange' },
                { emit: 'taskTimeTooltipContentTemplateChange' },
                { emit: 'taskTitlePositionChange' },
                { emit: 'taskTooltipContentTemplateChange' },
                { emit: 'toolbarChange' },
                { emit: 'validationChange' },
                { emit: 'visibleChange' },
                { emit: 'widthChange' }
            ]);
            _this._idh.setHost(_this);
            optionHost.setHost(_this);
            return _this;
        }
        Object.defineProperty(DxGanttComponent.prototype, "accessKey", {
            /**
             * Specifies the shortcut key that sets focus on the UI component.
            
             */
            get: function () {
                return this._getOption('accessKey');
            },
            set: function (value) {
                this._setOption('accessKey', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "activeStateEnabled", {
            /**
             * Specifies whether the UI component changes its visual state as a result of user interaction.
            
             */
            get: function () {
                return this._getOption('activeStateEnabled');
            },
            set: function (value) {
                this._setOption('activeStateEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "allowSelection", {
            /**
             * Specifies whether users can select tasks in the Gantt.
            
             */
            get: function () {
                return this._getOption('allowSelection');
            },
            set: function (value) {
                this._setOption('allowSelection', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "columns", {
            /**
             * An array of columns in the Gantt.
            
             */
            get: function () {
                return this._getOption('columns');
            },
            set: function (value) {
                this._setOption('columns', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "contextMenu", {
            /**
             * Configures the context menu settings.
            
             */
            get: function () {
                return this._getOption('contextMenu');
            },
            set: function (value) {
                this._setOption('contextMenu', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "dependencies", {
            /**
             * Configures dependencies.
            
             */
            get: function () {
                return this._getOption('dependencies');
            },
            set: function (value) {
                this._setOption('dependencies', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "disabled", {
            /**
             * Specifies whether the UI component responds to user interaction.
            
             */
            get: function () {
                return this._getOption('disabled');
            },
            set: function (value) {
                this._setOption('disabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "editing", {
            /**
             * Configures edit properties.
            
             */
            get: function () {
                return this._getOption('editing');
            },
            set: function (value) {
                this._setOption('editing', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "elementAttr", {
            /**
             * Specifies the global attributes to be attached to the UI component&apos;s container element.
            
             */
            get: function () {
                return this._getOption('elementAttr');
            },
            set: function (value) {
                this._setOption('elementAttr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "endDateRange", {
            /**
             * Specifies the end date of the date interval in the Gantt chart.
            
             */
            get: function () {
                return this._getOption('endDateRange');
            },
            set: function (value) {
                this._setOption('endDateRange', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "filterRow", {
            /**
             * Configures filter row settings.
            
             */
            get: function () {
                return this._getOption('filterRow');
            },
            set: function (value) {
                this._setOption('filterRow', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "firstDayOfWeek", {
            /**
             * Specifies the first day of a week.
            
             */
            get: function () {
                return this._getOption('firstDayOfWeek');
            },
            set: function (value) {
                this._setOption('firstDayOfWeek', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "focusStateEnabled", {
            /**
             * Specifies whether the UI component can be focused using keyboard navigation.
            
             */
            get: function () {
                return this._getOption('focusStateEnabled');
            },
            set: function (value) {
                this._setOption('focusStateEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "headerFilter", {
            /**
             * Configures the header filter settings.
            
             */
            get: function () {
                return this._getOption('headerFilter');
            },
            set: function (value) {
                this._setOption('headerFilter', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "height", {
            /**
             * Specifies the UI component&apos;s height.
            
             */
            get: function () {
                return this._getOption('height');
            },
            set: function (value) {
                this._setOption('height', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "hint", {
            /**
             * Specifies text for a hint that appears when a user pauses on the UI component.
            
             */
            get: function () {
                return this._getOption('hint');
            },
            set: function (value) {
                this._setOption('hint', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "hoverStateEnabled", {
            /**
             * Specifies whether the UI component changes its state when a user pauses on it.
            
             */
            get: function () {
                return this._getOption('hoverStateEnabled');
            },
            set: function (value) {
                this._setOption('hoverStateEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "resourceAssignments", {
            /**
             * Configures resource assignments.
            
             */
            get: function () {
                return this._getOption('resourceAssignments');
            },
            set: function (value) {
                this._setOption('resourceAssignments', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "resources", {
            /**
             * Configures task resources.
            
             */
            get: function () {
                return this._getOption('resources');
            },
            set: function (value) {
                this._setOption('resources', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "rootValue", {
            /**
             * Specifies the root task&apos;s identifier.
            
             */
            get: function () {
                return this._getOption('rootValue');
            },
            set: function (value) {
                this._setOption('rootValue', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "scaleType", {
            /**
             * Specifies the zoom level of tasks in the Gantt chart.
            
             */
            get: function () {
                return this._getOption('scaleType');
            },
            set: function (value) {
                this._setOption('scaleType', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "scaleTypeRange", {
            /**
             * Configures zoom range settings.
            
             */
            get: function () {
                return this._getOption('scaleTypeRange');
            },
            set: function (value) {
                this._setOption('scaleTypeRange', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "selectedRowKey", {
            /**
             * Allows you to select a row or determine which row is selected.
            
             */
            get: function () {
                return this._getOption('selectedRowKey');
            },
            set: function (value) {
                this._setOption('selectedRowKey', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "showDependencies", {
            /**
             * Specifies whether to display dependencies between tasks.
            
             */
            get: function () {
                return this._getOption('showDependencies');
            },
            set: function (value) {
                this._setOption('showDependencies', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "showResources", {
            /**
             * Specifies whether to display task resources.
            
             */
            get: function () {
                return this._getOption('showResources');
            },
            set: function (value) {
                this._setOption('showResources', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "showRowLines", {
            /**
             * Specifies whether to show/hide horizontal faint lines that separate tasks.
            
             */
            get: function () {
                return this._getOption('showRowLines');
            },
            set: function (value) {
                this._setOption('showRowLines', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "sorting", {
            /**
             * Configures sort settings.
            
             */
            get: function () {
                return this._getOption('sorting');
            },
            set: function (value) {
                this._setOption('sorting', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "startDateRange", {
            /**
             * Specifies the start date of the date interval in the Gantt chart.
            
             */
            get: function () {
                return this._getOption('startDateRange');
            },
            set: function (value) {
                this._setOption('startDateRange', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "stripLines", {
            /**
             * Configures strip lines.
            
             */
            get: function () {
                return this._getOption('stripLines');
            },
            set: function (value) {
                this._setOption('stripLines', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "tabIndex", {
            /**
             * Specifies the number of the element when the Tab key is used for navigating.
            
             */
            get: function () {
                return this._getOption('tabIndex');
            },
            set: function (value) {
                this._setOption('tabIndex', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "taskContentTemplate", {
            /**
             * Specifies custom content for the task.
            
             */
            get: function () {
                return this._getOption('taskContentTemplate');
            },
            set: function (value) {
                this._setOption('taskContentTemplate', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "taskListWidth", {
            /**
             * Specifies the width of the task list in pixels.
            
             */
            get: function () {
                return this._getOption('taskListWidth');
            },
            set: function (value) {
                this._setOption('taskListWidth', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "taskProgressTooltipContentTemplate", {
            /**
             * Specifies custom content for the tooltip that displays the task&apos;s progress while the progress handler is resized in the UI.
            
             */
            get: function () {
                return this._getOption('taskProgressTooltipContentTemplate');
            },
            set: function (value) {
                this._setOption('taskProgressTooltipContentTemplate', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "tasks", {
            /**
             * Configures tasks.
            
             */
            get: function () {
                return this._getOption('tasks');
            },
            set: function (value) {
                this._setOption('tasks', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "taskTimeTooltipContentTemplate", {
            /**
             * Specifies custom content for the tooltip that displays the task&apos;s start and end time while the task is resized in the UI.
            
             */
            get: function () {
                return this._getOption('taskTimeTooltipContentTemplate');
            },
            set: function (value) {
                this._setOption('taskTimeTooltipContentTemplate', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "taskTitlePosition", {
            /**
             * Specifies a task&apos;s title position.
            
             */
            get: function () {
                return this._getOption('taskTitlePosition');
            },
            set: function (value) {
                this._setOption('taskTitlePosition', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "taskTooltipContentTemplate", {
            /**
             * Specifies custom content for the task tooltip.
            
             */
            get: function () {
                return this._getOption('taskTooltipContentTemplate');
            },
            set: function (value) {
                this._setOption('taskTooltipContentTemplate', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "toolbar", {
            /**
             * Configures toolbar settings.
            
             */
            get: function () {
                return this._getOption('toolbar');
            },
            set: function (value) {
                this._setOption('toolbar', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "validation", {
            /**
             * Configures validation properties.
            
             */
            get: function () {
                return this._getOption('validation');
            },
            set: function (value) {
                this._setOption('validation', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "visible", {
            /**
             * Specifies whether the UI component is visible.
            
             */
            get: function () {
                return this._getOption('visible');
            },
            set: function (value) {
                this._setOption('visible', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "width", {
            /**
             * Specifies the UI component&apos;s width.
            
             */
            get: function () {
                return this._getOption('width');
            },
            set: function (value) {
                this._setOption('width', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "columnsChildren", {
            get: function () {
                return this._getOption('columns');
            },
            set: function (value) {
                this.setChildren('columns', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxGanttComponent.prototype, "stripLinesChildren", {
            get: function () {
                return this._getOption('stripLines');
            },
            set: function (value) {
                this.setChildren('stripLines', value);
            },
            enumerable: false,
            configurable: true
        });
        DxGanttComponent.prototype._createInstance = function (element, options) {
            return new DxGantt__default["default"](element, options);
        };
        DxGanttComponent.prototype.ngOnDestroy = function () {
            this._destroyWidget();
        };
        DxGanttComponent.prototype.ngOnChanges = function (changes) {
            _super.prototype.ngOnChanges.call(this, changes);
            this.setupChanges('columns', changes);
            this.setupChanges('stripLines', changes);
        };
        DxGanttComponent.prototype.setupChanges = function (prop, changes) {
            if (!(prop in this._optionsToUpdate)) {
                this._idh.setup(prop, changes);
            }
        };
        DxGanttComponent.prototype.ngDoCheck = function () {
            this._idh.doCheck('columns');
            this._idh.doCheck('stripLines');
            this._watcherHelper.checkWatchers();
            _super.prototype.ngDoCheck.call(this);
            _super.prototype.clearChangedOptions.call(this);
        };
        DxGanttComponent.prototype._setOption = function (name, value) {
            var isSetup = this._idh.setupSingle(name, value);
            var isChanged = this._idh.getChanges(name, value) !== null;
            if (isSetup || isChanged) {
                _super.prototype._setOption.call(this, name, value);
            }
        };
        return DxGanttComponent;
    }(i1.DxComponent));
    /** @nocollapse */ DxGanttComponent.ɵfac = function DxGanttComponent_Factory(t) { return new (t || DxGanttComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef), i0__namespace.ɵɵdirectiveInject(i0__namespace.NgZone), i0__namespace.ɵɵdirectiveInject(i1__namespace.DxTemplateHost), i0__namespace.ɵɵdirectiveInject(i1__namespace.WatcherHelper), i0__namespace.ɵɵdirectiveInject(i1__namespace.IterableDifferHelper), i0__namespace.ɵɵdirectiveInject(i1__namespace.NestedOptionHost), i0__namespace.ɵɵdirectiveInject(i2__namespace.TransferState), i0__namespace.ɵɵdirectiveInject(i0.PLATFORM_ID)); };
    /** @nocollapse */ DxGanttComponent.ɵcmp = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineComponent({ type: DxGanttComponent, selectors: [["dx-gantt"]], contentQueries: function DxGanttComponent_ContentQueries(rf, ctx, dirIndex) {
            if (rf & 1) {
                i0__namespace.ɵɵcontentQuery(dirIndex, nested.DxiColumnComponent, 4);
                i0__namespace.ɵɵcontentQuery(dirIndex, nested.DxiStripLineComponent, 4);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.columnsChildren = _t);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.stripLinesChildren = _t);
            }
        }, inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", allowSelection: "allowSelection", columns: "columns", contextMenu: "contextMenu", dependencies: "dependencies", disabled: "disabled", editing: "editing", elementAttr: "elementAttr", endDateRange: "endDateRange", filterRow: "filterRow", firstDayOfWeek: "firstDayOfWeek", focusStateEnabled: "focusStateEnabled", headerFilter: "headerFilter", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", resourceAssignments: "resourceAssignments", resources: "resources", rootValue: "rootValue", scaleType: "scaleType", scaleTypeRange: "scaleTypeRange", selectedRowKey: "selectedRowKey", showDependencies: "showDependencies", showResources: "showResources", showRowLines: "showRowLines", sorting: "sorting", startDateRange: "startDateRange", stripLines: "stripLines", tabIndex: "tabIndex", taskContentTemplate: "taskContentTemplate", taskListWidth: "taskListWidth", taskProgressTooltipContentTemplate: "taskProgressTooltipContentTemplate", tasks: "tasks", taskTimeTooltipContentTemplate: "taskTimeTooltipContentTemplate", taskTitlePosition: "taskTitlePosition", taskTooltipContentTemplate: "taskTooltipContentTemplate", toolbar: "toolbar", validation: "validation", visible: "visible", width: "width" }, outputs: { onContentReady: "onContentReady", onContextMenuPreparing: "onContextMenuPreparing", onCustomCommand: "onCustomCommand", onDependencyDeleted: "onDependencyDeleted", onDependencyDeleting: "onDependencyDeleting", onDependencyInserted: "onDependencyInserted", onDependencyInserting: "onDependencyInserting", onDisposing: "onDisposing", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onResourceAssigned: "onResourceAssigned", onResourceAssigning: "onResourceAssigning", onResourceDeleted: "onResourceDeleted", onResourceDeleting: "onResourceDeleting", onResourceInserted: "onResourceInserted", onResourceInserting: "onResourceInserting", onResourceManagerDialogShowing: "onResourceManagerDialogShowing", onResourceUnassigned: "onResourceUnassigned", onResourceUnassigning: "onResourceUnassigning", onScaleCellPrepared: "onScaleCellPrepared", onSelectionChanged: "onSelectionChanged", onTaskClick: "onTaskClick", onTaskDblClick: "onTaskDblClick", onTaskDeleted: "onTaskDeleted", onTaskDeleting: "onTaskDeleting", onTaskEditDialogShowing: "onTaskEditDialogShowing", onTaskInserted: "onTaskInserted", onTaskInserting: "onTaskInserting", onTaskMoving: "onTaskMoving", onTaskUpdated: "onTaskUpdated", onTaskUpdating: "onTaskUpdating", accessKeyChange: "accessKeyChange", activeStateEnabledChange: "activeStateEnabledChange", allowSelectionChange: "allowSelectionChange", columnsChange: "columnsChange", contextMenuChange: "contextMenuChange", dependenciesChange: "dependenciesChange", disabledChange: "disabledChange", editingChange: "editingChange", elementAttrChange: "elementAttrChange", endDateRangeChange: "endDateRangeChange", filterRowChange: "filterRowChange", firstDayOfWeekChange: "firstDayOfWeekChange", focusStateEnabledChange: "focusStateEnabledChange", headerFilterChange: "headerFilterChange", heightChange: "heightChange", hintChange: "hintChange", hoverStateEnabledChange: "hoverStateEnabledChange", resourceAssignmentsChange: "resourceAssignmentsChange", resourcesChange: "resourcesChange", rootValueChange: "rootValueChange", scaleTypeChange: "scaleTypeChange", scaleTypeRangeChange: "scaleTypeRangeChange", selectedRowKeyChange: "selectedRowKeyChange", showDependenciesChange: "showDependenciesChange", showResourcesChange: "showResourcesChange", showRowLinesChange: "showRowLinesChange", sortingChange: "sortingChange", startDateRangeChange: "startDateRangeChange", stripLinesChange: "stripLinesChange", tabIndexChange: "tabIndexChange", taskContentTemplateChange: "taskContentTemplateChange", taskListWidthChange: "taskListWidthChange", taskProgressTooltipContentTemplateChange: "taskProgressTooltipContentTemplateChange", tasksChange: "tasksChange", taskTimeTooltipContentTemplateChange: "taskTimeTooltipContentTemplateChange", taskTitlePositionChange: "taskTitlePositionChange", taskTooltipContentTemplateChange: "taskTooltipContentTemplateChange", toolbarChange: "toolbarChange", validationChange: "validationChange", visibleChange: "visibleChange", widthChange: "widthChange" }, features: [i0__namespace.ɵɵProvidersFeature([
                i1.DxTemplateHost,
                i1.WatcherHelper,
                i1.NestedOptionHost,
                i1.IterableDifferHelper
            ]), i0__namespace.ɵɵInheritDefinitionFeature, i0__namespace.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function DxGanttComponent_Template(rf, ctx) { }, encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DxGanttComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'dx-gantt',
                        template: '',
                        providers: [
                            i1.DxTemplateHost,
                            i1.WatcherHelper,
                            i1.NestedOptionHost,
                            i1.IterableDifferHelper
                        ]
                    }]
            }], function () {
            return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.NgZone }, { type: i1__namespace.DxTemplateHost }, { type: i1__namespace.WatcherHelper }, { type: i1__namespace.IterableDifferHelper }, { type: i1__namespace.NestedOptionHost }, { type: i2__namespace.TransferState }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.PLATFORM_ID]
                        }] }];
        }, { accessKey: [{
                    type: i0.Input
                }], activeStateEnabled: [{
                    type: i0.Input
                }], allowSelection: [{
                    type: i0.Input
                }], columns: [{
                    type: i0.Input
                }], contextMenu: [{
                    type: i0.Input
                }], dependencies: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editing: [{
                    type: i0.Input
                }], elementAttr: [{
                    type: i0.Input
                }], endDateRange: [{
                    type: i0.Input
                }], filterRow: [{
                    type: i0.Input
                }], firstDayOfWeek: [{
                    type: i0.Input
                }], focusStateEnabled: [{
                    type: i0.Input
                }], headerFilter: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hoverStateEnabled: [{
                    type: i0.Input
                }], resourceAssignments: [{
                    type: i0.Input
                }], resources: [{
                    type: i0.Input
                }], rootValue: [{
                    type: i0.Input
                }], scaleType: [{
                    type: i0.Input
                }], scaleTypeRange: [{
                    type: i0.Input
                }], selectedRowKey: [{
                    type: i0.Input
                }], showDependencies: [{
                    type: i0.Input
                }], showResources: [{
                    type: i0.Input
                }], showRowLines: [{
                    type: i0.Input
                }], sorting: [{
                    type: i0.Input
                }], startDateRange: [{
                    type: i0.Input
                }], stripLines: [{
                    type: i0.Input
                }], tabIndex: [{
                    type: i0.Input
                }], taskContentTemplate: [{
                    type: i0.Input
                }], taskListWidth: [{
                    type: i0.Input
                }], taskProgressTooltipContentTemplate: [{
                    type: i0.Input
                }], tasks: [{
                    type: i0.Input
                }], taskTimeTooltipContentTemplate: [{
                    type: i0.Input
                }], taskTitlePosition: [{
                    type: i0.Input
                }], taskTooltipContentTemplate: [{
                    type: i0.Input
                }], toolbar: [{
                    type: i0.Input
                }], validation: [{
                    type: i0.Input
                }], visible: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], onContentReady: [{
                    type: i0.Output
                }], onContextMenuPreparing: [{
                    type: i0.Output
                }], onCustomCommand: [{
                    type: i0.Output
                }], onDependencyDeleted: [{
                    type: i0.Output
                }], onDependencyDeleting: [{
                    type: i0.Output
                }], onDependencyInserted: [{
                    type: i0.Output
                }], onDependencyInserting: [{
                    type: i0.Output
                }], onDisposing: [{
                    type: i0.Output
                }], onInitialized: [{
                    type: i0.Output
                }], onOptionChanged: [{
                    type: i0.Output
                }], onResourceAssigned: [{
                    type: i0.Output
                }], onResourceAssigning: [{
                    type: i0.Output
                }], onResourceDeleted: [{
                    type: i0.Output
                }], onResourceDeleting: [{
                    type: i0.Output
                }], onResourceInserted: [{
                    type: i0.Output
                }], onResourceInserting: [{
                    type: i0.Output
                }], onResourceManagerDialogShowing: [{
                    type: i0.Output
                }], onResourceUnassigned: [{
                    type: i0.Output
                }], onResourceUnassigning: [{
                    type: i0.Output
                }], onScaleCellPrepared: [{
                    type: i0.Output
                }], onSelectionChanged: [{
                    type: i0.Output
                }], onTaskClick: [{
                    type: i0.Output
                }], onTaskDblClick: [{
                    type: i0.Output
                }], onTaskDeleted: [{
                    type: i0.Output
                }], onTaskDeleting: [{
                    type: i0.Output
                }], onTaskEditDialogShowing: [{
                    type: i0.Output
                }], onTaskInserted: [{
                    type: i0.Output
                }], onTaskInserting: [{
                    type: i0.Output
                }], onTaskMoving: [{
                    type: i0.Output
                }], onTaskUpdated: [{
                    type: i0.Output
                }], onTaskUpdating: [{
                    type: i0.Output
                }], accessKeyChange: [{
                    type: i0.Output
                }], activeStateEnabledChange: [{
                    type: i0.Output
                }], allowSelectionChange: [{
                    type: i0.Output
                }], columnsChange: [{
                    type: i0.Output
                }], contextMenuChange: [{
                    type: i0.Output
                }], dependenciesChange: [{
                    type: i0.Output
                }], disabledChange: [{
                    type: i0.Output
                }], editingChange: [{
                    type: i0.Output
                }], elementAttrChange: [{
                    type: i0.Output
                }], endDateRangeChange: [{
                    type: i0.Output
                }], filterRowChange: [{
                    type: i0.Output
                }], firstDayOfWeekChange: [{
                    type: i0.Output
                }], focusStateEnabledChange: [{
                    type: i0.Output
                }], headerFilterChange: [{
                    type: i0.Output
                }], heightChange: [{
                    type: i0.Output
                }], hintChange: [{
                    type: i0.Output
                }], hoverStateEnabledChange: [{
                    type: i0.Output
                }], resourceAssignmentsChange: [{
                    type: i0.Output
                }], resourcesChange: [{
                    type: i0.Output
                }], rootValueChange: [{
                    type: i0.Output
                }], scaleTypeChange: [{
                    type: i0.Output
                }], scaleTypeRangeChange: [{
                    type: i0.Output
                }], selectedRowKeyChange: [{
                    type: i0.Output
                }], showDependenciesChange: [{
                    type: i0.Output
                }], showResourcesChange: [{
                    type: i0.Output
                }], showRowLinesChange: [{
                    type: i0.Output
                }], sortingChange: [{
                    type: i0.Output
                }], startDateRangeChange: [{
                    type: i0.Output
                }], stripLinesChange: [{
                    type: i0.Output
                }], tabIndexChange: [{
                    type: i0.Output
                }], taskContentTemplateChange: [{
                    type: i0.Output
                }], taskListWidthChange: [{
                    type: i0.Output
                }], taskProgressTooltipContentTemplateChange: [{
                    type: i0.Output
                }], tasksChange: [{
                    type: i0.Output
                }], taskTimeTooltipContentTemplateChange: [{
                    type: i0.Output
                }], taskTitlePositionChange: [{
                    type: i0.Output
                }], taskTooltipContentTemplateChange: [{
                    type: i0.Output
                }], toolbarChange: [{
                    type: i0.Output
                }], validationChange: [{
                    type: i0.Output
                }], visibleChange: [{
                    type: i0.Output
                }], widthChange: [{
                    type: i0.Output
                }], columnsChildren: [{
                    type: i0.ContentChildren,
                    args: [nested.DxiColumnComponent]
                }], stripLinesChildren: [{
                    type: i0.ContentChildren,
                    args: [nested.DxiStripLineComponent]
                }] });
    })();
    var DxGanttModule = /** @class */ (function () {
        function DxGanttModule() {
        }
        return DxGanttModule;
    }());
    /** @nocollapse */ DxGanttModule.ɵfac = function DxGanttModule_Factory(t) { return new (t || DxGanttModule)(); };
    /** @nocollapse */ DxGanttModule.ɵmod = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineNgModule({ type: DxGanttModule });
    /** @nocollapse */ DxGanttModule.ɵinj = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineInjector({ imports: [[
                nested.DxiColumnModule,
                nested.DxoFormatModule,
                nested.DxoHeaderFilterModule,
                nested.DxoContextMenuModule,
                nested.DxiItemModule,
                nested.DxoDependenciesModule,
                nested.DxoEditingModule,
                nested.DxoFilterRowModule,
                nested.DxoOperationDescriptionsModule,
                nested.DxoTextsModule,
                nested.DxoResourceAssignmentsModule,
                nested.DxoResourcesModule,
                nested.DxoScaleTypeRangeModule,
                nested.DxoSortingModule,
                nested.DxiStripLineModule,
                nested.DxoTasksModule,
                nested.DxoToolbarModule,
                nested.DxoValidationModule,
                i1.DxIntegrationModule,
                i1.DxTemplateModule,
                i2.BrowserTransferStateModule
            ], nested.DxiColumnModule,
            nested.DxoFormatModule,
            nested.DxoHeaderFilterModule,
            nested.DxoContextMenuModule,
            nested.DxiItemModule,
            nested.DxoDependenciesModule,
            nested.DxoEditingModule,
            nested.DxoFilterRowModule,
            nested.DxoOperationDescriptionsModule,
            nested.DxoTextsModule,
            nested.DxoResourceAssignmentsModule,
            nested.DxoResourcesModule,
            nested.DxoScaleTypeRangeModule,
            nested.DxoSortingModule,
            nested.DxiStripLineModule,
            nested.DxoTasksModule,
            nested.DxoToolbarModule,
            nested.DxoValidationModule,
            i1.DxTemplateModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DxGanttModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            nested.DxiColumnModule,
                            nested.DxoFormatModule,
                            nested.DxoHeaderFilterModule,
                            nested.DxoContextMenuModule,
                            nested.DxiItemModule,
                            nested.DxoDependenciesModule,
                            nested.DxoEditingModule,
                            nested.DxoFilterRowModule,
                            nested.DxoOperationDescriptionsModule,
                            nested.DxoTextsModule,
                            nested.DxoResourceAssignmentsModule,
                            nested.DxoResourcesModule,
                            nested.DxoScaleTypeRangeModule,
                            nested.DxoSortingModule,
                            nested.DxiStripLineModule,
                            nested.DxoTasksModule,
                            nested.DxoToolbarModule,
                            nested.DxoValidationModule,
                            i1.DxIntegrationModule,
                            i1.DxTemplateModule,
                            i2.BrowserTransferStateModule
                        ],
                        declarations: [
                            DxGanttComponent
                        ],
                        exports: [
                            DxGanttComponent,
                            nested.DxiColumnModule,
                            nested.DxoFormatModule,
                            nested.DxoHeaderFilterModule,
                            nested.DxoContextMenuModule,
                            nested.DxiItemModule,
                            nested.DxoDependenciesModule,
                            nested.DxoEditingModule,
                            nested.DxoFilterRowModule,
                            nested.DxoOperationDescriptionsModule,
                            nested.DxoTextsModule,
                            nested.DxoResourceAssignmentsModule,
                            nested.DxoResourcesModule,
                            nested.DxoScaleTypeRangeModule,
                            nested.DxoSortingModule,
                            nested.DxiStripLineModule,
                            nested.DxoTasksModule,
                            nested.DxoToolbarModule,
                            nested.DxoValidationModule,
                            i1.DxTemplateModule
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(DxGanttModule, { declarations: [DxGanttComponent], imports: [nested.DxiColumnModule,
                nested.DxoFormatModule,
                nested.DxoHeaderFilterModule,
                nested.DxoContextMenuModule,
                nested.DxiItemModule,
                nested.DxoDependenciesModule,
                nested.DxoEditingModule,
                nested.DxoFilterRowModule,
                nested.DxoOperationDescriptionsModule,
                nested.DxoTextsModule,
                nested.DxoResourceAssignmentsModule,
                nested.DxoResourcesModule,
                nested.DxoScaleTypeRangeModule,
                nested.DxoSortingModule,
                nested.DxiStripLineModule,
                nested.DxoTasksModule,
                nested.DxoToolbarModule,
                nested.DxoValidationModule,
                i1.DxIntegrationModule,
                i1.DxTemplateModule,
                i2.BrowserTransferStateModule], exports: [DxGanttComponent, nested.DxiColumnModule,
                nested.DxoFormatModule,
                nested.DxoHeaderFilterModule,
                nested.DxoContextMenuModule,
                nested.DxiItemModule,
                nested.DxoDependenciesModule,
                nested.DxoEditingModule,
                nested.DxoFilterRowModule,
                nested.DxoOperationDescriptionsModule,
                nested.DxoTextsModule,
                nested.DxoResourceAssignmentsModule,
                nested.DxoResourcesModule,
                nested.DxoScaleTypeRangeModule,
                nested.DxoSortingModule,
                nested.DxiStripLineModule,
                nested.DxoTasksModule,
                nested.DxoToolbarModule,
                nested.DxoValidationModule,
                i1.DxTemplateModule] });
    })();

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DxGanttComponent = DxGanttComponent;
    exports.DxGanttModule = DxGanttModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=devextreme-angular-ui-gantt.umd.js.map
