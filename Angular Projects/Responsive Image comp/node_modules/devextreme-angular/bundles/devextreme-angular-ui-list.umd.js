(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/platform-browser'), require('@angular/core'), require('devextreme/ui/list'), require('devextreme-angular/core'), require('devextreme-angular/ui/nested')) :
    typeof define === 'function' && define.amd ? define('devextreme-angular/ui/list', ['exports', '@angular/platform-browser', '@angular/core', 'devextreme/ui/list', 'devextreme-angular/core', 'devextreme-angular/ui/nested'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["devextreme-angular"] = global["devextreme-angular"] || {}, global["devextreme-angular"].ui = global["devextreme-angular"].ui || {}, global["devextreme-angular"].ui.list = {}), global.ng.platformBrowser, global.ng.core, global.DxList, global["devextreme-angular"].core, global["devextreme-angular"].ui.nested));
})(this, (function (exports, i2, i0, DxList, i1, nested) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var DxList__default = /*#__PURE__*/_interopDefaultLegacy(DxList);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    function __createBinding(o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    }
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                exports[p] = m[p];
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    result[k] = mod[k];
        result.default = mod;
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * The List is a UI component that represents a collection of items in a scrollable list.

     */
    var DxListComponent = /** @class */ (function (_super) {
        __extends(DxListComponent, _super);
        function DxListComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
            var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;
            _this._watcherHelper = _watcherHelper;
            _this._idh = _idh;
            _this._createEventEmitters([
                { subscribe: 'contentReady', emit: 'onContentReady' },
                { subscribe: 'disposing', emit: 'onDisposing' },
                { subscribe: 'groupRendered', emit: 'onGroupRendered' },
                { subscribe: 'initialized', emit: 'onInitialized' },
                { subscribe: 'itemClick', emit: 'onItemClick' },
                { subscribe: 'itemContextMenu', emit: 'onItemContextMenu' },
                { subscribe: 'itemDeleted', emit: 'onItemDeleted' },
                { subscribe: 'itemDeleting', emit: 'onItemDeleting' },
                { subscribe: 'itemHold', emit: 'onItemHold' },
                { subscribe: 'itemRendered', emit: 'onItemRendered' },
                { subscribe: 'itemReordered', emit: 'onItemReordered' },
                { subscribe: 'itemSwipe', emit: 'onItemSwipe' },
                { subscribe: 'optionChanged', emit: 'onOptionChanged' },
                { subscribe: 'pageLoading', emit: 'onPageLoading' },
                { subscribe: 'pullRefresh', emit: 'onPullRefresh' },
                { subscribe: 'scroll', emit: 'onScroll' },
                { subscribe: 'selectAllValueChanged', emit: 'onSelectAllValueChanged' },
                { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },
                { emit: 'accessKeyChange' },
                { emit: 'activeStateEnabledChange' },
                { emit: 'allowItemDeletingChange' },
                { emit: 'bounceEnabledChange' },
                { emit: 'collapsibleGroupsChange' },
                { emit: 'dataSourceChange' },
                { emit: 'disabledChange' },
                { emit: 'displayExprChange' },
                { emit: 'elementAttrChange' },
                { emit: 'focusStateEnabledChange' },
                { emit: 'groupedChange' },
                { emit: 'groupTemplateChange' },
                { emit: 'heightChange' },
                { emit: 'hintChange' },
                { emit: 'hoverStateEnabledChange' },
                { emit: 'indicateLoadingChange' },
                { emit: 'itemDeleteModeChange' },
                { emit: 'itemDraggingChange' },
                { emit: 'itemHoldTimeoutChange' },
                { emit: 'itemsChange' },
                { emit: 'itemTemplateChange' },
                { emit: 'keyExprChange' },
                { emit: 'menuItemsChange' },
                { emit: 'menuModeChange' },
                { emit: 'nextButtonTextChange' },
                { emit: 'noDataTextChange' },
                { emit: 'pageLoadingTextChange' },
                { emit: 'pageLoadModeChange' },
                { emit: 'pulledDownTextChange' },
                { emit: 'pullingDownTextChange' },
                { emit: 'pullRefreshEnabledChange' },
                { emit: 'refreshingTextChange' },
                { emit: 'repaintChangesOnlyChange' },
                { emit: 'rtlEnabledChange' },
                { emit: 'scrollByContentChange' },
                { emit: 'scrollByThumbChange' },
                { emit: 'scrollingEnabledChange' },
                { emit: 'searchEditorOptionsChange' },
                { emit: 'searchEnabledChange' },
                { emit: 'searchExprChange' },
                { emit: 'searchModeChange' },
                { emit: 'searchTimeoutChange' },
                { emit: 'searchValueChange' },
                { emit: 'selectAllModeChange' },
                { emit: 'selectAllTextChange' },
                { emit: 'selectedItemKeysChange' },
                { emit: 'selectedItemsChange' },
                { emit: 'selectionModeChange' },
                { emit: 'showScrollbarChange' },
                { emit: 'showSelectionControlsChange' },
                { emit: 'tabIndexChange' },
                { emit: 'useNativeScrollingChange' },
                { emit: 'visibleChange' },
                { emit: 'widthChange' }
            ]);
            _this._idh.setHost(_this);
            optionHost.setHost(_this);
            return _this;
        }
        Object.defineProperty(DxListComponent.prototype, "accessKey", {
            /**
             * Specifies the shortcut key that sets focus on the UI component.
            
             */
            get: function () {
                return this._getOption('accessKey');
            },
            set: function (value) {
                this._setOption('accessKey', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "activeStateEnabled", {
            /**
             * Specifies whether the UI component changes its visual state as a result of user interaction.
            
             */
            get: function () {
                return this._getOption('activeStateEnabled');
            },
            set: function (value) {
                this._setOption('activeStateEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "allowItemDeleting", {
            /**
             * Specifies whether or not an end user can delete list items.
            
             */
            get: function () {
                return this._getOption('allowItemDeleting');
            },
            set: function (value) {
                this._setOption('allowItemDeleting', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "bounceEnabled", {
            /**
             * A Boolean value specifying whether to enable or disable the bounce-back effect.
            
             */
            get: function () {
                return this._getOption('bounceEnabled');
            },
            set: function (value) {
                this._setOption('bounceEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "collapsibleGroups", {
            /**
             * Specifies whether or not an end user can collapse groups.
            
             */
            get: function () {
                return this._getOption('collapsibleGroups');
            },
            set: function (value) {
                this._setOption('collapsibleGroups', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "dataSource", {
            /**
             * Binds the UI component to data.
            
             */
            get: function () {
                return this._getOption('dataSource');
            },
            set: function (value) {
                this._setOption('dataSource', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "disabled", {
            /**
             * Specifies whether the UI component responds to user interaction.
            
             */
            get: function () {
                return this._getOption('disabled');
            },
            set: function (value) {
                this._setOption('disabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "displayExpr", {
            /**
             * Specifies the data field whose values should be displayed. Defaults to &apos;text&apos; when the data source contains objects.
            
             */
            get: function () {
                return this._getOption('displayExpr');
            },
            set: function (value) {
                this._setOption('displayExpr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "elementAttr", {
            /**
             * Specifies the global attributes to be attached to the UI component&apos;s container element.
            
             */
            get: function () {
                return this._getOption('elementAttr');
            },
            set: function (value) {
                this._setOption('elementAttr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "focusStateEnabled", {
            /**
             * Specifies whether the UI component can be focused using keyboard navigation.
            
             */
            get: function () {
                return this._getOption('focusStateEnabled');
            },
            set: function (value) {
                this._setOption('focusStateEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "grouped", {
            /**
             * Specifies whether data items should be grouped.
            
             */
            get: function () {
                return this._getOption('grouped');
            },
            set: function (value) {
                this._setOption('grouped', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "groupTemplate", {
            /**
             * Specifies a custom template for group captions.
            
             */
            get: function () {
                return this._getOption('groupTemplate');
            },
            set: function (value) {
                this._setOption('groupTemplate', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "height", {
            /**
             * Specifies the UI component&apos;s height.
            
             */
            get: function () {
                return this._getOption('height');
            },
            set: function (value) {
                this._setOption('height', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "hint", {
            /**
             * Specifies text for a hint that appears when a user pauses on the UI component.
            
             */
            get: function () {
                return this._getOption('hint');
            },
            set: function (value) {
                this._setOption('hint', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "hoverStateEnabled", {
            /**
             * Specifies whether the UI component changes its state when a user pauses on it.
            
             */
            get: function () {
                return this._getOption('hoverStateEnabled');
            },
            set: function (value) {
                this._setOption('hoverStateEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "indicateLoading", {
            /**
             * Specifies whether or not to show the loading panel when the DataSource bound to the UI component is loading data.
            
             */
            get: function () {
                return this._getOption('indicateLoading');
            },
            set: function (value) {
                this._setOption('indicateLoading', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "itemDeleteMode", {
            /**
             * Specifies the way a user can delete items from the list.
            
             */
            get: function () {
                return this._getOption('itemDeleteMode');
            },
            set: function (value) {
                this._setOption('itemDeleteMode', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "itemDragging", {
            /**
             * Configures item reordering using drag and drop gestures.
            
             */
            get: function () {
                return this._getOption('itemDragging');
            },
            set: function (value) {
                this._setOption('itemDragging', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "itemHoldTimeout", {
            /**
             * The time period in milliseconds before the onItemHold event is raised.
            
             */
            get: function () {
                return this._getOption('itemHoldTimeout');
            },
            set: function (value) {
                this._setOption('itemHoldTimeout', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "items", {
            /**
             * An array of items displayed by the UI component.
            
             */
            get: function () {
                return this._getOption('items');
            },
            set: function (value) {
                this._setOption('items', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "itemTemplate", {
            /**
             * Specifies a custom template for items.
            
             */
            get: function () {
                return this._getOption('itemTemplate');
            },
            set: function (value) {
                this._setOption('itemTemplate', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "keyExpr", {
            /**
             * Specifies the key property that provides key values to access data items. Each key value must be unique.
            
             */
            get: function () {
                return this._getOption('keyExpr');
            },
            set: function (value) {
                this._setOption('keyExpr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "menuItems", {
            /**
             * Specifies the array of items for a context menu called for a list item.
            
             */
            get: function () {
                return this._getOption('menuItems');
            },
            set: function (value) {
                this._setOption('menuItems', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "menuMode", {
            /**
             * Specifies whether an item context menu is shown when a user holds or swipes an item.
            
             */
            get: function () {
                return this._getOption('menuMode');
            },
            set: function (value) {
                this._setOption('menuMode', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "nextButtonText", {
            /**
             * The text displayed on the button used to load the next page from the data source.
            
             */
            get: function () {
                return this._getOption('nextButtonText');
            },
            set: function (value) {
                this._setOption('nextButtonText', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "noDataText", {
            /**
             * Specifies the text or HTML markup displayed by the UI component if the item collection is empty.
            
             */
            get: function () {
                return this._getOption('noDataText');
            },
            set: function (value) {
                this._setOption('noDataText', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "pageLoadingText", {
            /**
             * Specifies the text shown in the pullDown panel, which is displayed when the list is scrolled to the bottom.
            
             */
            get: function () {
                return this._getOption('pageLoadingText');
            },
            set: function (value) {
                this._setOption('pageLoadingText', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "pageLoadMode", {
            /**
             * Specifies whether the next page is loaded when a user scrolls the UI component to the bottom or when the &apos;next&apos; button is clicked.
            
             */
            get: function () {
                return this._getOption('pageLoadMode');
            },
            set: function (value) {
                this._setOption('pageLoadMode', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "pulledDownText", {
            /**
             * Specifies the text displayed in the pullDown panel when the list is pulled below the refresh threshold.
            
             */
            get: function () {
                return this._getOption('pulledDownText');
            },
            set: function (value) {
                this._setOption('pulledDownText', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "pullingDownText", {
            /**
             * Specifies the text shown in the pullDown panel while the list is being pulled down to the refresh threshold.
            
             */
            get: function () {
                return this._getOption('pullingDownText');
            },
            set: function (value) {
                this._setOption('pullingDownText', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "pullRefreshEnabled", {
            /**
             * A Boolean value specifying whether or not the UI component supports the &apos;pull down to refresh&apos; gesture.
            
             */
            get: function () {
                return this._getOption('pullRefreshEnabled');
            },
            set: function (value) {
                this._setOption('pullRefreshEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "refreshingText", {
            /**
             * Specifies the text displayed in the pullDown panel while the list is being refreshed.
            
             */
            get: function () {
                return this._getOption('refreshingText');
            },
            set: function (value) {
                this._setOption('refreshingText', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "repaintChangesOnly", {
            /**
             * Specifies whether to repaint only those elements whose data changed.
            
             */
            get: function () {
                return this._getOption('repaintChangesOnly');
            },
            set: function (value) {
                this._setOption('repaintChangesOnly', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "rtlEnabled", {
            /**
             * Switches the UI component to a right-to-left representation.
            
             */
            get: function () {
                return this._getOption('rtlEnabled');
            },
            set: function (value) {
                this._setOption('rtlEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "scrollByContent", {
            /**
             * A Boolean value specifying if the list is scrolled by content.
            
             */
            get: function () {
                return this._getOption('scrollByContent');
            },
            set: function (value) {
                this._setOption('scrollByContent', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "scrollByThumb", {
            /**
             * Specifies whether a user can scroll the content with the scrollbar. Applies only if useNativeScrolling is false.
            
             */
            get: function () {
                return this._getOption('scrollByThumb');
            },
            set: function (value) {
                this._setOption('scrollByThumb', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "scrollingEnabled", {
            /**
             * A Boolean value specifying whether to enable or disable list scrolling.
            
             */
            get: function () {
                return this._getOption('scrollingEnabled');
            },
            set: function (value) {
                this._setOption('scrollingEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "searchEditorOptions", {
            /**
             * Configures the search panel.
            
             */
            get: function () {
                return this._getOption('searchEditorOptions');
            },
            set: function (value) {
                this._setOption('searchEditorOptions', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "searchEnabled", {
            /**
             * Specifies whether the search panel is visible.
            
             */
            get: function () {
                return this._getOption('searchEnabled');
            },
            set: function (value) {
                this._setOption('searchEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "searchExpr", {
            /**
             * Specifies a data object&apos;s field name or an expression whose value is compared to the search string.
            
             */
            get: function () {
                return this._getOption('searchExpr');
            },
            set: function (value) {
                this._setOption('searchExpr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "searchMode", {
            /**
             * Specifies a comparison operation used to search UI component items.
            
             */
            get: function () {
                return this._getOption('searchMode');
            },
            set: function (value) {
                this._setOption('searchMode', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "searchTimeout", {
            /**
             * Specifies a delay in milliseconds between when a user finishes typing, and the search is executed.
            
             */
            get: function () {
                return this._getOption('searchTimeout');
            },
            set: function (value) {
                this._setOption('searchTimeout', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "searchValue", {
            /**
             * Specifies the current search string.
            
             */
            get: function () {
                return this._getOption('searchValue');
            },
            set: function (value) {
                this._setOption('searchValue', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "selectAllMode", {
            /**
             * Specifies the mode in which all items are selected.
            
             */
            get: function () {
                return this._getOption('selectAllMode');
            },
            set: function (value) {
                this._setOption('selectAllMode', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "selectAllText", {
            /**
             * Specifies the text displayed at the &apos;Select All&apos; check box.
            
             */
            get: function () {
                return this._getOption('selectAllText');
            },
            set: function (value) {
                this._setOption('selectAllText', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "selectedItemKeys", {
            /**
             * Specifies an array of currently selected item keys.
            
             */
            get: function () {
                return this._getOption('selectedItemKeys');
            },
            set: function (value) {
                this._setOption('selectedItemKeys', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "selectedItems", {
            /**
             * An array of currently selected item objects.
            
             */
            get: function () {
                return this._getOption('selectedItems');
            },
            set: function (value) {
                this._setOption('selectedItems', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "selectionMode", {
            /**
             * Specifies item selection mode.
            
             */
            get: function () {
                return this._getOption('selectionMode');
            },
            set: function (value) {
                this._setOption('selectionMode', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "showScrollbar", {
            /**
             * Specifies when the UI component shows the scrollbar.
            
             */
            get: function () {
                return this._getOption('showScrollbar');
            },
            set: function (value) {
                this._setOption('showScrollbar', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "showSelectionControls", {
            /**
             * Specifies whether or not to display controls used to select list items.
            
             */
            get: function () {
                return this._getOption('showSelectionControls');
            },
            set: function (value) {
                this._setOption('showSelectionControls', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "tabIndex", {
            /**
             * Specifies the number of the element when the Tab key is used for navigating.
            
             */
            get: function () {
                return this._getOption('tabIndex');
            },
            set: function (value) {
                this._setOption('tabIndex', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "useNativeScrolling", {
            /**
             * Specifies whether or not the UI component uses native scrolling.
            
             */
            get: function () {
                return this._getOption('useNativeScrolling');
            },
            set: function (value) {
                this._setOption('useNativeScrolling', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "visible", {
            /**
             * Specifies whether the UI component is visible.
            
             */
            get: function () {
                return this._getOption('visible');
            },
            set: function (value) {
                this._setOption('visible', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "width", {
            /**
             * Specifies the UI component&apos;s width.
            
             */
            get: function () {
                return this._getOption('width');
            },
            set: function (value) {
                this._setOption('width', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "itemsChildren", {
            get: function () {
                return this._getOption('items');
            },
            set: function (value) {
                this.setChildren('items', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxListComponent.prototype, "menuItemsChildren", {
            get: function () {
                return this._getOption('menuItems');
            },
            set: function (value) {
                this.setChildren('menuItems', value);
            },
            enumerable: false,
            configurable: true
        });
        DxListComponent.prototype._createInstance = function (element, options) {
            return new DxList__default["default"](element, options);
        };
        DxListComponent.prototype.ngOnDestroy = function () {
            this._destroyWidget();
        };
        DxListComponent.prototype.ngOnChanges = function (changes) {
            _super.prototype.ngOnChanges.call(this, changes);
            this.setupChanges('dataSource', changes);
            this.setupChanges('items', changes);
            this.setupChanges('menuItems', changes);
            this.setupChanges('searchExpr', changes);
            this.setupChanges('selectedItemKeys', changes);
            this.setupChanges('selectedItems', changes);
        };
        DxListComponent.prototype.setupChanges = function (prop, changes) {
            if (!(prop in this._optionsToUpdate)) {
                this._idh.setup(prop, changes);
            }
        };
        DxListComponent.prototype.ngDoCheck = function () {
            this._idh.doCheck('dataSource');
            this._idh.doCheck('items');
            this._idh.doCheck('menuItems');
            this._idh.doCheck('searchExpr');
            this._idh.doCheck('selectedItemKeys');
            this._idh.doCheck('selectedItems');
            this._watcherHelper.checkWatchers();
            _super.prototype.ngDoCheck.call(this);
            _super.prototype.clearChangedOptions.call(this);
        };
        DxListComponent.prototype._setOption = function (name, value) {
            var isSetup = this._idh.setupSingle(name, value);
            var isChanged = this._idh.getChanges(name, value) !== null;
            if (isSetup || isChanged) {
                _super.prototype._setOption.call(this, name, value);
            }
        };
        return DxListComponent;
    }(i1.DxComponent));
    /** @nocollapse */ DxListComponent.ɵfac = function DxListComponent_Factory(t) { return new (t || DxListComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef), i0__namespace.ɵɵdirectiveInject(i0__namespace.NgZone), i0__namespace.ɵɵdirectiveInject(i1__namespace.DxTemplateHost), i0__namespace.ɵɵdirectiveInject(i1__namespace.WatcherHelper), i0__namespace.ɵɵdirectiveInject(i1__namespace.IterableDifferHelper), i0__namespace.ɵɵdirectiveInject(i1__namespace.NestedOptionHost), i0__namespace.ɵɵdirectiveInject(i2__namespace.TransferState), i0__namespace.ɵɵdirectiveInject(i0.PLATFORM_ID)); };
    /** @nocollapse */ DxListComponent.ɵcmp = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineComponent({ type: DxListComponent, selectors: [["dx-list"]], contentQueries: function DxListComponent_ContentQueries(rf, ctx, dirIndex) {
            if (rf & 1) {
                i0__namespace.ɵɵcontentQuery(dirIndex, nested.DxiItemComponent, 4);
                i0__namespace.ɵɵcontentQuery(dirIndex, nested.DxiMenuItemComponent, 4);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.itemsChildren = _t);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.menuItemsChildren = _t);
            }
        }, inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", allowItemDeleting: "allowItemDeleting", bounceEnabled: "bounceEnabled", collapsibleGroups: "collapsibleGroups", dataSource: "dataSource", disabled: "disabled", displayExpr: "displayExpr", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", grouped: "grouped", groupTemplate: "groupTemplate", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", indicateLoading: "indicateLoading", itemDeleteMode: "itemDeleteMode", itemDragging: "itemDragging", itemHoldTimeout: "itemHoldTimeout", items: "items", itemTemplate: "itemTemplate", keyExpr: "keyExpr", menuItems: "menuItems", menuMode: "menuMode", nextButtonText: "nextButtonText", noDataText: "noDataText", pageLoadingText: "pageLoadingText", pageLoadMode: "pageLoadMode", pulledDownText: "pulledDownText", pullingDownText: "pullingDownText", pullRefreshEnabled: "pullRefreshEnabled", refreshingText: "refreshingText", repaintChangesOnly: "repaintChangesOnly", rtlEnabled: "rtlEnabled", scrollByContent: "scrollByContent", scrollByThumb: "scrollByThumb", scrollingEnabled: "scrollingEnabled", searchEditorOptions: "searchEditorOptions", searchEnabled: "searchEnabled", searchExpr: "searchExpr", searchMode: "searchMode", searchTimeout: "searchTimeout", searchValue: "searchValue", selectAllMode: "selectAllMode", selectAllText: "selectAllText", selectedItemKeys: "selectedItemKeys", selectedItems: "selectedItems", selectionMode: "selectionMode", showScrollbar: "showScrollbar", showSelectionControls: "showSelectionControls", tabIndex: "tabIndex", useNativeScrolling: "useNativeScrolling", visible: "visible", width: "width" }, outputs: { onContentReady: "onContentReady", onDisposing: "onDisposing", onGroupRendered: "onGroupRendered", onInitialized: "onInitialized", onItemClick: "onItemClick", onItemContextMenu: "onItemContextMenu", onItemDeleted: "onItemDeleted", onItemDeleting: "onItemDeleting", onItemHold: "onItemHold", onItemRendered: "onItemRendered", onItemReordered: "onItemReordered", onItemSwipe: "onItemSwipe", onOptionChanged: "onOptionChanged", onPageLoading: "onPageLoading", onPullRefresh: "onPullRefresh", onScroll: "onScroll", onSelectAllValueChanged: "onSelectAllValueChanged", onSelectionChanged: "onSelectionChanged", accessKeyChange: "accessKeyChange", activeStateEnabledChange: "activeStateEnabledChange", allowItemDeletingChange: "allowItemDeletingChange", bounceEnabledChange: "bounceEnabledChange", collapsibleGroupsChange: "collapsibleGroupsChange", dataSourceChange: "dataSourceChange", disabledChange: "disabledChange", displayExprChange: "displayExprChange", elementAttrChange: "elementAttrChange", focusStateEnabledChange: "focusStateEnabledChange", groupedChange: "groupedChange", groupTemplateChange: "groupTemplateChange", heightChange: "heightChange", hintChange: "hintChange", hoverStateEnabledChange: "hoverStateEnabledChange", indicateLoadingChange: "indicateLoadingChange", itemDeleteModeChange: "itemDeleteModeChange", itemDraggingChange: "itemDraggingChange", itemHoldTimeoutChange: "itemHoldTimeoutChange", itemsChange: "itemsChange", itemTemplateChange: "itemTemplateChange", keyExprChange: "keyExprChange", menuItemsChange: "menuItemsChange", menuModeChange: "menuModeChange", nextButtonTextChange: "nextButtonTextChange", noDataTextChange: "noDataTextChange", pageLoadingTextChange: "pageLoadingTextChange", pageLoadModeChange: "pageLoadModeChange", pulledDownTextChange: "pulledDownTextChange", pullingDownTextChange: "pullingDownTextChange", pullRefreshEnabledChange: "pullRefreshEnabledChange", refreshingTextChange: "refreshingTextChange", repaintChangesOnlyChange: "repaintChangesOnlyChange", rtlEnabledChange: "rtlEnabledChange", scrollByContentChange: "scrollByContentChange", scrollByThumbChange: "scrollByThumbChange", scrollingEnabledChange: "scrollingEnabledChange", searchEditorOptionsChange: "searchEditorOptionsChange", searchEnabledChange: "searchEnabledChange", searchExprChange: "searchExprChange", searchModeChange: "searchModeChange", searchTimeoutChange: "searchTimeoutChange", searchValueChange: "searchValueChange", selectAllModeChange: "selectAllModeChange", selectAllTextChange: "selectAllTextChange", selectedItemKeysChange: "selectedItemKeysChange", selectedItemsChange: "selectedItemsChange", selectionModeChange: "selectionModeChange", showScrollbarChange: "showScrollbarChange", showSelectionControlsChange: "showSelectionControlsChange", tabIndexChange: "tabIndexChange", useNativeScrollingChange: "useNativeScrollingChange", visibleChange: "visibleChange", widthChange: "widthChange" }, features: [i0__namespace.ɵɵProvidersFeature([
                i1.DxTemplateHost,
                i1.WatcherHelper,
                i1.NestedOptionHost,
                i1.IterableDifferHelper
            ]), i0__namespace.ɵɵInheritDefinitionFeature, i0__namespace.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function DxListComponent_Template(rf, ctx) { }, encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DxListComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'dx-list',
                        template: '',
                        providers: [
                            i1.DxTemplateHost,
                            i1.WatcherHelper,
                            i1.NestedOptionHost,
                            i1.IterableDifferHelper
                        ]
                    }]
            }], function () {
            return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.NgZone }, { type: i1__namespace.DxTemplateHost }, { type: i1__namespace.WatcherHelper }, { type: i1__namespace.IterableDifferHelper }, { type: i1__namespace.NestedOptionHost }, { type: i2__namespace.TransferState }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.PLATFORM_ID]
                        }] }];
        }, { accessKey: [{
                    type: i0.Input
                }], activeStateEnabled: [{
                    type: i0.Input
                }], allowItemDeleting: [{
                    type: i0.Input
                }], bounceEnabled: [{
                    type: i0.Input
                }], collapsibleGroups: [{
                    type: i0.Input
                }], dataSource: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], displayExpr: [{
                    type: i0.Input
                }], elementAttr: [{
                    type: i0.Input
                }], focusStateEnabled: [{
                    type: i0.Input
                }], grouped: [{
                    type: i0.Input
                }], groupTemplate: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hoverStateEnabled: [{
                    type: i0.Input
                }], indicateLoading: [{
                    type: i0.Input
                }], itemDeleteMode: [{
                    type: i0.Input
                }], itemDragging: [{
                    type: i0.Input
                }], itemHoldTimeout: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], itemTemplate: [{
                    type: i0.Input
                }], keyExpr: [{
                    type: i0.Input
                }], menuItems: [{
                    type: i0.Input
                }], menuMode: [{
                    type: i0.Input
                }], nextButtonText: [{
                    type: i0.Input
                }], noDataText: [{
                    type: i0.Input
                }], pageLoadingText: [{
                    type: i0.Input
                }], pageLoadMode: [{
                    type: i0.Input
                }], pulledDownText: [{
                    type: i0.Input
                }], pullingDownText: [{
                    type: i0.Input
                }], pullRefreshEnabled: [{
                    type: i0.Input
                }], refreshingText: [{
                    type: i0.Input
                }], repaintChangesOnly: [{
                    type: i0.Input
                }], rtlEnabled: [{
                    type: i0.Input
                }], scrollByContent: [{
                    type: i0.Input
                }], scrollByThumb: [{
                    type: i0.Input
                }], scrollingEnabled: [{
                    type: i0.Input
                }], searchEditorOptions: [{
                    type: i0.Input
                }], searchEnabled: [{
                    type: i0.Input
                }], searchExpr: [{
                    type: i0.Input
                }], searchMode: [{
                    type: i0.Input
                }], searchTimeout: [{
                    type: i0.Input
                }], searchValue: [{
                    type: i0.Input
                }], selectAllMode: [{
                    type: i0.Input
                }], selectAllText: [{
                    type: i0.Input
                }], selectedItemKeys: [{
                    type: i0.Input
                }], selectedItems: [{
                    type: i0.Input
                }], selectionMode: [{
                    type: i0.Input
                }], showScrollbar: [{
                    type: i0.Input
                }], showSelectionControls: [{
                    type: i0.Input
                }], tabIndex: [{
                    type: i0.Input
                }], useNativeScrolling: [{
                    type: i0.Input
                }], visible: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], onContentReady: [{
                    type: i0.Output
                }], onDisposing: [{
                    type: i0.Output
                }], onGroupRendered: [{
                    type: i0.Output
                }], onInitialized: [{
                    type: i0.Output
                }], onItemClick: [{
                    type: i0.Output
                }], onItemContextMenu: [{
                    type: i0.Output
                }], onItemDeleted: [{
                    type: i0.Output
                }], onItemDeleting: [{
                    type: i0.Output
                }], onItemHold: [{
                    type: i0.Output
                }], onItemRendered: [{
                    type: i0.Output
                }], onItemReordered: [{
                    type: i0.Output
                }], onItemSwipe: [{
                    type: i0.Output
                }], onOptionChanged: [{
                    type: i0.Output
                }], onPageLoading: [{
                    type: i0.Output
                }], onPullRefresh: [{
                    type: i0.Output
                }], onScroll: [{
                    type: i0.Output
                }], onSelectAllValueChanged: [{
                    type: i0.Output
                }], onSelectionChanged: [{
                    type: i0.Output
                }], accessKeyChange: [{
                    type: i0.Output
                }], activeStateEnabledChange: [{
                    type: i0.Output
                }], allowItemDeletingChange: [{
                    type: i0.Output
                }], bounceEnabledChange: [{
                    type: i0.Output
                }], collapsibleGroupsChange: [{
                    type: i0.Output
                }], dataSourceChange: [{
                    type: i0.Output
                }], disabledChange: [{
                    type: i0.Output
                }], displayExprChange: [{
                    type: i0.Output
                }], elementAttrChange: [{
                    type: i0.Output
                }], focusStateEnabledChange: [{
                    type: i0.Output
                }], groupedChange: [{
                    type: i0.Output
                }], groupTemplateChange: [{
                    type: i0.Output
                }], heightChange: [{
                    type: i0.Output
                }], hintChange: [{
                    type: i0.Output
                }], hoverStateEnabledChange: [{
                    type: i0.Output
                }], indicateLoadingChange: [{
                    type: i0.Output
                }], itemDeleteModeChange: [{
                    type: i0.Output
                }], itemDraggingChange: [{
                    type: i0.Output
                }], itemHoldTimeoutChange: [{
                    type: i0.Output
                }], itemsChange: [{
                    type: i0.Output
                }], itemTemplateChange: [{
                    type: i0.Output
                }], keyExprChange: [{
                    type: i0.Output
                }], menuItemsChange: [{
                    type: i0.Output
                }], menuModeChange: [{
                    type: i0.Output
                }], nextButtonTextChange: [{
                    type: i0.Output
                }], noDataTextChange: [{
                    type: i0.Output
                }], pageLoadingTextChange: [{
                    type: i0.Output
                }], pageLoadModeChange: [{
                    type: i0.Output
                }], pulledDownTextChange: [{
                    type: i0.Output
                }], pullingDownTextChange: [{
                    type: i0.Output
                }], pullRefreshEnabledChange: [{
                    type: i0.Output
                }], refreshingTextChange: [{
                    type: i0.Output
                }], repaintChangesOnlyChange: [{
                    type: i0.Output
                }], rtlEnabledChange: [{
                    type: i0.Output
                }], scrollByContentChange: [{
                    type: i0.Output
                }], scrollByThumbChange: [{
                    type: i0.Output
                }], scrollingEnabledChange: [{
                    type: i0.Output
                }], searchEditorOptionsChange: [{
                    type: i0.Output
                }], searchEnabledChange: [{
                    type: i0.Output
                }], searchExprChange: [{
                    type: i0.Output
                }], searchModeChange: [{
                    type: i0.Output
                }], searchTimeoutChange: [{
                    type: i0.Output
                }], searchValueChange: [{
                    type: i0.Output
                }], selectAllModeChange: [{
                    type: i0.Output
                }], selectAllTextChange: [{
                    type: i0.Output
                }], selectedItemKeysChange: [{
                    type: i0.Output
                }], selectedItemsChange: [{
                    type: i0.Output
                }], selectionModeChange: [{
                    type: i0.Output
                }], showScrollbarChange: [{
                    type: i0.Output
                }], showSelectionControlsChange: [{
                    type: i0.Output
                }], tabIndexChange: [{
                    type: i0.Output
                }], useNativeScrollingChange: [{
                    type: i0.Output
                }], visibleChange: [{
                    type: i0.Output
                }], widthChange: [{
                    type: i0.Output
                }], itemsChildren: [{
                    type: i0.ContentChildren,
                    args: [nested.DxiItemComponent]
                }], menuItemsChildren: [{
                    type: i0.ContentChildren,
                    args: [nested.DxiMenuItemComponent]
                }] });
    })();
    var DxListModule = /** @class */ (function () {
        function DxListModule() {
        }
        return DxListModule;
    }());
    /** @nocollapse */ DxListModule.ɵfac = function DxListModule_Factory(t) { return new (t || DxListModule)(); };
    /** @nocollapse */ DxListModule.ɵmod = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineNgModule({ type: DxListModule });
    /** @nocollapse */ DxListModule.ɵinj = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineInjector({ imports: [[
                nested.DxoItemDraggingModule,
                nested.DxoCursorOffsetModule,
                nested.DxiItemModule,
                nested.DxiMenuItemModule,
                nested.DxoSearchEditorOptionsModule,
                nested.DxiButtonModule,
                nested.DxoOptionsModule,
                i1.DxIntegrationModule,
                i1.DxTemplateModule,
                i2.BrowserTransferStateModule
            ], nested.DxoItemDraggingModule,
            nested.DxoCursorOffsetModule,
            nested.DxiItemModule,
            nested.DxiMenuItemModule,
            nested.DxoSearchEditorOptionsModule,
            nested.DxiButtonModule,
            nested.DxoOptionsModule,
            i1.DxTemplateModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DxListModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            nested.DxoItemDraggingModule,
                            nested.DxoCursorOffsetModule,
                            nested.DxiItemModule,
                            nested.DxiMenuItemModule,
                            nested.DxoSearchEditorOptionsModule,
                            nested.DxiButtonModule,
                            nested.DxoOptionsModule,
                            i1.DxIntegrationModule,
                            i1.DxTemplateModule,
                            i2.BrowserTransferStateModule
                        ],
                        declarations: [
                            DxListComponent
                        ],
                        exports: [
                            DxListComponent,
                            nested.DxoItemDraggingModule,
                            nested.DxoCursorOffsetModule,
                            nested.DxiItemModule,
                            nested.DxiMenuItemModule,
                            nested.DxoSearchEditorOptionsModule,
                            nested.DxiButtonModule,
                            nested.DxoOptionsModule,
                            i1.DxTemplateModule
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(DxListModule, { declarations: [DxListComponent], imports: [nested.DxoItemDraggingModule,
                nested.DxoCursorOffsetModule,
                nested.DxiItemModule,
                nested.DxiMenuItemModule,
                nested.DxoSearchEditorOptionsModule,
                nested.DxiButtonModule,
                nested.DxoOptionsModule,
                i1.DxIntegrationModule,
                i1.DxTemplateModule,
                i2.BrowserTransferStateModule], exports: [DxListComponent, nested.DxoItemDraggingModule,
                nested.DxoCursorOffsetModule,
                nested.DxiItemModule,
                nested.DxiMenuItemModule,
                nested.DxoSearchEditorOptionsModule,
                nested.DxiButtonModule,
                nested.DxoOptionsModule,
                i1.DxTemplateModule] });
    })();

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DxListComponent = DxListComponent;
    exports.DxListModule = DxListModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=devextreme-angular-ui-list.umd.js.map
