(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/platform-browser'), require('@angular/core'), require('devextreme/viz/pie_chart'), require('devextreme-angular/core'), require('devextreme-angular/ui/nested')) :
    typeof define === 'function' && define.amd ? define('devextreme-angular/ui/pie-chart', ['exports', '@angular/platform-browser', '@angular/core', 'devextreme/viz/pie_chart', 'devextreme-angular/core', 'devextreme-angular/ui/nested'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["devextreme-angular"] = global["devextreme-angular"] || {}, global["devextreme-angular"].ui = global["devextreme-angular"].ui || {}, global["devextreme-angular"].ui["pie-chart"] = {}), global.ng.platformBrowser, global.ng.core, global.DxPieChart, global["devextreme-angular"].core, global["devextreme-angular"].ui.nested));
})(this, (function (exports, i2, i0, DxPieChart, i1, nested) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var DxPieChart__default = /*#__PURE__*/_interopDefaultLegacy(DxPieChart);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    function __createBinding(o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    }
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                exports[p] = m[p];
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    result[k] = mod[k];
        result.default = mod;
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * The PieChart is a UI component that visualizes data as a circle divided into sectors that each represents a portion of the whole.

     */
    var DxPieChartComponent = /** @class */ (function (_super) {
        __extends(DxPieChartComponent, _super);
        function DxPieChartComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
            var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;
            _this._watcherHelper = _watcherHelper;
            _this._idh = _idh;
            _this._createEventEmitters([
                { subscribe: 'disposing', emit: 'onDisposing' },
                { subscribe: 'done', emit: 'onDone' },
                { subscribe: 'drawn', emit: 'onDrawn' },
                { subscribe: 'exported', emit: 'onExported' },
                { subscribe: 'exporting', emit: 'onExporting' },
                { subscribe: 'fileSaving', emit: 'onFileSaving' },
                { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },
                { subscribe: 'initialized', emit: 'onInitialized' },
                { subscribe: 'legendClick', emit: 'onLegendClick' },
                { subscribe: 'optionChanged', emit: 'onOptionChanged' },
                { subscribe: 'pointClick', emit: 'onPointClick' },
                { subscribe: 'pointHoverChanged', emit: 'onPointHoverChanged' },
                { subscribe: 'pointSelectionChanged', emit: 'onPointSelectionChanged' },
                { subscribe: 'tooltipHidden', emit: 'onTooltipHidden' },
                { subscribe: 'tooltipShown', emit: 'onTooltipShown' },
                { emit: 'adaptiveLayoutChange' },
                { emit: 'animationChange' },
                { emit: 'annotationsChange' },
                { emit: 'centerTemplateChange' },
                { emit: 'commonAnnotationSettingsChange' },
                { emit: 'commonSeriesSettingsChange' },
                { emit: 'customizeAnnotationChange' },
                { emit: 'customizeLabelChange' },
                { emit: 'customizePointChange' },
                { emit: 'dataSourceChange' },
                { emit: 'diameterChange' },
                { emit: 'disabledChange' },
                { emit: 'elementAttrChange' },
                { emit: 'exportChange' },
                { emit: 'innerRadiusChange' },
                { emit: 'legendChange' },
                { emit: 'loadingIndicatorChange' },
                { emit: 'marginChange' },
                { emit: 'minDiameterChange' },
                { emit: 'paletteChange' },
                { emit: 'paletteExtensionModeChange' },
                { emit: 'pathModifiedChange' },
                { emit: 'pointSelectionModeChange' },
                { emit: 'redrawOnResizeChange' },
                { emit: 'resolveLabelOverlappingChange' },
                { emit: 'rtlEnabledChange' },
                { emit: 'segmentsDirectionChange' },
                { emit: 'seriesChange' },
                { emit: 'seriesTemplateChange' },
                { emit: 'sizeChange' },
                { emit: 'sizeGroupChange' },
                { emit: 'startAngleChange' },
                { emit: 'themeChange' },
                { emit: 'titleChange' },
                { emit: 'tooltipChange' },
                { emit: 'typeChange' }
            ]);
            _this._idh.setHost(_this);
            optionHost.setHost(_this);
            return _this;
        }
        Object.defineProperty(DxPieChartComponent.prototype, "adaptiveLayout", {
            /**
             * Specifies adaptive layout properties.
            
             */
            get: function () {
                return this._getOption('adaptiveLayout');
            },
            set: function (value) {
                this._setOption('adaptiveLayout', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "animation", {
            /**
             * Specifies animation properties.
            
             */
            get: function () {
                return this._getOption('animation');
            },
            set: function (value) {
                this._setOption('animation', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "annotations", {
            /**
             * Specifies the annotation collection.
            
             */
            get: function () {
                return this._getOption('annotations');
            },
            set: function (value) {
                this._setOption('annotations', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "centerTemplate", {
            /**
             * Specifies a custom template for content in the pie&apos;s center.
            
             */
            get: function () {
                return this._getOption('centerTemplate');
            },
            set: function (value) {
                this._setOption('centerTemplate', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "commonAnnotationSettings", {
            /**
             * Specifies settings common for all annotations in the PieChart.
            
             */
            get: function () {
                return this._getOption('commonAnnotationSettings');
            },
            set: function (value) {
                this._setOption('commonAnnotationSettings', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "commonSeriesSettings", {
            /**
             * An object defining the configuration properties that are common for all series of the PieChart UI component.
            
             */
            get: function () {
                return this._getOption('commonSeriesSettings');
            },
            set: function (value) {
                this._setOption('commonSeriesSettings', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "customizeAnnotation", {
            /**
             * Customizes an individual annotation.
            
             */
            get: function () {
                return this._getOption('customizeAnnotation');
            },
            set: function (value) {
                this._setOption('customizeAnnotation', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "customizeLabel", {
            /**
             * Customizes the appearance of an individual point label.
            
             */
            get: function () {
                return this._getOption('customizeLabel');
            },
            set: function (value) {
                this._setOption('customizeLabel', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "customizePoint", {
            /**
             * Customizes the appearance of an individual series point.
            
             */
            get: function () {
                return this._getOption('customizePoint');
            },
            set: function (value) {
                this._setOption('customizePoint', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "dataSource", {
            /**
             * Binds the UI component to data.
            
             */
            get: function () {
                return this._getOption('dataSource');
            },
            set: function (value) {
                this._setOption('dataSource', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "diameter", {
            /**
             * Specifies the diameter of the pie.
            
             */
            get: function () {
                return this._getOption('diameter');
            },
            set: function (value) {
                this._setOption('diameter', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "disabled", {
            /**
             * Specifies whether the UI component responds to user interaction.
            
             */
            get: function () {
                return this._getOption('disabled');
            },
            set: function (value) {
                this._setOption('disabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "elementAttr", {
            /**
             * Specifies the global attributes to be attached to the UI component&apos;s container element.
            
             */
            get: function () {
                return this._getOption('elementAttr');
            },
            set: function (value) {
                this._setOption('elementAttr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "export", {
            /**
             * Configures the exporting and printing features.
            
             */
            get: function () {
                return this._getOption('export');
            },
            set: function (value) {
                this._setOption('export', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "innerRadius", {
            /**
             * Specifies the fraction of the inner radius relative to the total radius in the series of the &apos;doughnut&apos; type. The value should be between 0 and 1.
            
             */
            get: function () {
                return this._getOption('innerRadius');
            },
            set: function (value) {
                this._setOption('innerRadius', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "legend", {
            /**
             * Specifies PieChart legend properties.
            
             */
            get: function () {
                return this._getOption('legend');
            },
            set: function (value) {
                this._setOption('legend', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "loadingIndicator", {
            /**
             * Configures the loading indicator.
            
             */
            get: function () {
                return this._getOption('loadingIndicator');
            },
            set: function (value) {
                this._setOption('loadingIndicator', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "margin", {
            /**
             * Generates space around the UI component.
            
             */
            get: function () {
                return this._getOption('margin');
            },
            set: function (value) {
                this._setOption('margin', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "minDiameter", {
            /**
             * Specifies the minimum diameter of the pie.
            
             */
            get: function () {
                return this._getOption('minDiameter');
            },
            set: function (value) {
                this._setOption('minDiameter', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "palette", {
            /**
             * Sets the palette to be used to colorize series and their elements.
            
             */
            get: function () {
                return this._getOption('palette');
            },
            set: function (value) {
                this._setOption('palette', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "paletteExtensionMode", {
            /**
             * Specifies what to do with colors in the palette when their number is less than the number of series (in the Chart UI component) or points in a series (in the PieChart UI component).
            
             */
            get: function () {
                return this._getOption('paletteExtensionMode');
            },
            set: function (value) {
                this._setOption('paletteExtensionMode', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "pathModified", {
            /**
             * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.
            
             */
            get: function () {
                return this._getOption('pathModified');
            },
            set: function (value) {
                this._setOption('pathModified', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "pointSelectionMode", {
            /**
             * Specifies whether a single point or multiple points can be selected in the chart.
            
             */
            get: function () {
                return this._getOption('pointSelectionMode');
            },
            set: function (value) {
                this._setOption('pointSelectionMode', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "redrawOnResize", {
            /**
             * Specifies whether to redraw the UI component when the size of the container changes or a mobile device rotates.
            
             */
            get: function () {
                return this._getOption('redrawOnResize');
            },
            set: function (value) {
                this._setOption('redrawOnResize', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "resolveLabelOverlapping", {
            /**
             * Specifies how a chart must behave when point labels overlap.
            
             */
            get: function () {
                return this._getOption('resolveLabelOverlapping');
            },
            set: function (value) {
                this._setOption('resolveLabelOverlapping', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "rtlEnabled", {
            /**
             * Switches the UI component to a right-to-left representation.
            
             */
            get: function () {
                return this._getOption('rtlEnabled');
            },
            set: function (value) {
                this._setOption('rtlEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "segmentsDirection", {
            /**
             * Specifies the direction that the pie chart segments will occupy.
            
             */
            get: function () {
                return this._getOption('segmentsDirection');
            },
            set: function (value) {
                this._setOption('segmentsDirection', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "series", {
            /**
             * Specifies properties for the series of the PieChart UI component.
            
             */
            get: function () {
                return this._getOption('series');
            },
            set: function (value) {
                this._setOption('series', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "seriesTemplate", {
            /**
             * Defines properties for the series template.
            
             */
            get: function () {
                return this._getOption('seriesTemplate');
            },
            set: function (value) {
                this._setOption('seriesTemplate', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "size", {
            /**
             * Specifies the UI component&apos;s size in pixels.
            
             */
            get: function () {
                return this._getOption('size');
            },
            set: function (value) {
                this._setOption('size', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "sizeGroup", {
            /**
             * Allows you to display several adjoining pies in the same size.
            
             */
            get: function () {
                return this._getOption('sizeGroup');
            },
            set: function (value) {
                this._setOption('sizeGroup', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "startAngle", {
            /**
             * Specifies the angle in arc degrees from which the first segment of a pie chart should start.
            
             */
            get: function () {
                return this._getOption('startAngle');
            },
            set: function (value) {
                this._setOption('startAngle', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "theme", {
            /**
             * Sets the name of the theme the UI component uses.
            
             */
            get: function () {
                return this._getOption('theme');
            },
            set: function (value) {
                this._setOption('theme', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "title", {
            /**
             * Configures the UI component&apos;s title.
            
             */
            get: function () {
                return this._getOption('title');
            },
            set: function (value) {
                this._setOption('title', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "tooltip", {
            /**
             * Configures tooltips.
            
             */
            get: function () {
                return this._getOption('tooltip');
            },
            set: function (value) {
                this._setOption('tooltip', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "type", {
            /**
             * Specifies the type of the pie chart series.
            
             */
            get: function () {
                return this._getOption('type');
            },
            set: function (value) {
                this._setOption('type', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "annotationsChildren", {
            get: function () {
                return this._getOption('annotations');
            },
            set: function (value) {
                this.setChildren('annotations', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxPieChartComponent.prototype, "seriesChildren", {
            get: function () {
                return this._getOption('series');
            },
            set: function (value) {
                this.setChildren('series', value);
            },
            enumerable: false,
            configurable: true
        });
        DxPieChartComponent.prototype._createInstance = function (element, options) {
            return new DxPieChart__default["default"](element, options);
        };
        DxPieChartComponent.prototype.ngOnDestroy = function () {
            this._destroyWidget();
        };
        DxPieChartComponent.prototype.ngOnChanges = function (changes) {
            _super.prototype.ngOnChanges.call(this, changes);
            this.setupChanges('annotations', changes);
            this.setupChanges('dataSource', changes);
            this.setupChanges('palette', changes);
            this.setupChanges('series', changes);
        };
        DxPieChartComponent.prototype.setupChanges = function (prop, changes) {
            if (!(prop in this._optionsToUpdate)) {
                this._idh.setup(prop, changes);
            }
        };
        DxPieChartComponent.prototype.ngDoCheck = function () {
            this._idh.doCheck('annotations');
            this._idh.doCheck('dataSource');
            this._idh.doCheck('palette');
            this._idh.doCheck('series');
            this._watcherHelper.checkWatchers();
            _super.prototype.ngDoCheck.call(this);
            _super.prototype.clearChangedOptions.call(this);
        };
        DxPieChartComponent.prototype._setOption = function (name, value) {
            var isSetup = this._idh.setupSingle(name, value);
            var isChanged = this._idh.getChanges(name, value) !== null;
            if (isSetup || isChanged) {
                _super.prototype._setOption.call(this, name, value);
            }
        };
        return DxPieChartComponent;
    }(i1.DxComponent));
    /** @nocollapse */ DxPieChartComponent.ɵfac = function DxPieChartComponent_Factory(t) { return new (t || DxPieChartComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef), i0__namespace.ɵɵdirectiveInject(i0__namespace.NgZone), i0__namespace.ɵɵdirectiveInject(i1__namespace.DxTemplateHost), i0__namespace.ɵɵdirectiveInject(i1__namespace.WatcherHelper), i0__namespace.ɵɵdirectiveInject(i1__namespace.IterableDifferHelper), i0__namespace.ɵɵdirectiveInject(i1__namespace.NestedOptionHost), i0__namespace.ɵɵdirectiveInject(i2__namespace.TransferState), i0__namespace.ɵɵdirectiveInject(i0.PLATFORM_ID)); };
    /** @nocollapse */ DxPieChartComponent.ɵcmp = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineComponent({ type: DxPieChartComponent, selectors: [["dx-pie-chart"]], contentQueries: function DxPieChartComponent_ContentQueries(rf, ctx, dirIndex) {
            if (rf & 1) {
                i0__namespace.ɵɵcontentQuery(dirIndex, nested.DxiAnnotationComponent, 4);
                i0__namespace.ɵɵcontentQuery(dirIndex, nested.DxiSeriesComponent, 4);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.annotationsChildren = _t);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.seriesChildren = _t);
            }
        }, inputs: { adaptiveLayout: "adaptiveLayout", animation: "animation", annotations: "annotations", centerTemplate: "centerTemplate", commonAnnotationSettings: "commonAnnotationSettings", commonSeriesSettings: "commonSeriesSettings", customizeAnnotation: "customizeAnnotation", customizeLabel: "customizeLabel", customizePoint: "customizePoint", dataSource: "dataSource", diameter: "diameter", disabled: "disabled", elementAttr: "elementAttr", export: "export", innerRadius: "innerRadius", legend: "legend", loadingIndicator: "loadingIndicator", margin: "margin", minDiameter: "minDiameter", palette: "palette", paletteExtensionMode: "paletteExtensionMode", pathModified: "pathModified", pointSelectionMode: "pointSelectionMode", redrawOnResize: "redrawOnResize", resolveLabelOverlapping: "resolveLabelOverlapping", rtlEnabled: "rtlEnabled", segmentsDirection: "segmentsDirection", series: "series", seriesTemplate: "seriesTemplate", size: "size", sizeGroup: "sizeGroup", startAngle: "startAngle", theme: "theme", title: "title", tooltip: "tooltip", type: "type" }, outputs: { onDisposing: "onDisposing", onDone: "onDone", onDrawn: "onDrawn", onExported: "onExported", onExporting: "onExporting", onFileSaving: "onFileSaving", onIncidentOccurred: "onIncidentOccurred", onInitialized: "onInitialized", onLegendClick: "onLegendClick", onOptionChanged: "onOptionChanged", onPointClick: "onPointClick", onPointHoverChanged: "onPointHoverChanged", onPointSelectionChanged: "onPointSelectionChanged", onTooltipHidden: "onTooltipHidden", onTooltipShown: "onTooltipShown", adaptiveLayoutChange: "adaptiveLayoutChange", animationChange: "animationChange", annotationsChange: "annotationsChange", centerTemplateChange: "centerTemplateChange", commonAnnotationSettingsChange: "commonAnnotationSettingsChange", commonSeriesSettingsChange: "commonSeriesSettingsChange", customizeAnnotationChange: "customizeAnnotationChange", customizeLabelChange: "customizeLabelChange", customizePointChange: "customizePointChange", dataSourceChange: "dataSourceChange", diameterChange: "diameterChange", disabledChange: "disabledChange", elementAttrChange: "elementAttrChange", exportChange: "exportChange", innerRadiusChange: "innerRadiusChange", legendChange: "legendChange", loadingIndicatorChange: "loadingIndicatorChange", marginChange: "marginChange", minDiameterChange: "minDiameterChange", paletteChange: "paletteChange", paletteExtensionModeChange: "paletteExtensionModeChange", pathModifiedChange: "pathModifiedChange", pointSelectionModeChange: "pointSelectionModeChange", redrawOnResizeChange: "redrawOnResizeChange", resolveLabelOverlappingChange: "resolveLabelOverlappingChange", rtlEnabledChange: "rtlEnabledChange", segmentsDirectionChange: "segmentsDirectionChange", seriesChange: "seriesChange", seriesTemplateChange: "seriesTemplateChange", sizeChange: "sizeChange", sizeGroupChange: "sizeGroupChange", startAngleChange: "startAngleChange", themeChange: "themeChange", titleChange: "titleChange", tooltipChange: "tooltipChange", typeChange: "typeChange" }, features: [i0__namespace.ɵɵProvidersFeature([
                i1.DxTemplateHost,
                i1.WatcherHelper,
                i1.NestedOptionHost,
                i1.IterableDifferHelper
            ]), i0__namespace.ɵɵInheritDefinitionFeature, i0__namespace.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function DxPieChartComponent_Template(rf, ctx) { }, styles: ["[_nghost-%COMP%] {  display: block; }"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DxPieChartComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'dx-pie-chart',
                        template: '',
                        styles: [' :host {  display: block; }'],
                        providers: [
                            i1.DxTemplateHost,
                            i1.WatcherHelper,
                            i1.NestedOptionHost,
                            i1.IterableDifferHelper
                        ]
                    }]
            }], function () {
            return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.NgZone }, { type: i1__namespace.DxTemplateHost }, { type: i1__namespace.WatcherHelper }, { type: i1__namespace.IterableDifferHelper }, { type: i1__namespace.NestedOptionHost }, { type: i2__namespace.TransferState }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.PLATFORM_ID]
                        }] }];
        }, { adaptiveLayout: [{
                    type: i0.Input
                }], animation: [{
                    type: i0.Input
                }], annotations: [{
                    type: i0.Input
                }], centerTemplate: [{
                    type: i0.Input
                }], commonAnnotationSettings: [{
                    type: i0.Input
                }], commonSeriesSettings: [{
                    type: i0.Input
                }], customizeAnnotation: [{
                    type: i0.Input
                }], customizeLabel: [{
                    type: i0.Input
                }], customizePoint: [{
                    type: i0.Input
                }], dataSource: [{
                    type: i0.Input
                }], diameter: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], elementAttr: [{
                    type: i0.Input
                }], export: [{
                    type: i0.Input
                }], innerRadius: [{
                    type: i0.Input
                }], legend: [{
                    type: i0.Input
                }], loadingIndicator: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], minDiameter: [{
                    type: i0.Input
                }], palette: [{
                    type: i0.Input
                }], paletteExtensionMode: [{
                    type: i0.Input
                }], pathModified: [{
                    type: i0.Input
                }], pointSelectionMode: [{
                    type: i0.Input
                }], redrawOnResize: [{
                    type: i0.Input
                }], resolveLabelOverlapping: [{
                    type: i0.Input
                }], rtlEnabled: [{
                    type: i0.Input
                }], segmentsDirection: [{
                    type: i0.Input
                }], series: [{
                    type: i0.Input
                }], seriesTemplate: [{
                    type: i0.Input
                }], size: [{
                    type: i0.Input
                }], sizeGroup: [{
                    type: i0.Input
                }], startAngle: [{
                    type: i0.Input
                }], theme: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onDisposing: [{
                    type: i0.Output
                }], onDone: [{
                    type: i0.Output
                }], onDrawn: [{
                    type: i0.Output
                }], onExported: [{
                    type: i0.Output
                }], onExporting: [{
                    type: i0.Output
                }], onFileSaving: [{
                    type: i0.Output
                }], onIncidentOccurred: [{
                    type: i0.Output
                }], onInitialized: [{
                    type: i0.Output
                }], onLegendClick: [{
                    type: i0.Output
                }], onOptionChanged: [{
                    type: i0.Output
                }], onPointClick: [{
                    type: i0.Output
                }], onPointHoverChanged: [{
                    type: i0.Output
                }], onPointSelectionChanged: [{
                    type: i0.Output
                }], onTooltipHidden: [{
                    type: i0.Output
                }], onTooltipShown: [{
                    type: i0.Output
                }], adaptiveLayoutChange: [{
                    type: i0.Output
                }], animationChange: [{
                    type: i0.Output
                }], annotationsChange: [{
                    type: i0.Output
                }], centerTemplateChange: [{
                    type: i0.Output
                }], commonAnnotationSettingsChange: [{
                    type: i0.Output
                }], commonSeriesSettingsChange: [{
                    type: i0.Output
                }], customizeAnnotationChange: [{
                    type: i0.Output
                }], customizeLabelChange: [{
                    type: i0.Output
                }], customizePointChange: [{
                    type: i0.Output
                }], dataSourceChange: [{
                    type: i0.Output
                }], diameterChange: [{
                    type: i0.Output
                }], disabledChange: [{
                    type: i0.Output
                }], elementAttrChange: [{
                    type: i0.Output
                }], exportChange: [{
                    type: i0.Output
                }], innerRadiusChange: [{
                    type: i0.Output
                }], legendChange: [{
                    type: i0.Output
                }], loadingIndicatorChange: [{
                    type: i0.Output
                }], marginChange: [{
                    type: i0.Output
                }], minDiameterChange: [{
                    type: i0.Output
                }], paletteChange: [{
                    type: i0.Output
                }], paletteExtensionModeChange: [{
                    type: i0.Output
                }], pathModifiedChange: [{
                    type: i0.Output
                }], pointSelectionModeChange: [{
                    type: i0.Output
                }], redrawOnResizeChange: [{
                    type: i0.Output
                }], resolveLabelOverlappingChange: [{
                    type: i0.Output
                }], rtlEnabledChange: [{
                    type: i0.Output
                }], segmentsDirectionChange: [{
                    type: i0.Output
                }], seriesChange: [{
                    type: i0.Output
                }], seriesTemplateChange: [{
                    type: i0.Output
                }], sizeChange: [{
                    type: i0.Output
                }], sizeGroupChange: [{
                    type: i0.Output
                }], startAngleChange: [{
                    type: i0.Output
                }], themeChange: [{
                    type: i0.Output
                }], titleChange: [{
                    type: i0.Output
                }], tooltipChange: [{
                    type: i0.Output
                }], typeChange: [{
                    type: i0.Output
                }], annotationsChildren: [{
                    type: i0.ContentChildren,
                    args: [nested.DxiAnnotationComponent]
                }], seriesChildren: [{
                    type: i0.ContentChildren,
                    args: [nested.DxiSeriesComponent]
                }] });
    })();
    var DxPieChartModule = /** @class */ (function () {
        function DxPieChartModule() {
        }
        return DxPieChartModule;
    }());
    /** @nocollapse */ DxPieChartModule.ɵfac = function DxPieChartModule_Factory(t) { return new (t || DxPieChartModule)(); };
    /** @nocollapse */ DxPieChartModule.ɵmod = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineNgModule({ type: DxPieChartModule });
    /** @nocollapse */ DxPieChartModule.ɵinj = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineInjector({ imports: [[
                nested.DxoAdaptiveLayoutModule,
                nested.DxoAnimationModule,
                nested.DxiAnnotationModule,
                nested.DxoBorderModule,
                nested.DxoFontModule,
                nested.DxoImageModule,
                nested.DxoShadowModule,
                nested.DxoCommonAnnotationSettingsModule,
                nested.DxoCommonSeriesSettingsModule,
                nested.DxoHoverStyleModule,
                nested.DxoHatchingModule,
                nested.DxoLabelModule,
                nested.DxoArgumentFormatModule,
                nested.DxoConnectorModule,
                nested.DxoFormatModule,
                nested.DxoSelectionStyleModule,
                nested.DxoSmallValuesGroupingModule,
                nested.DxoExportModule,
                nested.DxoLegendModule,
                nested.DxoMarginModule,
                nested.DxoTitleModule,
                nested.DxoSubtitleModule,
                nested.DxoLoadingIndicatorModule,
                nested.DxiSeriesModule,
                nested.DxoSeriesTemplateModule,
                nested.DxoSizeModule,
                nested.DxoTooltipModule,
                i1.DxIntegrationModule,
                i1.DxTemplateModule,
                i2.BrowserTransferStateModule
            ], nested.DxoAdaptiveLayoutModule,
            nested.DxoAnimationModule,
            nested.DxiAnnotationModule,
            nested.DxoBorderModule,
            nested.DxoFontModule,
            nested.DxoImageModule,
            nested.DxoShadowModule,
            nested.DxoCommonAnnotationSettingsModule,
            nested.DxoCommonSeriesSettingsModule,
            nested.DxoHoverStyleModule,
            nested.DxoHatchingModule,
            nested.DxoLabelModule,
            nested.DxoArgumentFormatModule,
            nested.DxoConnectorModule,
            nested.DxoFormatModule,
            nested.DxoSelectionStyleModule,
            nested.DxoSmallValuesGroupingModule,
            nested.DxoExportModule,
            nested.DxoLegendModule,
            nested.DxoMarginModule,
            nested.DxoTitleModule,
            nested.DxoSubtitleModule,
            nested.DxoLoadingIndicatorModule,
            nested.DxiSeriesModule,
            nested.DxoSeriesTemplateModule,
            nested.DxoSizeModule,
            nested.DxoTooltipModule,
            i1.DxTemplateModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DxPieChartModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            nested.DxoAdaptiveLayoutModule,
                            nested.DxoAnimationModule,
                            nested.DxiAnnotationModule,
                            nested.DxoBorderModule,
                            nested.DxoFontModule,
                            nested.DxoImageModule,
                            nested.DxoShadowModule,
                            nested.DxoCommonAnnotationSettingsModule,
                            nested.DxoCommonSeriesSettingsModule,
                            nested.DxoHoverStyleModule,
                            nested.DxoHatchingModule,
                            nested.DxoLabelModule,
                            nested.DxoArgumentFormatModule,
                            nested.DxoConnectorModule,
                            nested.DxoFormatModule,
                            nested.DxoSelectionStyleModule,
                            nested.DxoSmallValuesGroupingModule,
                            nested.DxoExportModule,
                            nested.DxoLegendModule,
                            nested.DxoMarginModule,
                            nested.DxoTitleModule,
                            nested.DxoSubtitleModule,
                            nested.DxoLoadingIndicatorModule,
                            nested.DxiSeriesModule,
                            nested.DxoSeriesTemplateModule,
                            nested.DxoSizeModule,
                            nested.DxoTooltipModule,
                            i1.DxIntegrationModule,
                            i1.DxTemplateModule,
                            i2.BrowserTransferStateModule
                        ],
                        declarations: [
                            DxPieChartComponent
                        ],
                        exports: [
                            DxPieChartComponent,
                            nested.DxoAdaptiveLayoutModule,
                            nested.DxoAnimationModule,
                            nested.DxiAnnotationModule,
                            nested.DxoBorderModule,
                            nested.DxoFontModule,
                            nested.DxoImageModule,
                            nested.DxoShadowModule,
                            nested.DxoCommonAnnotationSettingsModule,
                            nested.DxoCommonSeriesSettingsModule,
                            nested.DxoHoverStyleModule,
                            nested.DxoHatchingModule,
                            nested.DxoLabelModule,
                            nested.DxoArgumentFormatModule,
                            nested.DxoConnectorModule,
                            nested.DxoFormatModule,
                            nested.DxoSelectionStyleModule,
                            nested.DxoSmallValuesGroupingModule,
                            nested.DxoExportModule,
                            nested.DxoLegendModule,
                            nested.DxoMarginModule,
                            nested.DxoTitleModule,
                            nested.DxoSubtitleModule,
                            nested.DxoLoadingIndicatorModule,
                            nested.DxiSeriesModule,
                            nested.DxoSeriesTemplateModule,
                            nested.DxoSizeModule,
                            nested.DxoTooltipModule,
                            i1.DxTemplateModule
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(DxPieChartModule, { declarations: [DxPieChartComponent], imports: [nested.DxoAdaptiveLayoutModule,
                nested.DxoAnimationModule,
                nested.DxiAnnotationModule,
                nested.DxoBorderModule,
                nested.DxoFontModule,
                nested.DxoImageModule,
                nested.DxoShadowModule,
                nested.DxoCommonAnnotationSettingsModule,
                nested.DxoCommonSeriesSettingsModule,
                nested.DxoHoverStyleModule,
                nested.DxoHatchingModule,
                nested.DxoLabelModule,
                nested.DxoArgumentFormatModule,
                nested.DxoConnectorModule,
                nested.DxoFormatModule,
                nested.DxoSelectionStyleModule,
                nested.DxoSmallValuesGroupingModule,
                nested.DxoExportModule,
                nested.DxoLegendModule,
                nested.DxoMarginModule,
                nested.DxoTitleModule,
                nested.DxoSubtitleModule,
                nested.DxoLoadingIndicatorModule,
                nested.DxiSeriesModule,
                nested.DxoSeriesTemplateModule,
                nested.DxoSizeModule,
                nested.DxoTooltipModule,
                i1.DxIntegrationModule,
                i1.DxTemplateModule,
                i2.BrowserTransferStateModule], exports: [DxPieChartComponent, nested.DxoAdaptiveLayoutModule,
                nested.DxoAnimationModule,
                nested.DxiAnnotationModule,
                nested.DxoBorderModule,
                nested.DxoFontModule,
                nested.DxoImageModule,
                nested.DxoShadowModule,
                nested.DxoCommonAnnotationSettingsModule,
                nested.DxoCommonSeriesSettingsModule,
                nested.DxoHoverStyleModule,
                nested.DxoHatchingModule,
                nested.DxoLabelModule,
                nested.DxoArgumentFormatModule,
                nested.DxoConnectorModule,
                nested.DxoFormatModule,
                nested.DxoSelectionStyleModule,
                nested.DxoSmallValuesGroupingModule,
                nested.DxoExportModule,
                nested.DxoLegendModule,
                nested.DxoMarginModule,
                nested.DxoTitleModule,
                nested.DxoSubtitleModule,
                nested.DxoLoadingIndicatorModule,
                nested.DxiSeriesModule,
                nested.DxoSeriesTemplateModule,
                nested.DxoSizeModule,
                nested.DxoTooltipModule,
                i1.DxTemplateModule] });
    })();

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DxPieChartComponent = DxPieChartComponent;
    exports.DxPieChartModule = DxPieChartModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=devextreme-angular-ui-pie-chart.umd.js.map
