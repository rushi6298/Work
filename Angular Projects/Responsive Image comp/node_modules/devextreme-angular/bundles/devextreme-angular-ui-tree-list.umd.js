(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/platform-browser'), require('@angular/core'), require('devextreme/ui/tree_list'), require('devextreme-angular/core'), require('devextreme-angular/ui/nested')) :
    typeof define === 'function' && define.amd ? define('devextreme-angular/ui/tree-list', ['exports', '@angular/platform-browser', '@angular/core', 'devextreme/ui/tree_list', 'devextreme-angular/core', 'devextreme-angular/ui/nested'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["devextreme-angular"] = global["devextreme-angular"] || {}, global["devextreme-angular"].ui = global["devextreme-angular"].ui || {}, global["devextreme-angular"].ui["tree-list"] = {}), global.ng.platformBrowser, global.ng.core, global.DxTreeList, global["devextreme-angular"].core, global["devextreme-angular"].ui.nested));
})(this, (function (exports, i2, i0, DxTreeList, i1, nested) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var DxTreeList__default = /*#__PURE__*/_interopDefaultLegacy(DxTreeList);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    function __createBinding(o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    }
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                exports[p] = m[p];
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    result[k] = mod[k];
        result.default = mod;
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * The TreeList is a UI component that represents data from a local or remote source in the form of a multi-column tree view. This UI component offers such features as sorting, filtering, editing, selection, etc.

     */
    var DxTreeListComponent = /** @class */ (function (_super) {
        __extends(DxTreeListComponent, _super);
        function DxTreeListComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
            var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;
            _this._watcherHelper = _watcherHelper;
            _this._idh = _idh;
            _this._createEventEmitters([
                { subscribe: 'adaptiveDetailRowPreparing', emit: 'onAdaptiveDetailRowPreparing' },
                { subscribe: 'cellClick', emit: 'onCellClick' },
                { subscribe: 'cellDblClick', emit: 'onCellDblClick' },
                { subscribe: 'cellHoverChanged', emit: 'onCellHoverChanged' },
                { subscribe: 'cellPrepared', emit: 'onCellPrepared' },
                { subscribe: 'contentReady', emit: 'onContentReady' },
                { subscribe: 'contextMenuPreparing', emit: 'onContextMenuPreparing' },
                { subscribe: 'dataErrorOccurred', emit: 'onDataErrorOccurred' },
                { subscribe: 'disposing', emit: 'onDisposing' },
                { subscribe: 'editCanceled', emit: 'onEditCanceled' },
                { subscribe: 'editCanceling', emit: 'onEditCanceling' },
                { subscribe: 'editingStart', emit: 'onEditingStart' },
                { subscribe: 'editorPrepared', emit: 'onEditorPrepared' },
                { subscribe: 'editorPreparing', emit: 'onEditorPreparing' },
                { subscribe: 'focusedCellChanged', emit: 'onFocusedCellChanged' },
                { subscribe: 'focusedCellChanging', emit: 'onFocusedCellChanging' },
                { subscribe: 'focusedRowChanged', emit: 'onFocusedRowChanged' },
                { subscribe: 'focusedRowChanging', emit: 'onFocusedRowChanging' },
                { subscribe: 'initialized', emit: 'onInitialized' },
                { subscribe: 'initNewRow', emit: 'onInitNewRow' },
                { subscribe: 'keyDown', emit: 'onKeyDown' },
                { subscribe: 'nodesInitialized', emit: 'onNodesInitialized' },
                { subscribe: 'optionChanged', emit: 'onOptionChanged' },
                { subscribe: 'rowClick', emit: 'onRowClick' },
                { subscribe: 'rowCollapsed', emit: 'onRowCollapsed' },
                { subscribe: 'rowCollapsing', emit: 'onRowCollapsing' },
                { subscribe: 'rowDblClick', emit: 'onRowDblClick' },
                { subscribe: 'rowExpanded', emit: 'onRowExpanded' },
                { subscribe: 'rowExpanding', emit: 'onRowExpanding' },
                { subscribe: 'rowInserted', emit: 'onRowInserted' },
                { subscribe: 'rowInserting', emit: 'onRowInserting' },
                { subscribe: 'rowPrepared', emit: 'onRowPrepared' },
                { subscribe: 'rowRemoved', emit: 'onRowRemoved' },
                { subscribe: 'rowRemoving', emit: 'onRowRemoving' },
                { subscribe: 'rowUpdated', emit: 'onRowUpdated' },
                { subscribe: 'rowUpdating', emit: 'onRowUpdating' },
                { subscribe: 'rowValidating', emit: 'onRowValidating' },
                { subscribe: 'saved', emit: 'onSaved' },
                { subscribe: 'saving', emit: 'onSaving' },
                { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },
                { subscribe: 'toolbarPreparing', emit: 'onToolbarPreparing' },
                { emit: 'accessKeyChange' },
                { emit: 'activeStateEnabledChange' },
                { emit: 'allowColumnReorderingChange' },
                { emit: 'allowColumnResizingChange' },
                { emit: 'autoExpandAllChange' },
                { emit: 'autoNavigateToFocusedRowChange' },
                { emit: 'cacheEnabledChange' },
                { emit: 'cellHintEnabledChange' },
                { emit: 'columnAutoWidthChange' },
                { emit: 'columnChooserChange' },
                { emit: 'columnFixingChange' },
                { emit: 'columnHidingEnabledChange' },
                { emit: 'columnMinWidthChange' },
                { emit: 'columnResizingModeChange' },
                { emit: 'columnsChange' },
                { emit: 'columnWidthChange' },
                { emit: 'customizeColumnsChange' },
                { emit: 'dataSourceChange' },
                { emit: 'dataStructureChange' },
                { emit: 'dateSerializationFormatChange' },
                { emit: 'disabledChange' },
                { emit: 'editingChange' },
                { emit: 'elementAttrChange' },
                { emit: 'errorRowEnabledChange' },
                { emit: 'expandedRowKeysChange' },
                { emit: 'expandNodesOnFilteringChange' },
                { emit: 'filterBuilderChange' },
                { emit: 'filterBuilderPopupChange' },
                { emit: 'filterModeChange' },
                { emit: 'filterPanelChange' },
                { emit: 'filterRowChange' },
                { emit: 'filterSyncEnabledChange' },
                { emit: 'filterValueChange' },
                { emit: 'focusedColumnIndexChange' },
                { emit: 'focusedRowEnabledChange' },
                { emit: 'focusedRowIndexChange' },
                { emit: 'focusedRowKeyChange' },
                { emit: 'hasItemsExprChange' },
                { emit: 'headerFilterChange' },
                { emit: 'heightChange' },
                { emit: 'highlightChangesChange' },
                { emit: 'hintChange' },
                { emit: 'hoverStateEnabledChange' },
                { emit: 'itemsExprChange' },
                { emit: 'keyboardNavigationChange' },
                { emit: 'keyExprChange' },
                { emit: 'loadPanelChange' },
                { emit: 'noDataTextChange' },
                { emit: 'pagerChange' },
                { emit: 'pagingChange' },
                { emit: 'parentIdExprChange' },
                { emit: 'remoteOperationsChange' },
                { emit: 'renderAsyncChange' },
                { emit: 'repaintChangesOnlyChange' },
                { emit: 'rootValueChange' },
                { emit: 'rowAlternationEnabledChange' },
                { emit: 'rowDraggingChange' },
                { emit: 'rtlEnabledChange' },
                { emit: 'scrollingChange' },
                { emit: 'searchPanelChange' },
                { emit: 'selectedRowKeysChange' },
                { emit: 'selectionChange' },
                { emit: 'showBordersChange' },
                { emit: 'showColumnHeadersChange' },
                { emit: 'showColumnLinesChange' },
                { emit: 'showRowLinesChange' },
                { emit: 'sortingChange' },
                { emit: 'stateStoringChange' },
                { emit: 'syncLookupFilterValuesChange' },
                { emit: 'tabIndexChange' },
                { emit: 'toolbarChange' },
                { emit: 'twoWayBindingEnabledChange' },
                { emit: 'visibleChange' },
                { emit: 'widthChange' },
                { emit: 'wordWrapEnabledChange' }
            ]);
            _this._idh.setHost(_this);
            optionHost.setHost(_this);
            return _this;
        }
        Object.defineProperty(DxTreeListComponent.prototype, "accessKey", {
            /**
             * Specifies the shortcut key that sets focus on the UI component.
            
             */
            get: function () {
                return this._getOption('accessKey');
            },
            set: function (value) {
                this._setOption('accessKey', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "activeStateEnabled", {
            /**
             * Specifies whether the UI component changes its visual state as a result of user interaction.
            
             */
            get: function () {
                return this._getOption('activeStateEnabled');
            },
            set: function (value) {
                this._setOption('activeStateEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "allowColumnReordering", {
            /**
             * Specifies whether a user can reorder columns.
            
             */
            get: function () {
                return this._getOption('allowColumnReordering');
            },
            set: function (value) {
                this._setOption('allowColumnReordering', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "allowColumnResizing", {
            /**
             * Specifies whether a user can resize columns.
            
             */
            get: function () {
                return this._getOption('allowColumnResizing');
            },
            set: function (value) {
                this._setOption('allowColumnResizing', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "autoExpandAll", {
            /**
             * Specifies whether all rows are expanded initially.
            
             */
            get: function () {
                return this._getOption('autoExpandAll');
            },
            set: function (value) {
                this._setOption('autoExpandAll', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "autoNavigateToFocusedRow", {
            /**
             * Automatically scrolls the component to the focused row when the focusedRowKey is changed.
            
             */
            get: function () {
                return this._getOption('autoNavigateToFocusedRow');
            },
            set: function (value) {
                this._setOption('autoNavigateToFocusedRow', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "cacheEnabled", {
            /**
             * Specifies whether data should be cached.
            
             */
            get: function () {
                return this._getOption('cacheEnabled');
            },
            set: function (value) {
                this._setOption('cacheEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "cellHintEnabled", {
            /**
             * Enables a hint that appears when a user hovers the mouse pointer over a cell with truncated content.
            
             */
            get: function () {
                return this._getOption('cellHintEnabled');
            },
            set: function (value) {
                this._setOption('cellHintEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "columnAutoWidth", {
            /**
             * Specifies whether columns should adjust their widths to the content.
            
             */
            get: function () {
                return this._getOption('columnAutoWidth');
            },
            set: function (value) {
                this._setOption('columnAutoWidth', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "columnChooser", {
            /**
             * Configures the column chooser.
            
             */
            get: function () {
                return this._getOption('columnChooser');
            },
            set: function (value) {
                this._setOption('columnChooser', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "columnFixing", {
            /**
             * Configures column fixing.
            
             */
            get: function () {
                return this._getOption('columnFixing');
            },
            set: function (value) {
                this._setOption('columnFixing', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "columnHidingEnabled", {
            /**
             * Specifies whether the UI component should hide columns to adapt to the screen or container size. Ignored if allowColumnResizing is true and columnResizingMode is &apos;widget&apos;.
            
             */
            get: function () {
                return this._getOption('columnHidingEnabled');
            },
            set: function (value) {
                this._setOption('columnHidingEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "columnMinWidth", {
            /**
             * Specifies the minimum width of columns.
            
             */
            get: function () {
                return this._getOption('columnMinWidth');
            },
            set: function (value) {
                this._setOption('columnMinWidth', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "columnResizingMode", {
            /**
             * Specifies how the UI component resizes columns. Applies only if allowColumnResizing is true.
            
             */
            get: function () {
                return this._getOption('columnResizingMode');
            },
            set: function (value) {
                this._setOption('columnResizingMode', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "columns", {
            /**
             * Configures columns.
            
             */
            get: function () {
                return this._getOption('columns');
            },
            set: function (value) {
                this._setOption('columns', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "columnWidth", {
            /**
             * Specifies the width for all data columns. Has a lower priority than the column.width property.
            
             */
            get: function () {
                return this._getOption('columnWidth');
            },
            set: function (value) {
                this._setOption('columnWidth', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "customizeColumns", {
            /**
             * Customizes columns after they are created.
            
             */
            get: function () {
                return this._getOption('customizeColumns');
            },
            set: function (value) {
                this._setOption('customizeColumns', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "dataSource", {
            /**
             * Binds the UI component to data.
            
             */
            get: function () {
                return this._getOption('dataSource');
            },
            set: function (value) {
                this._setOption('dataSource', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "dataStructure", {
            /**
             * Notifies the UI component of the used data structure.
            
             */
            get: function () {
                return this._getOption('dataStructure');
            },
            set: function (value) {
                this._setOption('dataStructure', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "dateSerializationFormat", {
            /**
             * Specifies the format in which date-time values should be sent to the server.
            
             */
            get: function () {
                return this._getOption('dateSerializationFormat');
            },
            set: function (value) {
                this._setOption('dateSerializationFormat', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "disabled", {
            /**
             * Specifies whether the UI component responds to user interaction.
            
             */
            get: function () {
                return this._getOption('disabled');
            },
            set: function (value) {
                this._setOption('disabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "editing", {
            /**
             * Configures editing.
            
             */
            get: function () {
                return this._getOption('editing');
            },
            set: function (value) {
                this._setOption('editing', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "elementAttr", {
            /**
             * Specifies the global attributes to be attached to the UI component&apos;s container element.
            
             */
            get: function () {
                return this._getOption('elementAttr');
            },
            set: function (value) {
                this._setOption('elementAttr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "errorRowEnabled", {
            /**
             * Indicates whether to show the error row.
            
             */
            get: function () {
                return this._getOption('errorRowEnabled');
            },
            set: function (value) {
                this._setOption('errorRowEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "expandedRowKeys", {
            /**
             * Specifies keys of the initially expanded rows.
            
             */
            get: function () {
                return this._getOption('expandedRowKeys');
            },
            set: function (value) {
                this._setOption('expandedRowKeys', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "expandNodesOnFiltering", {
            /**
             * Specifies whether nodes appear expanded or collapsed after filtering is applied.
            
             */
            get: function () {
                return this._getOption('expandNodesOnFiltering');
            },
            set: function (value) {
                this._setOption('expandNodesOnFiltering', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "filterBuilder", {
            /**
             * Configures the integrated filter builder.
            
             */
            get: function () {
                return this._getOption('filterBuilder');
            },
            set: function (value) {
                this._setOption('filterBuilder', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "filterBuilderPopup", {
            /**
             * Configures the popup in which the integrated filter builder is shown.
            
             */
            get: function () {
                return this._getOption('filterBuilderPopup');
            },
            set: function (value) {
                this._setOption('filterBuilderPopup', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "filterMode", {
            /**
             * Specifies whether filter and search results should include matching rows only, matching rows with ancestors, or matching rows with ancestors and descendants (full branch).
            
             */
            get: function () {
                return this._getOption('filterMode');
            },
            set: function (value) {
                this._setOption('filterMode', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "filterPanel", {
            /**
             * Configures the filter panel.
            
             */
            get: function () {
                return this._getOption('filterPanel');
            },
            set: function (value) {
                this._setOption('filterPanel', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "filterRow", {
            /**
             * Configures the filter row.
            
             */
            get: function () {
                return this._getOption('filterRow');
            },
            set: function (value) {
                this._setOption('filterRow', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "filterSyncEnabled", {
            /**
             * Specifies whether to synchronize the filter row, header filter, and filter builder. The synchronized filter expression is stored in the filterValue property.
            
             */
            get: function () {
                return this._getOption('filterSyncEnabled');
            },
            set: function (value) {
                this._setOption('filterSyncEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "filterValue", {
            /**
             * Specifies a filter expression.
            
             */
            get: function () {
                return this._getOption('filterValue');
            },
            set: function (value) {
                this._setOption('filterValue', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "focusedColumnIndex", {
            /**
             * The index of the column that contains the focused data cell. This index is taken from the columns array.
            
             */
            get: function () {
                return this._getOption('focusedColumnIndex');
            },
            set: function (value) {
                this._setOption('focusedColumnIndex', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "focusedRowEnabled", {
            /**
             * Specifies whether the focused row feature is enabled.
            
             */
            get: function () {
                return this._getOption('focusedRowEnabled');
            },
            set: function (value) {
                this._setOption('focusedRowEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "focusedRowIndex", {
            /**
             * Specifies or indicates the focused data row&apos;s index.
            
             */
            get: function () {
                return this._getOption('focusedRowIndex');
            },
            set: function (value) {
                this._setOption('focusedRowIndex', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "focusedRowKey", {
            /**
             * Specifies initially or currently focused grid row&apos;s key.
            
             */
            get: function () {
                return this._getOption('focusedRowKey');
            },
            set: function (value) {
                this._setOption('focusedRowKey', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "hasItemsExpr", {
            /**
             * Specifies which data field defines whether the node has children.
            
             */
            get: function () {
                return this._getOption('hasItemsExpr');
            },
            set: function (value) {
                this._setOption('hasItemsExpr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "headerFilter", {
            /**
             * Configures the header filter feature.
            
             */
            get: function () {
                return this._getOption('headerFilter');
            },
            set: function (value) {
                this._setOption('headerFilter', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "height", {
            /**
             * Specifies the UI component&apos;s height.
            
             */
            get: function () {
                return this._getOption('height');
            },
            set: function (value) {
                this._setOption('height', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "highlightChanges", {
            /**
             * Specifies whether to highlight rows and cells with edited data. repaintChangesOnly should be true.
            
             */
            get: function () {
                return this._getOption('highlightChanges');
            },
            set: function (value) {
                this._setOption('highlightChanges', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "hint", {
            /**
             * Specifies text for a hint that appears when a user pauses on the UI component.
            
             */
            get: function () {
                return this._getOption('hint');
            },
            set: function (value) {
                this._setOption('hint', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "hoverStateEnabled", {
            /**
             * Specifies whether the UI component changes its state when a user pauses on it.
            
             */
            get: function () {
                return this._getOption('hoverStateEnabled');
            },
            set: function (value) {
                this._setOption('hoverStateEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "itemsExpr", {
            /**
             * Specifies which data field contains nested items. Set this property when your data has a hierarchical structure.
            
             */
            get: function () {
                return this._getOption('itemsExpr');
            },
            set: function (value) {
                this._setOption('itemsExpr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "keyboardNavigation", {
            /**
             * Configures keyboard navigation.
            
             */
            get: function () {
                return this._getOption('keyboardNavigation');
            },
            set: function (value) {
                this._setOption('keyboardNavigation', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "keyExpr", {
            /**
             * Specifies the key property (or properties) that provide(s) key values to access data items. Each key value must be unique.
            
             */
            get: function () {
                return this._getOption('keyExpr');
            },
            set: function (value) {
                this._setOption('keyExpr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "loadPanel", {
            /**
             * Configures the load panel.
            
             */
            get: function () {
                return this._getOption('loadPanel');
            },
            set: function (value) {
                this._setOption('loadPanel', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "noDataText", {
            /**
             * Specifies a text string shown when the widget does not display any data.
            
             */
            get: function () {
                return this._getOption('noDataText');
            },
            set: function (value) {
                this._setOption('noDataText', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "pager", {
            /**
             * Configures the pager.
            
             */
            get: function () {
                return this._getOption('pager');
            },
            set: function (value) {
                this._setOption('pager', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "paging", {
            /**
             * Configures paging.
            
             */
            get: function () {
                return this._getOption('paging');
            },
            set: function (value) {
                this._setOption('paging', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "parentIdExpr", {
            /**
             * Specifies which data field provides parent keys.
            
             */
            get: function () {
                return this._getOption('parentIdExpr');
            },
            set: function (value) {
                this._setOption('parentIdExpr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "remoteOperations", {
            /**
             * Notifies the TreeList of the server&apos;s data processing operations. Applies only if data has a plain structure.
            
             */
            get: function () {
                return this._getOption('remoteOperations');
            },
            set: function (value) {
                this._setOption('remoteOperations', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "renderAsync", {
            /**
             * Specifies whether to render the filter row, command columns, and columns with showEditorAlways set to true after other elements.
            
             */
            get: function () {
                return this._getOption('renderAsync');
            },
            set: function (value) {
                this._setOption('renderAsync', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "repaintChangesOnly", {
            /**
             * Specifies whether to repaint only those cells whose data changed.
            
             */
            get: function () {
                return this._getOption('repaintChangesOnly');
            },
            set: function (value) {
                this._setOption('repaintChangesOnly', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "rootValue", {
            /**
             * Specifies the root node&apos;s identifier. Applies if dataStructure is &apos;plain&apos;.
            
             */
            get: function () {
                return this._getOption('rootValue');
            },
            set: function (value) {
                this._setOption('rootValue', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "rowAlternationEnabled", {
            /**
             * Specifies whether rows should be shaded differently.
            
             */
            get: function () {
                return this._getOption('rowAlternationEnabled');
            },
            set: function (value) {
                this._setOption('rowAlternationEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "rowDragging", {
            /**
             * Configures row reordering using drag and drop gestures.
            
             */
            get: function () {
                return this._getOption('rowDragging');
            },
            set: function (value) {
                this._setOption('rowDragging', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "rtlEnabled", {
            /**
             * Switches the UI component to a right-to-left representation.
            
             */
            get: function () {
                return this._getOption('rtlEnabled');
            },
            set: function (value) {
                this._setOption('rtlEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "scrolling", {
            /**
             * Configures scrolling.
            
             */
            get: function () {
                return this._getOption('scrolling');
            },
            set: function (value) {
                this._setOption('scrolling', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "searchPanel", {
            /**
             * Configures the search panel.
            
             */
            get: function () {
                return this._getOption('searchPanel');
            },
            set: function (value) {
                this._setOption('searchPanel', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "selectedRowKeys", {
            /**
             * Allows you to select rows or determine which rows are selected.
            
             */
            get: function () {
                return this._getOption('selectedRowKeys');
            },
            set: function (value) {
                this._setOption('selectedRowKeys', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "selection", {
            /**
             * Configures runtime selection.
            
             */
            get: function () {
                return this._getOption('selection');
            },
            set: function (value) {
                this._setOption('selection', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "showBorders", {
            /**
             * Specifies whether the outer borders of the UI component are visible.
            
             */
            get: function () {
                return this._getOption('showBorders');
            },
            set: function (value) {
                this._setOption('showBorders', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "showColumnHeaders", {
            /**
             * Specifies whether column headers are visible.
            
             */
            get: function () {
                return this._getOption('showColumnHeaders');
            },
            set: function (value) {
                this._setOption('showColumnHeaders', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "showColumnLines", {
            /**
             * Specifies whether vertical lines that separate one column from another are visible.
            
             */
            get: function () {
                return this._getOption('showColumnLines');
            },
            set: function (value) {
                this._setOption('showColumnLines', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "showRowLines", {
            /**
             * Specifies whether horizontal lines that separate one row from another are visible.
            
             */
            get: function () {
                return this._getOption('showRowLines');
            },
            set: function (value) {
                this._setOption('showRowLines', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "sorting", {
            /**
             * Configures runtime sorting.
            
             */
            get: function () {
                return this._getOption('sorting');
            },
            set: function (value) {
                this._setOption('sorting', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "stateStoring", {
            /**
             * Configures state storing.
            
             */
            get: function () {
                return this._getOption('stateStoring');
            },
            set: function (value) {
                this._setOption('stateStoring', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "syncLookupFilterValues", {
            /**
             * Specifies whether to show only relevant values in the header filter and filter row.
            
             */
            get: function () {
                return this._getOption('syncLookupFilterValues');
            },
            set: function (value) {
                this._setOption('syncLookupFilterValues', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "tabIndex", {
            /**
             * Specifies the number of the element when the Tab key is used for navigating.
            
             */
            get: function () {
                return this._getOption('tabIndex');
            },
            set: function (value) {
                this._setOption('tabIndex', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "toolbar", {
            /**
             * Configures the toolbar.
            
             */
            get: function () {
                return this._getOption('toolbar');
            },
            set: function (value) {
                this._setOption('toolbar', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "twoWayBindingEnabled", {
            /**
             * Specifies whether to enable two-way data binding.
            
             */
            get: function () {
                return this._getOption('twoWayBindingEnabled');
            },
            set: function (value) {
                this._setOption('twoWayBindingEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "visible", {
            /**
             * Specifies whether the UI component is visible.
            
             */
            get: function () {
                return this._getOption('visible');
            },
            set: function (value) {
                this._setOption('visible', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "width", {
            /**
             * Specifies the UI component&apos;s width.
            
             */
            get: function () {
                return this._getOption('width');
            },
            set: function (value) {
                this._setOption('width', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "wordWrapEnabled", {
            /**
             * Specifies whether text that does not fit into a column should be wrapped.
            
             */
            get: function () {
                return this._getOption('wordWrapEnabled');
            },
            set: function (value) {
                this._setOption('wordWrapEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeListComponent.prototype, "columnsChildren", {
            get: function () {
                return this._getOption('columns');
            },
            set: function (value) {
                this.setChildren('columns', value);
            },
            enumerable: false,
            configurable: true
        });
        DxTreeListComponent.prototype._createInstance = function (element, options) {
            return new DxTreeList__default["default"](element, options);
        };
        DxTreeListComponent.prototype.ngOnDestroy = function () {
            this._destroyWidget();
        };
        DxTreeListComponent.prototype.ngOnChanges = function (changes) {
            _super.prototype.ngOnChanges.call(this, changes);
            this.setupChanges('columns', changes);
            this.setupChanges('dataSource', changes);
            this.setupChanges('expandedRowKeys', changes);
            this.setupChanges('selectedRowKeys', changes);
        };
        DxTreeListComponent.prototype.setupChanges = function (prop, changes) {
            if (!(prop in this._optionsToUpdate)) {
                this._idh.setup(prop, changes);
            }
        };
        DxTreeListComponent.prototype.ngDoCheck = function () {
            this._idh.doCheck('columns');
            this._idh.doCheck('dataSource');
            this._idh.doCheck('expandedRowKeys');
            this._idh.doCheck('selectedRowKeys');
            this._watcherHelper.checkWatchers();
            _super.prototype.ngDoCheck.call(this);
            _super.prototype.clearChangedOptions.call(this);
        };
        DxTreeListComponent.prototype._setOption = function (name, value) {
            var isSetup = this._idh.setupSingle(name, value);
            var isChanged = this._idh.getChanges(name, value) !== null;
            if (isSetup || isChanged) {
                _super.prototype._setOption.call(this, name, value);
            }
        };
        return DxTreeListComponent;
    }(i1.DxComponent));
    /** @nocollapse */ DxTreeListComponent.ɵfac = function DxTreeListComponent_Factory(t) { return new (t || DxTreeListComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef), i0__namespace.ɵɵdirectiveInject(i0__namespace.NgZone), i0__namespace.ɵɵdirectiveInject(i1__namespace.DxTemplateHost), i0__namespace.ɵɵdirectiveInject(i1__namespace.WatcherHelper), i0__namespace.ɵɵdirectiveInject(i1__namespace.IterableDifferHelper), i0__namespace.ɵɵdirectiveInject(i1__namespace.NestedOptionHost), i0__namespace.ɵɵdirectiveInject(i2__namespace.TransferState), i0__namespace.ɵɵdirectiveInject(i0.PLATFORM_ID)); };
    /** @nocollapse */ DxTreeListComponent.ɵcmp = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineComponent({ type: DxTreeListComponent, selectors: [["dx-tree-list"]], contentQueries: function DxTreeListComponent_ContentQueries(rf, ctx, dirIndex) {
            if (rf & 1) {
                i0__namespace.ɵɵcontentQuery(dirIndex, nested.DxiColumnComponent, 4);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.columnsChildren = _t);
            }
        }, inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", allowColumnReordering: "allowColumnReordering", allowColumnResizing: "allowColumnResizing", autoExpandAll: "autoExpandAll", autoNavigateToFocusedRow: "autoNavigateToFocusedRow", cacheEnabled: "cacheEnabled", cellHintEnabled: "cellHintEnabled", columnAutoWidth: "columnAutoWidth", columnChooser: "columnChooser", columnFixing: "columnFixing", columnHidingEnabled: "columnHidingEnabled", columnMinWidth: "columnMinWidth", columnResizingMode: "columnResizingMode", columns: "columns", columnWidth: "columnWidth", customizeColumns: "customizeColumns", dataSource: "dataSource", dataStructure: "dataStructure", dateSerializationFormat: "dateSerializationFormat", disabled: "disabled", editing: "editing", elementAttr: "elementAttr", errorRowEnabled: "errorRowEnabled", expandedRowKeys: "expandedRowKeys", expandNodesOnFiltering: "expandNodesOnFiltering", filterBuilder: "filterBuilder", filterBuilderPopup: "filterBuilderPopup", filterMode: "filterMode", filterPanel: "filterPanel", filterRow: "filterRow", filterSyncEnabled: "filterSyncEnabled", filterValue: "filterValue", focusedColumnIndex: "focusedColumnIndex", focusedRowEnabled: "focusedRowEnabled", focusedRowIndex: "focusedRowIndex", focusedRowKey: "focusedRowKey", hasItemsExpr: "hasItemsExpr", headerFilter: "headerFilter", height: "height", highlightChanges: "highlightChanges", hint: "hint", hoverStateEnabled: "hoverStateEnabled", itemsExpr: "itemsExpr", keyboardNavigation: "keyboardNavigation", keyExpr: "keyExpr", loadPanel: "loadPanel", noDataText: "noDataText", pager: "pager", paging: "paging", parentIdExpr: "parentIdExpr", remoteOperations: "remoteOperations", renderAsync: "renderAsync", repaintChangesOnly: "repaintChangesOnly", rootValue: "rootValue", rowAlternationEnabled: "rowAlternationEnabled", rowDragging: "rowDragging", rtlEnabled: "rtlEnabled", scrolling: "scrolling", searchPanel: "searchPanel", selectedRowKeys: "selectedRowKeys", selection: "selection", showBorders: "showBorders", showColumnHeaders: "showColumnHeaders", showColumnLines: "showColumnLines", showRowLines: "showRowLines", sorting: "sorting", stateStoring: "stateStoring", syncLookupFilterValues: "syncLookupFilterValues", tabIndex: "tabIndex", toolbar: "toolbar", twoWayBindingEnabled: "twoWayBindingEnabled", visible: "visible", width: "width", wordWrapEnabled: "wordWrapEnabled" }, outputs: { onAdaptiveDetailRowPreparing: "onAdaptiveDetailRowPreparing", onCellClick: "onCellClick", onCellDblClick: "onCellDblClick", onCellHoverChanged: "onCellHoverChanged", onCellPrepared: "onCellPrepared", onContentReady: "onContentReady", onContextMenuPreparing: "onContextMenuPreparing", onDataErrorOccurred: "onDataErrorOccurred", onDisposing: "onDisposing", onEditCanceled: "onEditCanceled", onEditCanceling: "onEditCanceling", onEditingStart: "onEditingStart", onEditorPrepared: "onEditorPrepared", onEditorPreparing: "onEditorPreparing", onFocusedCellChanged: "onFocusedCellChanged", onFocusedCellChanging: "onFocusedCellChanging", onFocusedRowChanged: "onFocusedRowChanged", onFocusedRowChanging: "onFocusedRowChanging", onInitialized: "onInitialized", onInitNewRow: "onInitNewRow", onKeyDown: "onKeyDown", onNodesInitialized: "onNodesInitialized", onOptionChanged: "onOptionChanged", onRowClick: "onRowClick", onRowCollapsed: "onRowCollapsed", onRowCollapsing: "onRowCollapsing", onRowDblClick: "onRowDblClick", onRowExpanded: "onRowExpanded", onRowExpanding: "onRowExpanding", onRowInserted: "onRowInserted", onRowInserting: "onRowInserting", onRowPrepared: "onRowPrepared", onRowRemoved: "onRowRemoved", onRowRemoving: "onRowRemoving", onRowUpdated: "onRowUpdated", onRowUpdating: "onRowUpdating", onRowValidating: "onRowValidating", onSaved: "onSaved", onSaving: "onSaving", onSelectionChanged: "onSelectionChanged", onToolbarPreparing: "onToolbarPreparing", accessKeyChange: "accessKeyChange", activeStateEnabledChange: "activeStateEnabledChange", allowColumnReorderingChange: "allowColumnReorderingChange", allowColumnResizingChange: "allowColumnResizingChange", autoExpandAllChange: "autoExpandAllChange", autoNavigateToFocusedRowChange: "autoNavigateToFocusedRowChange", cacheEnabledChange: "cacheEnabledChange", cellHintEnabledChange: "cellHintEnabledChange", columnAutoWidthChange: "columnAutoWidthChange", columnChooserChange: "columnChooserChange", columnFixingChange: "columnFixingChange", columnHidingEnabledChange: "columnHidingEnabledChange", columnMinWidthChange: "columnMinWidthChange", columnResizingModeChange: "columnResizingModeChange", columnsChange: "columnsChange", columnWidthChange: "columnWidthChange", customizeColumnsChange: "customizeColumnsChange", dataSourceChange: "dataSourceChange", dataStructureChange: "dataStructureChange", dateSerializationFormatChange: "dateSerializationFormatChange", disabledChange: "disabledChange", editingChange: "editingChange", elementAttrChange: "elementAttrChange", errorRowEnabledChange: "errorRowEnabledChange", expandedRowKeysChange: "expandedRowKeysChange", expandNodesOnFilteringChange: "expandNodesOnFilteringChange", filterBuilderChange: "filterBuilderChange", filterBuilderPopupChange: "filterBuilderPopupChange", filterModeChange: "filterModeChange", filterPanelChange: "filterPanelChange", filterRowChange: "filterRowChange", filterSyncEnabledChange: "filterSyncEnabledChange", filterValueChange: "filterValueChange", focusedColumnIndexChange: "focusedColumnIndexChange", focusedRowEnabledChange: "focusedRowEnabledChange", focusedRowIndexChange: "focusedRowIndexChange", focusedRowKeyChange: "focusedRowKeyChange", hasItemsExprChange: "hasItemsExprChange", headerFilterChange: "headerFilterChange", heightChange: "heightChange", highlightChangesChange: "highlightChangesChange", hintChange: "hintChange", hoverStateEnabledChange: "hoverStateEnabledChange", itemsExprChange: "itemsExprChange", keyboardNavigationChange: "keyboardNavigationChange", keyExprChange: "keyExprChange", loadPanelChange: "loadPanelChange", noDataTextChange: "noDataTextChange", pagerChange: "pagerChange", pagingChange: "pagingChange", parentIdExprChange: "parentIdExprChange", remoteOperationsChange: "remoteOperationsChange", renderAsyncChange: "renderAsyncChange", repaintChangesOnlyChange: "repaintChangesOnlyChange", rootValueChange: "rootValueChange", rowAlternationEnabledChange: "rowAlternationEnabledChange", rowDraggingChange: "rowDraggingChange", rtlEnabledChange: "rtlEnabledChange", scrollingChange: "scrollingChange", searchPanelChange: "searchPanelChange", selectedRowKeysChange: "selectedRowKeysChange", selectionChange: "selectionChange", showBordersChange: "showBordersChange", showColumnHeadersChange: "showColumnHeadersChange", showColumnLinesChange: "showColumnLinesChange", showRowLinesChange: "showRowLinesChange", sortingChange: "sortingChange", stateStoringChange: "stateStoringChange", syncLookupFilterValuesChange: "syncLookupFilterValuesChange", tabIndexChange: "tabIndexChange", toolbarChange: "toolbarChange", twoWayBindingEnabledChange: "twoWayBindingEnabledChange", visibleChange: "visibleChange", widthChange: "widthChange", wordWrapEnabledChange: "wordWrapEnabledChange" }, features: [i0__namespace.ɵɵProvidersFeature([
                i1.DxTemplateHost,
                i1.WatcherHelper,
                i1.NestedOptionHost,
                i1.IterableDifferHelper
            ]), i0__namespace.ɵɵInheritDefinitionFeature, i0__namespace.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function DxTreeListComponent_Template(rf, ctx) { }, encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DxTreeListComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'dx-tree-list',
                        template: '',
                        providers: [
                            i1.DxTemplateHost,
                            i1.WatcherHelper,
                            i1.NestedOptionHost,
                            i1.IterableDifferHelper
                        ]
                    }]
            }], function () {
            return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.NgZone }, { type: i1__namespace.DxTemplateHost }, { type: i1__namespace.WatcherHelper }, { type: i1__namespace.IterableDifferHelper }, { type: i1__namespace.NestedOptionHost }, { type: i2__namespace.TransferState }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.PLATFORM_ID]
                        }] }];
        }, { accessKey: [{
                    type: i0.Input
                }], activeStateEnabled: [{
                    type: i0.Input
                }], allowColumnReordering: [{
                    type: i0.Input
                }], allowColumnResizing: [{
                    type: i0.Input
                }], autoExpandAll: [{
                    type: i0.Input
                }], autoNavigateToFocusedRow: [{
                    type: i0.Input
                }], cacheEnabled: [{
                    type: i0.Input
                }], cellHintEnabled: [{
                    type: i0.Input
                }], columnAutoWidth: [{
                    type: i0.Input
                }], columnChooser: [{
                    type: i0.Input
                }], columnFixing: [{
                    type: i0.Input
                }], columnHidingEnabled: [{
                    type: i0.Input
                }], columnMinWidth: [{
                    type: i0.Input
                }], columnResizingMode: [{
                    type: i0.Input
                }], columns: [{
                    type: i0.Input
                }], columnWidth: [{
                    type: i0.Input
                }], customizeColumns: [{
                    type: i0.Input
                }], dataSource: [{
                    type: i0.Input
                }], dataStructure: [{
                    type: i0.Input
                }], dateSerializationFormat: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editing: [{
                    type: i0.Input
                }], elementAttr: [{
                    type: i0.Input
                }], errorRowEnabled: [{
                    type: i0.Input
                }], expandedRowKeys: [{
                    type: i0.Input
                }], expandNodesOnFiltering: [{
                    type: i0.Input
                }], filterBuilder: [{
                    type: i0.Input
                }], filterBuilderPopup: [{
                    type: i0.Input
                }], filterMode: [{
                    type: i0.Input
                }], filterPanel: [{
                    type: i0.Input
                }], filterRow: [{
                    type: i0.Input
                }], filterSyncEnabled: [{
                    type: i0.Input
                }], filterValue: [{
                    type: i0.Input
                }], focusedColumnIndex: [{
                    type: i0.Input
                }], focusedRowEnabled: [{
                    type: i0.Input
                }], focusedRowIndex: [{
                    type: i0.Input
                }], focusedRowKey: [{
                    type: i0.Input
                }], hasItemsExpr: [{
                    type: i0.Input
                }], headerFilter: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], highlightChanges: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hoverStateEnabled: [{
                    type: i0.Input
                }], itemsExpr: [{
                    type: i0.Input
                }], keyboardNavigation: [{
                    type: i0.Input
                }], keyExpr: [{
                    type: i0.Input
                }], loadPanel: [{
                    type: i0.Input
                }], noDataText: [{
                    type: i0.Input
                }], pager: [{
                    type: i0.Input
                }], paging: [{
                    type: i0.Input
                }], parentIdExpr: [{
                    type: i0.Input
                }], remoteOperations: [{
                    type: i0.Input
                }], renderAsync: [{
                    type: i0.Input
                }], repaintChangesOnly: [{
                    type: i0.Input
                }], rootValue: [{
                    type: i0.Input
                }], rowAlternationEnabled: [{
                    type: i0.Input
                }], rowDragging: [{
                    type: i0.Input
                }], rtlEnabled: [{
                    type: i0.Input
                }], scrolling: [{
                    type: i0.Input
                }], searchPanel: [{
                    type: i0.Input
                }], selectedRowKeys: [{
                    type: i0.Input
                }], selection: [{
                    type: i0.Input
                }], showBorders: [{
                    type: i0.Input
                }], showColumnHeaders: [{
                    type: i0.Input
                }], showColumnLines: [{
                    type: i0.Input
                }], showRowLines: [{
                    type: i0.Input
                }], sorting: [{
                    type: i0.Input
                }], stateStoring: [{
                    type: i0.Input
                }], syncLookupFilterValues: [{
                    type: i0.Input
                }], tabIndex: [{
                    type: i0.Input
                }], toolbar: [{
                    type: i0.Input
                }], twoWayBindingEnabled: [{
                    type: i0.Input
                }], visible: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], wordWrapEnabled: [{
                    type: i0.Input
                }], onAdaptiveDetailRowPreparing: [{
                    type: i0.Output
                }], onCellClick: [{
                    type: i0.Output
                }], onCellDblClick: [{
                    type: i0.Output
                }], onCellHoverChanged: [{
                    type: i0.Output
                }], onCellPrepared: [{
                    type: i0.Output
                }], onContentReady: [{
                    type: i0.Output
                }], onContextMenuPreparing: [{
                    type: i0.Output
                }], onDataErrorOccurred: [{
                    type: i0.Output
                }], onDisposing: [{
                    type: i0.Output
                }], onEditCanceled: [{
                    type: i0.Output
                }], onEditCanceling: [{
                    type: i0.Output
                }], onEditingStart: [{
                    type: i0.Output
                }], onEditorPrepared: [{
                    type: i0.Output
                }], onEditorPreparing: [{
                    type: i0.Output
                }], onFocusedCellChanged: [{
                    type: i0.Output
                }], onFocusedCellChanging: [{
                    type: i0.Output
                }], onFocusedRowChanged: [{
                    type: i0.Output
                }], onFocusedRowChanging: [{
                    type: i0.Output
                }], onInitialized: [{
                    type: i0.Output
                }], onInitNewRow: [{
                    type: i0.Output
                }], onKeyDown: [{
                    type: i0.Output
                }], onNodesInitialized: [{
                    type: i0.Output
                }], onOptionChanged: [{
                    type: i0.Output
                }], onRowClick: [{
                    type: i0.Output
                }], onRowCollapsed: [{
                    type: i0.Output
                }], onRowCollapsing: [{
                    type: i0.Output
                }], onRowDblClick: [{
                    type: i0.Output
                }], onRowExpanded: [{
                    type: i0.Output
                }], onRowExpanding: [{
                    type: i0.Output
                }], onRowInserted: [{
                    type: i0.Output
                }], onRowInserting: [{
                    type: i0.Output
                }], onRowPrepared: [{
                    type: i0.Output
                }], onRowRemoved: [{
                    type: i0.Output
                }], onRowRemoving: [{
                    type: i0.Output
                }], onRowUpdated: [{
                    type: i0.Output
                }], onRowUpdating: [{
                    type: i0.Output
                }], onRowValidating: [{
                    type: i0.Output
                }], onSaved: [{
                    type: i0.Output
                }], onSaving: [{
                    type: i0.Output
                }], onSelectionChanged: [{
                    type: i0.Output
                }], onToolbarPreparing: [{
                    type: i0.Output
                }], accessKeyChange: [{
                    type: i0.Output
                }], activeStateEnabledChange: [{
                    type: i0.Output
                }], allowColumnReorderingChange: [{
                    type: i0.Output
                }], allowColumnResizingChange: [{
                    type: i0.Output
                }], autoExpandAllChange: [{
                    type: i0.Output
                }], autoNavigateToFocusedRowChange: [{
                    type: i0.Output
                }], cacheEnabledChange: [{
                    type: i0.Output
                }], cellHintEnabledChange: [{
                    type: i0.Output
                }], columnAutoWidthChange: [{
                    type: i0.Output
                }], columnChooserChange: [{
                    type: i0.Output
                }], columnFixingChange: [{
                    type: i0.Output
                }], columnHidingEnabledChange: [{
                    type: i0.Output
                }], columnMinWidthChange: [{
                    type: i0.Output
                }], columnResizingModeChange: [{
                    type: i0.Output
                }], columnsChange: [{
                    type: i0.Output
                }], columnWidthChange: [{
                    type: i0.Output
                }], customizeColumnsChange: [{
                    type: i0.Output
                }], dataSourceChange: [{
                    type: i0.Output
                }], dataStructureChange: [{
                    type: i0.Output
                }], dateSerializationFormatChange: [{
                    type: i0.Output
                }], disabledChange: [{
                    type: i0.Output
                }], editingChange: [{
                    type: i0.Output
                }], elementAttrChange: [{
                    type: i0.Output
                }], errorRowEnabledChange: [{
                    type: i0.Output
                }], expandedRowKeysChange: [{
                    type: i0.Output
                }], expandNodesOnFilteringChange: [{
                    type: i0.Output
                }], filterBuilderChange: [{
                    type: i0.Output
                }], filterBuilderPopupChange: [{
                    type: i0.Output
                }], filterModeChange: [{
                    type: i0.Output
                }], filterPanelChange: [{
                    type: i0.Output
                }], filterRowChange: [{
                    type: i0.Output
                }], filterSyncEnabledChange: [{
                    type: i0.Output
                }], filterValueChange: [{
                    type: i0.Output
                }], focusedColumnIndexChange: [{
                    type: i0.Output
                }], focusedRowEnabledChange: [{
                    type: i0.Output
                }], focusedRowIndexChange: [{
                    type: i0.Output
                }], focusedRowKeyChange: [{
                    type: i0.Output
                }], hasItemsExprChange: [{
                    type: i0.Output
                }], headerFilterChange: [{
                    type: i0.Output
                }], heightChange: [{
                    type: i0.Output
                }], highlightChangesChange: [{
                    type: i0.Output
                }], hintChange: [{
                    type: i0.Output
                }], hoverStateEnabledChange: [{
                    type: i0.Output
                }], itemsExprChange: [{
                    type: i0.Output
                }], keyboardNavigationChange: [{
                    type: i0.Output
                }], keyExprChange: [{
                    type: i0.Output
                }], loadPanelChange: [{
                    type: i0.Output
                }], noDataTextChange: [{
                    type: i0.Output
                }], pagerChange: [{
                    type: i0.Output
                }], pagingChange: [{
                    type: i0.Output
                }], parentIdExprChange: [{
                    type: i0.Output
                }], remoteOperationsChange: [{
                    type: i0.Output
                }], renderAsyncChange: [{
                    type: i0.Output
                }], repaintChangesOnlyChange: [{
                    type: i0.Output
                }], rootValueChange: [{
                    type: i0.Output
                }], rowAlternationEnabledChange: [{
                    type: i0.Output
                }], rowDraggingChange: [{
                    type: i0.Output
                }], rtlEnabledChange: [{
                    type: i0.Output
                }], scrollingChange: [{
                    type: i0.Output
                }], searchPanelChange: [{
                    type: i0.Output
                }], selectedRowKeysChange: [{
                    type: i0.Output
                }], selectionChange: [{
                    type: i0.Output
                }], showBordersChange: [{
                    type: i0.Output
                }], showColumnHeadersChange: [{
                    type: i0.Output
                }], showColumnLinesChange: [{
                    type: i0.Output
                }], showRowLinesChange: [{
                    type: i0.Output
                }], sortingChange: [{
                    type: i0.Output
                }], stateStoringChange: [{
                    type: i0.Output
                }], syncLookupFilterValuesChange: [{
                    type: i0.Output
                }], tabIndexChange: [{
                    type: i0.Output
                }], toolbarChange: [{
                    type: i0.Output
                }], twoWayBindingEnabledChange: [{
                    type: i0.Output
                }], visibleChange: [{
                    type: i0.Output
                }], widthChange: [{
                    type: i0.Output
                }], wordWrapEnabledChange: [{
                    type: i0.Output
                }], columnsChildren: [{
                    type: i0.ContentChildren,
                    args: [nested.DxiColumnComponent]
                }] });
    })();
    var DxTreeListModule = /** @class */ (function () {
        function DxTreeListModule() {
        }
        return DxTreeListModule;
    }());
    /** @nocollapse */ DxTreeListModule.ɵfac = function DxTreeListModule_Factory(t) { return new (t || DxTreeListModule)(); };
    /** @nocollapse */ DxTreeListModule.ɵmod = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineNgModule({ type: DxTreeListModule });
    /** @nocollapse */ DxTreeListModule.ɵinj = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineInjector({ imports: [[
                nested.DxoColumnChooserModule,
                nested.DxoColumnFixingModule,
                nested.DxoTextsModule,
                nested.DxiColumnModule,
                nested.DxiButtonModule,
                nested.DxoHeaderFilterModule,
                nested.DxoLookupModule,
                nested.DxoFormatModule,
                nested.DxoFormItemModule,
                nested.DxoLabelModule,
                nested.DxiValidationRuleModule,
                nested.DxoEditingModule,
                nested.DxiChangeModule,
                nested.DxoFormModule,
                nested.DxoColCountByScreenModule,
                nested.DxiItemModule,
                nested.DxoTabPanelOptionsModule,
                nested.DxiTabModule,
                nested.DxoButtonOptionsModule,
                nested.DxoPopupModule,
                nested.DxoAnimationModule,
                nested.DxoHideModule,
                nested.DxoFromModule,
                nested.DxoPositionModule,
                nested.DxoAtModule,
                nested.DxoBoundaryOffsetModule,
                nested.DxoCollisionModule,
                nested.DxoMyModule,
                nested.DxoOffsetModule,
                nested.DxoToModule,
                nested.DxoShowModule,
                nested.DxiToolbarItemModule,
                nested.DxoFilterBuilderModule,
                nested.DxiCustomOperationModule,
                nested.DxiFieldModule,
                nested.DxoFilterOperationDescriptionsModule,
                nested.DxoGroupOperationDescriptionsModule,
                nested.DxoFilterBuilderPopupModule,
                nested.DxoFilterPanelModule,
                nested.DxoFilterRowModule,
                nested.DxoOperationDescriptionsModule,
                nested.DxoKeyboardNavigationModule,
                nested.DxoLoadPanelModule,
                nested.DxoPagerModule,
                nested.DxoPagingModule,
                nested.DxoRemoteOperationsModule,
                nested.DxoRowDraggingModule,
                nested.DxoCursorOffsetModule,
                nested.DxoScrollingModule,
                nested.DxoSearchPanelModule,
                nested.DxoSelectionModule,
                nested.DxoSortingModule,
                nested.DxoStateStoringModule,
                nested.DxoToolbarModule,
                i1.DxIntegrationModule,
                i1.DxTemplateModule,
                i2.BrowserTransferStateModule
            ], nested.DxoColumnChooserModule,
            nested.DxoColumnFixingModule,
            nested.DxoTextsModule,
            nested.DxiColumnModule,
            nested.DxiButtonModule,
            nested.DxoHeaderFilterModule,
            nested.DxoLookupModule,
            nested.DxoFormatModule,
            nested.DxoFormItemModule,
            nested.DxoLabelModule,
            nested.DxiValidationRuleModule,
            nested.DxoEditingModule,
            nested.DxiChangeModule,
            nested.DxoFormModule,
            nested.DxoColCountByScreenModule,
            nested.DxiItemModule,
            nested.DxoTabPanelOptionsModule,
            nested.DxiTabModule,
            nested.DxoButtonOptionsModule,
            nested.DxoPopupModule,
            nested.DxoAnimationModule,
            nested.DxoHideModule,
            nested.DxoFromModule,
            nested.DxoPositionModule,
            nested.DxoAtModule,
            nested.DxoBoundaryOffsetModule,
            nested.DxoCollisionModule,
            nested.DxoMyModule,
            nested.DxoOffsetModule,
            nested.DxoToModule,
            nested.DxoShowModule,
            nested.DxiToolbarItemModule,
            nested.DxoFilterBuilderModule,
            nested.DxiCustomOperationModule,
            nested.DxiFieldModule,
            nested.DxoFilterOperationDescriptionsModule,
            nested.DxoGroupOperationDescriptionsModule,
            nested.DxoFilterBuilderPopupModule,
            nested.DxoFilterPanelModule,
            nested.DxoFilterRowModule,
            nested.DxoOperationDescriptionsModule,
            nested.DxoKeyboardNavigationModule,
            nested.DxoLoadPanelModule,
            nested.DxoPagerModule,
            nested.DxoPagingModule,
            nested.DxoRemoteOperationsModule,
            nested.DxoRowDraggingModule,
            nested.DxoCursorOffsetModule,
            nested.DxoScrollingModule,
            nested.DxoSearchPanelModule,
            nested.DxoSelectionModule,
            nested.DxoSortingModule,
            nested.DxoStateStoringModule,
            nested.DxoToolbarModule,
            i1.DxTemplateModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DxTreeListModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            nested.DxoColumnChooserModule,
                            nested.DxoColumnFixingModule,
                            nested.DxoTextsModule,
                            nested.DxiColumnModule,
                            nested.DxiButtonModule,
                            nested.DxoHeaderFilterModule,
                            nested.DxoLookupModule,
                            nested.DxoFormatModule,
                            nested.DxoFormItemModule,
                            nested.DxoLabelModule,
                            nested.DxiValidationRuleModule,
                            nested.DxoEditingModule,
                            nested.DxiChangeModule,
                            nested.DxoFormModule,
                            nested.DxoColCountByScreenModule,
                            nested.DxiItemModule,
                            nested.DxoTabPanelOptionsModule,
                            nested.DxiTabModule,
                            nested.DxoButtonOptionsModule,
                            nested.DxoPopupModule,
                            nested.DxoAnimationModule,
                            nested.DxoHideModule,
                            nested.DxoFromModule,
                            nested.DxoPositionModule,
                            nested.DxoAtModule,
                            nested.DxoBoundaryOffsetModule,
                            nested.DxoCollisionModule,
                            nested.DxoMyModule,
                            nested.DxoOffsetModule,
                            nested.DxoToModule,
                            nested.DxoShowModule,
                            nested.DxiToolbarItemModule,
                            nested.DxoFilterBuilderModule,
                            nested.DxiCustomOperationModule,
                            nested.DxiFieldModule,
                            nested.DxoFilterOperationDescriptionsModule,
                            nested.DxoGroupOperationDescriptionsModule,
                            nested.DxoFilterBuilderPopupModule,
                            nested.DxoFilterPanelModule,
                            nested.DxoFilterRowModule,
                            nested.DxoOperationDescriptionsModule,
                            nested.DxoKeyboardNavigationModule,
                            nested.DxoLoadPanelModule,
                            nested.DxoPagerModule,
                            nested.DxoPagingModule,
                            nested.DxoRemoteOperationsModule,
                            nested.DxoRowDraggingModule,
                            nested.DxoCursorOffsetModule,
                            nested.DxoScrollingModule,
                            nested.DxoSearchPanelModule,
                            nested.DxoSelectionModule,
                            nested.DxoSortingModule,
                            nested.DxoStateStoringModule,
                            nested.DxoToolbarModule,
                            i1.DxIntegrationModule,
                            i1.DxTemplateModule,
                            i2.BrowserTransferStateModule
                        ],
                        declarations: [
                            DxTreeListComponent
                        ],
                        exports: [
                            DxTreeListComponent,
                            nested.DxoColumnChooserModule,
                            nested.DxoColumnFixingModule,
                            nested.DxoTextsModule,
                            nested.DxiColumnModule,
                            nested.DxiButtonModule,
                            nested.DxoHeaderFilterModule,
                            nested.DxoLookupModule,
                            nested.DxoFormatModule,
                            nested.DxoFormItemModule,
                            nested.DxoLabelModule,
                            nested.DxiValidationRuleModule,
                            nested.DxoEditingModule,
                            nested.DxiChangeModule,
                            nested.DxoFormModule,
                            nested.DxoColCountByScreenModule,
                            nested.DxiItemModule,
                            nested.DxoTabPanelOptionsModule,
                            nested.DxiTabModule,
                            nested.DxoButtonOptionsModule,
                            nested.DxoPopupModule,
                            nested.DxoAnimationModule,
                            nested.DxoHideModule,
                            nested.DxoFromModule,
                            nested.DxoPositionModule,
                            nested.DxoAtModule,
                            nested.DxoBoundaryOffsetModule,
                            nested.DxoCollisionModule,
                            nested.DxoMyModule,
                            nested.DxoOffsetModule,
                            nested.DxoToModule,
                            nested.DxoShowModule,
                            nested.DxiToolbarItemModule,
                            nested.DxoFilterBuilderModule,
                            nested.DxiCustomOperationModule,
                            nested.DxiFieldModule,
                            nested.DxoFilterOperationDescriptionsModule,
                            nested.DxoGroupOperationDescriptionsModule,
                            nested.DxoFilterBuilderPopupModule,
                            nested.DxoFilterPanelModule,
                            nested.DxoFilterRowModule,
                            nested.DxoOperationDescriptionsModule,
                            nested.DxoKeyboardNavigationModule,
                            nested.DxoLoadPanelModule,
                            nested.DxoPagerModule,
                            nested.DxoPagingModule,
                            nested.DxoRemoteOperationsModule,
                            nested.DxoRowDraggingModule,
                            nested.DxoCursorOffsetModule,
                            nested.DxoScrollingModule,
                            nested.DxoSearchPanelModule,
                            nested.DxoSelectionModule,
                            nested.DxoSortingModule,
                            nested.DxoStateStoringModule,
                            nested.DxoToolbarModule,
                            i1.DxTemplateModule
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(DxTreeListModule, { declarations: [DxTreeListComponent], imports: [nested.DxoColumnChooserModule,
                nested.DxoColumnFixingModule,
                nested.DxoTextsModule,
                nested.DxiColumnModule,
                nested.DxiButtonModule,
                nested.DxoHeaderFilterModule,
                nested.DxoLookupModule,
                nested.DxoFormatModule,
                nested.DxoFormItemModule,
                nested.DxoLabelModule,
                nested.DxiValidationRuleModule,
                nested.DxoEditingModule,
                nested.DxiChangeModule,
                nested.DxoFormModule,
                nested.DxoColCountByScreenModule,
                nested.DxiItemModule,
                nested.DxoTabPanelOptionsModule,
                nested.DxiTabModule,
                nested.DxoButtonOptionsModule,
                nested.DxoPopupModule,
                nested.DxoAnimationModule,
                nested.DxoHideModule,
                nested.DxoFromModule,
                nested.DxoPositionModule,
                nested.DxoAtModule,
                nested.DxoBoundaryOffsetModule,
                nested.DxoCollisionModule,
                nested.DxoMyModule,
                nested.DxoOffsetModule,
                nested.DxoToModule,
                nested.DxoShowModule,
                nested.DxiToolbarItemModule,
                nested.DxoFilterBuilderModule,
                nested.DxiCustomOperationModule,
                nested.DxiFieldModule,
                nested.DxoFilterOperationDescriptionsModule,
                nested.DxoGroupOperationDescriptionsModule,
                nested.DxoFilterBuilderPopupModule,
                nested.DxoFilterPanelModule,
                nested.DxoFilterRowModule,
                nested.DxoOperationDescriptionsModule,
                nested.DxoKeyboardNavigationModule,
                nested.DxoLoadPanelModule,
                nested.DxoPagerModule,
                nested.DxoPagingModule,
                nested.DxoRemoteOperationsModule,
                nested.DxoRowDraggingModule,
                nested.DxoCursorOffsetModule,
                nested.DxoScrollingModule,
                nested.DxoSearchPanelModule,
                nested.DxoSelectionModule,
                nested.DxoSortingModule,
                nested.DxoStateStoringModule,
                nested.DxoToolbarModule,
                i1.DxIntegrationModule,
                i1.DxTemplateModule,
                i2.BrowserTransferStateModule], exports: [DxTreeListComponent, nested.DxoColumnChooserModule,
                nested.DxoColumnFixingModule,
                nested.DxoTextsModule,
                nested.DxiColumnModule,
                nested.DxiButtonModule,
                nested.DxoHeaderFilterModule,
                nested.DxoLookupModule,
                nested.DxoFormatModule,
                nested.DxoFormItemModule,
                nested.DxoLabelModule,
                nested.DxiValidationRuleModule,
                nested.DxoEditingModule,
                nested.DxiChangeModule,
                nested.DxoFormModule,
                nested.DxoColCountByScreenModule,
                nested.DxiItemModule,
                nested.DxoTabPanelOptionsModule,
                nested.DxiTabModule,
                nested.DxoButtonOptionsModule,
                nested.DxoPopupModule,
                nested.DxoAnimationModule,
                nested.DxoHideModule,
                nested.DxoFromModule,
                nested.DxoPositionModule,
                nested.DxoAtModule,
                nested.DxoBoundaryOffsetModule,
                nested.DxoCollisionModule,
                nested.DxoMyModule,
                nested.DxoOffsetModule,
                nested.DxoToModule,
                nested.DxoShowModule,
                nested.DxiToolbarItemModule,
                nested.DxoFilterBuilderModule,
                nested.DxiCustomOperationModule,
                nested.DxiFieldModule,
                nested.DxoFilterOperationDescriptionsModule,
                nested.DxoGroupOperationDescriptionsModule,
                nested.DxoFilterBuilderPopupModule,
                nested.DxoFilterPanelModule,
                nested.DxoFilterRowModule,
                nested.DxoOperationDescriptionsModule,
                nested.DxoKeyboardNavigationModule,
                nested.DxoLoadPanelModule,
                nested.DxoPagerModule,
                nested.DxoPagingModule,
                nested.DxoRemoteOperationsModule,
                nested.DxoRowDraggingModule,
                nested.DxoCursorOffsetModule,
                nested.DxoScrollingModule,
                nested.DxoSearchPanelModule,
                nested.DxoSelectionModule,
                nested.DxoSortingModule,
                nested.DxoStateStoringModule,
                nested.DxoToolbarModule,
                i1.DxTemplateModule] });
    })();

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DxTreeListComponent = DxTreeListComponent;
    exports.DxTreeListModule = DxTreeListModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=devextreme-angular-ui-tree-list.umd.js.map
