(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/platform-browser'), require('@angular/core'), require('devextreme/viz/tree_map'), require('devextreme-angular/core'), require('devextreme-angular/ui/nested')) :
    typeof define === 'function' && define.amd ? define('devextreme-angular/ui/tree-map', ['exports', '@angular/platform-browser', '@angular/core', 'devextreme/viz/tree_map', 'devextreme-angular/core', 'devextreme-angular/ui/nested'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["devextreme-angular"] = global["devextreme-angular"] || {}, global["devextreme-angular"].ui = global["devextreme-angular"].ui || {}, global["devextreme-angular"].ui["tree-map"] = {}), global.ng.platformBrowser, global.ng.core, global.DxTreeMap, global["devextreme-angular"].core, global["devextreme-angular"].ui.nested));
})(this, (function (exports, i2, i0, DxTreeMap, i1, nested) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var DxTreeMap__default = /*#__PURE__*/_interopDefaultLegacy(DxTreeMap);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    function __createBinding(o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    }
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                exports[p] = m[p];
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    result[k] = mod[k];
        result.default = mod;
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * The TreeMap is a UI component that displays hierarchical data by using nested rectangles.

     */
    var DxTreeMapComponent = /** @class */ (function (_super) {
        __extends(DxTreeMapComponent, _super);
        function DxTreeMapComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
            var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;
            _this._watcherHelper = _watcherHelper;
            _this._idh = _idh;
            _this._createEventEmitters([
                { subscribe: 'click', emit: 'onClick' },
                { subscribe: 'disposing', emit: 'onDisposing' },
                { subscribe: 'drawn', emit: 'onDrawn' },
                { subscribe: 'drill', emit: 'onDrill' },
                { subscribe: 'exported', emit: 'onExported' },
                { subscribe: 'exporting', emit: 'onExporting' },
                { subscribe: 'fileSaving', emit: 'onFileSaving' },
                { subscribe: 'hoverChanged', emit: 'onHoverChanged' },
                { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },
                { subscribe: 'initialized', emit: 'onInitialized' },
                { subscribe: 'nodesInitialized', emit: 'onNodesInitialized' },
                { subscribe: 'nodesRendering', emit: 'onNodesRendering' },
                { subscribe: 'optionChanged', emit: 'onOptionChanged' },
                { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },
                { emit: 'childrenFieldChange' },
                { emit: 'colorFieldChange' },
                { emit: 'colorizerChange' },
                { emit: 'dataSourceChange' },
                { emit: 'disabledChange' },
                { emit: 'elementAttrChange' },
                { emit: 'exportChange' },
                { emit: 'groupChange' },
                { emit: 'hoverEnabledChange' },
                { emit: 'idFieldChange' },
                { emit: 'interactWithGroupChange' },
                { emit: 'labelFieldChange' },
                { emit: 'layoutAlgorithmChange' },
                { emit: 'layoutDirectionChange' },
                { emit: 'loadingIndicatorChange' },
                { emit: 'maxDepthChange' },
                { emit: 'parentFieldChange' },
                { emit: 'pathModifiedChange' },
                { emit: 'redrawOnResizeChange' },
                { emit: 'rtlEnabledChange' },
                { emit: 'selectionModeChange' },
                { emit: 'sizeChange' },
                { emit: 'themeChange' },
                { emit: 'tileChange' },
                { emit: 'titleChange' },
                { emit: 'tooltipChange' },
                { emit: 'valueFieldChange' }
            ]);
            _this._idh.setHost(_this);
            optionHost.setHost(_this);
            return _this;
        }
        Object.defineProperty(DxTreeMapComponent.prototype, "childrenField", {
            /**
             * Specifies the name of the data source field that provides nested items for a group. Applies to hierarchical data sources only.
            
             */
            get: function () {
                return this._getOption('childrenField');
            },
            set: function (value) {
                this._setOption('childrenField', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "colorField", {
            /**
             * Specifies the name of the data source field that provides colors for tiles.
            
             */
            get: function () {
                return this._getOption('colorField');
            },
            set: function (value) {
                this._setOption('colorField', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "colorizer", {
            /**
             * Manages the color settings.
            
             */
            get: function () {
                return this._getOption('colorizer');
            },
            set: function (value) {
                this._setOption('colorizer', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "dataSource", {
            /**
             * Binds the UI component to data.
            
             */
            get: function () {
                return this._getOption('dataSource');
            },
            set: function (value) {
                this._setOption('dataSource', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "disabled", {
            /**
             * Specifies whether the UI component responds to user interaction.
            
             */
            get: function () {
                return this._getOption('disabled');
            },
            set: function (value) {
                this._setOption('disabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "elementAttr", {
            /**
             * Specifies the global attributes to be attached to the UI component&apos;s container element.
            
             */
            get: function () {
                return this._getOption('elementAttr');
            },
            set: function (value) {
                this._setOption('elementAttr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "export", {
            /**
             * Configures the exporting and printing features.
            
             */
            get: function () {
                return this._getOption('export');
            },
            set: function (value) {
                this._setOption('export', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "group", {
            /**
             * Configures groups.
            
             */
            get: function () {
                return this._getOption('group');
            },
            set: function (value) {
                this._setOption('group', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "hoverEnabled", {
            /**
             * Specifies whether tiles and groups change their style when a user pauses on them.
            
             */
            get: function () {
                return this._getOption('hoverEnabled');
            },
            set: function (value) {
                this._setOption('hoverEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "idField", {
            /**
             * Specifies the name of the data source field that provides IDs for items. Applies to plain data sources only.
            
             */
            get: function () {
                return this._getOption('idField');
            },
            set: function (value) {
                this._setOption('idField', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "interactWithGroup", {
            /**
             * Specifies whether the user will interact with a single tile or its group.
            
             */
            get: function () {
                return this._getOption('interactWithGroup');
            },
            set: function (value) {
                this._setOption('interactWithGroup', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "labelField", {
            /**
             * Specifies the name of the data source field that provides texts for tile and group labels.
            
             */
            get: function () {
                return this._getOption('labelField');
            },
            set: function (value) {
                this._setOption('labelField', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "layoutAlgorithm", {
            /**
             * Specifies the layout algorithm.
            
             */
            get: function () {
                return this._getOption('layoutAlgorithm');
            },
            set: function (value) {
                this._setOption('layoutAlgorithm', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "layoutDirection", {
            /**
             * Specifies the direction in which the items will be laid out.
            
             */
            get: function () {
                return this._getOption('layoutDirection');
            },
            set: function (value) {
                this._setOption('layoutDirection', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "loadingIndicator", {
            /**
             * Configures the loading indicator.
            
             */
            get: function () {
                return this._getOption('loadingIndicator');
            },
            set: function (value) {
                this._setOption('loadingIndicator', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "maxDepth", {
            /**
             * Specifies how many hierarchical levels must be visualized.
            
             */
            get: function () {
                return this._getOption('maxDepth');
            },
            set: function (value) {
                this._setOption('maxDepth', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "parentField", {
            /**
             * Specifies the name of the data source field that provides parent IDs for items. Applies to plain data sources only.
            
             */
            get: function () {
                return this._getOption('parentField');
            },
            set: function (value) {
                this._setOption('parentField', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "pathModified", {
            /**
             * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.
            
             */
            get: function () {
                return this._getOption('pathModified');
            },
            set: function (value) {
                this._setOption('pathModified', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "redrawOnResize", {
            /**
             * Specifies whether to redraw the UI component when the size of the container changes or a mobile device rotates.
            
             */
            get: function () {
                return this._getOption('redrawOnResize');
            },
            set: function (value) {
                this._setOption('redrawOnResize', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "rtlEnabled", {
            /**
             * Switches the UI component to a right-to-left representation.
            
             */
            get: function () {
                return this._getOption('rtlEnabled');
            },
            set: function (value) {
                this._setOption('rtlEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "selectionMode", {
            /**
             * Specifies whether a single or multiple nodes can be in the selected state simultaneously.
            
             */
            get: function () {
                return this._getOption('selectionMode');
            },
            set: function (value) {
                this._setOption('selectionMode', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "size", {
            /**
             * Specifies the UI component&apos;s size in pixels.
            
             */
            get: function () {
                return this._getOption('size');
            },
            set: function (value) {
                this._setOption('size', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "theme", {
            /**
             * Sets the name of the theme the UI component uses.
            
             */
            get: function () {
                return this._getOption('theme');
            },
            set: function (value) {
                this._setOption('theme', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "tile", {
            /**
             * Configures tiles.
            
             */
            get: function () {
                return this._getOption('tile');
            },
            set: function (value) {
                this._setOption('tile', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "title", {
            /**
             * Configures the UI component&apos;s title.
            
             */
            get: function () {
                return this._getOption('title');
            },
            set: function (value) {
                this._setOption('title', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "tooltip", {
            /**
             * Configures tooltips - small pop-up rectangles that display information about a data-visualizing UI component element being pressed or hovered over with the mouse pointer.
            
             */
            get: function () {
                return this._getOption('tooltip');
            },
            set: function (value) {
                this._setOption('tooltip', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeMapComponent.prototype, "valueField", {
            /**
             * Specifies the name of the data source field that provides values for tiles.
            
             */
            get: function () {
                return this._getOption('valueField');
            },
            set: function (value) {
                this._setOption('valueField', value);
            },
            enumerable: false,
            configurable: true
        });
        DxTreeMapComponent.prototype._createInstance = function (element, options) {
            return new DxTreeMap__default["default"](element, options);
        };
        DxTreeMapComponent.prototype.ngOnDestroy = function () {
            this._destroyWidget();
        };
        DxTreeMapComponent.prototype.ngOnChanges = function (changes) {
            _super.prototype.ngOnChanges.call(this, changes);
            this.setupChanges('dataSource', changes);
        };
        DxTreeMapComponent.prototype.setupChanges = function (prop, changes) {
            if (!(prop in this._optionsToUpdate)) {
                this._idh.setup(prop, changes);
            }
        };
        DxTreeMapComponent.prototype.ngDoCheck = function () {
            this._idh.doCheck('dataSource');
            this._watcherHelper.checkWatchers();
            _super.prototype.ngDoCheck.call(this);
            _super.prototype.clearChangedOptions.call(this);
        };
        DxTreeMapComponent.prototype._setOption = function (name, value) {
            var isSetup = this._idh.setupSingle(name, value);
            var isChanged = this._idh.getChanges(name, value) !== null;
            if (isSetup || isChanged) {
                _super.prototype._setOption.call(this, name, value);
            }
        };
        return DxTreeMapComponent;
    }(i1.DxComponent));
    /** @nocollapse */ DxTreeMapComponent.ɵfac = function DxTreeMapComponent_Factory(t) { return new (t || DxTreeMapComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef), i0__namespace.ɵɵdirectiveInject(i0__namespace.NgZone), i0__namespace.ɵɵdirectiveInject(i1__namespace.DxTemplateHost), i0__namespace.ɵɵdirectiveInject(i1__namespace.WatcherHelper), i0__namespace.ɵɵdirectiveInject(i1__namespace.IterableDifferHelper), i0__namespace.ɵɵdirectiveInject(i1__namespace.NestedOptionHost), i0__namespace.ɵɵdirectiveInject(i2__namespace.TransferState), i0__namespace.ɵɵdirectiveInject(i0.PLATFORM_ID)); };
    /** @nocollapse */ DxTreeMapComponent.ɵcmp = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineComponent({ type: DxTreeMapComponent, selectors: [["dx-tree-map"]], inputs: { childrenField: "childrenField", colorField: "colorField", colorizer: "colorizer", dataSource: "dataSource", disabled: "disabled", elementAttr: "elementAttr", export: "export", group: "group", hoverEnabled: "hoverEnabled", idField: "idField", interactWithGroup: "interactWithGroup", labelField: "labelField", layoutAlgorithm: "layoutAlgorithm", layoutDirection: "layoutDirection", loadingIndicator: "loadingIndicator", maxDepth: "maxDepth", parentField: "parentField", pathModified: "pathModified", redrawOnResize: "redrawOnResize", rtlEnabled: "rtlEnabled", selectionMode: "selectionMode", size: "size", theme: "theme", tile: "tile", title: "title", tooltip: "tooltip", valueField: "valueField" }, outputs: { onClick: "onClick", onDisposing: "onDisposing", onDrawn: "onDrawn", onDrill: "onDrill", onExported: "onExported", onExporting: "onExporting", onFileSaving: "onFileSaving", onHoverChanged: "onHoverChanged", onIncidentOccurred: "onIncidentOccurred", onInitialized: "onInitialized", onNodesInitialized: "onNodesInitialized", onNodesRendering: "onNodesRendering", onOptionChanged: "onOptionChanged", onSelectionChanged: "onSelectionChanged", childrenFieldChange: "childrenFieldChange", colorFieldChange: "colorFieldChange", colorizerChange: "colorizerChange", dataSourceChange: "dataSourceChange", disabledChange: "disabledChange", elementAttrChange: "elementAttrChange", exportChange: "exportChange", groupChange: "groupChange", hoverEnabledChange: "hoverEnabledChange", idFieldChange: "idFieldChange", interactWithGroupChange: "interactWithGroupChange", labelFieldChange: "labelFieldChange", layoutAlgorithmChange: "layoutAlgorithmChange", layoutDirectionChange: "layoutDirectionChange", loadingIndicatorChange: "loadingIndicatorChange", maxDepthChange: "maxDepthChange", parentFieldChange: "parentFieldChange", pathModifiedChange: "pathModifiedChange", redrawOnResizeChange: "redrawOnResizeChange", rtlEnabledChange: "rtlEnabledChange", selectionModeChange: "selectionModeChange", sizeChange: "sizeChange", themeChange: "themeChange", tileChange: "tileChange", titleChange: "titleChange", tooltipChange: "tooltipChange", valueFieldChange: "valueFieldChange" }, features: [i0__namespace.ɵɵProvidersFeature([
                i1.DxTemplateHost,
                i1.WatcherHelper,
                i1.NestedOptionHost,
                i1.IterableDifferHelper
            ]), i0__namespace.ɵɵInheritDefinitionFeature, i0__namespace.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function DxTreeMapComponent_Template(rf, ctx) { }, styles: ["[_nghost-%COMP%] {  display: block; }"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DxTreeMapComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'dx-tree-map',
                        template: '',
                        styles: [' :host {  display: block; }'],
                        providers: [
                            i1.DxTemplateHost,
                            i1.WatcherHelper,
                            i1.NestedOptionHost,
                            i1.IterableDifferHelper
                        ]
                    }]
            }], function () {
            return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.NgZone }, { type: i1__namespace.DxTemplateHost }, { type: i1__namespace.WatcherHelper }, { type: i1__namespace.IterableDifferHelper }, { type: i1__namespace.NestedOptionHost }, { type: i2__namespace.TransferState }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.PLATFORM_ID]
                        }] }];
        }, { childrenField: [{
                    type: i0.Input
                }], colorField: [{
                    type: i0.Input
                }], colorizer: [{
                    type: i0.Input
                }], dataSource: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], elementAttr: [{
                    type: i0.Input
                }], export: [{
                    type: i0.Input
                }], group: [{
                    type: i0.Input
                }], hoverEnabled: [{
                    type: i0.Input
                }], idField: [{
                    type: i0.Input
                }], interactWithGroup: [{
                    type: i0.Input
                }], labelField: [{
                    type: i0.Input
                }], layoutAlgorithm: [{
                    type: i0.Input
                }], layoutDirection: [{
                    type: i0.Input
                }], loadingIndicator: [{
                    type: i0.Input
                }], maxDepth: [{
                    type: i0.Input
                }], parentField: [{
                    type: i0.Input
                }], pathModified: [{
                    type: i0.Input
                }], redrawOnResize: [{
                    type: i0.Input
                }], rtlEnabled: [{
                    type: i0.Input
                }], selectionMode: [{
                    type: i0.Input
                }], size: [{
                    type: i0.Input
                }], theme: [{
                    type: i0.Input
                }], tile: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], valueField: [{
                    type: i0.Input
                }], onClick: [{
                    type: i0.Output
                }], onDisposing: [{
                    type: i0.Output
                }], onDrawn: [{
                    type: i0.Output
                }], onDrill: [{
                    type: i0.Output
                }], onExported: [{
                    type: i0.Output
                }], onExporting: [{
                    type: i0.Output
                }], onFileSaving: [{
                    type: i0.Output
                }], onHoverChanged: [{
                    type: i0.Output
                }], onIncidentOccurred: [{
                    type: i0.Output
                }], onInitialized: [{
                    type: i0.Output
                }], onNodesInitialized: [{
                    type: i0.Output
                }], onNodesRendering: [{
                    type: i0.Output
                }], onOptionChanged: [{
                    type: i0.Output
                }], onSelectionChanged: [{
                    type: i0.Output
                }], childrenFieldChange: [{
                    type: i0.Output
                }], colorFieldChange: [{
                    type: i0.Output
                }], colorizerChange: [{
                    type: i0.Output
                }], dataSourceChange: [{
                    type: i0.Output
                }], disabledChange: [{
                    type: i0.Output
                }], elementAttrChange: [{
                    type: i0.Output
                }], exportChange: [{
                    type: i0.Output
                }], groupChange: [{
                    type: i0.Output
                }], hoverEnabledChange: [{
                    type: i0.Output
                }], idFieldChange: [{
                    type: i0.Output
                }], interactWithGroupChange: [{
                    type: i0.Output
                }], labelFieldChange: [{
                    type: i0.Output
                }], layoutAlgorithmChange: [{
                    type: i0.Output
                }], layoutDirectionChange: [{
                    type: i0.Output
                }], loadingIndicatorChange: [{
                    type: i0.Output
                }], maxDepthChange: [{
                    type: i0.Output
                }], parentFieldChange: [{
                    type: i0.Output
                }], pathModifiedChange: [{
                    type: i0.Output
                }], redrawOnResizeChange: [{
                    type: i0.Output
                }], rtlEnabledChange: [{
                    type: i0.Output
                }], selectionModeChange: [{
                    type: i0.Output
                }], sizeChange: [{
                    type: i0.Output
                }], themeChange: [{
                    type: i0.Output
                }], tileChange: [{
                    type: i0.Output
                }], titleChange: [{
                    type: i0.Output
                }], tooltipChange: [{
                    type: i0.Output
                }], valueFieldChange: [{
                    type: i0.Output
                }] });
    })();
    var DxTreeMapModule = /** @class */ (function () {
        function DxTreeMapModule() {
        }
        return DxTreeMapModule;
    }());
    /** @nocollapse */ DxTreeMapModule.ɵfac = function DxTreeMapModule_Factory(t) { return new (t || DxTreeMapModule)(); };
    /** @nocollapse */ DxTreeMapModule.ɵmod = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineNgModule({ type: DxTreeMapModule });
    /** @nocollapse */ DxTreeMapModule.ɵinj = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineInjector({ imports: [[
                nested.DxoColorizerModule,
                nested.DxoExportModule,
                nested.DxoGroupModule,
                nested.DxoBorderModule,
                nested.DxoHoverStyleModule,
                nested.DxoLabelModule,
                nested.DxoFontModule,
                nested.DxoSelectionStyleModule,
                nested.DxoLoadingIndicatorModule,
                nested.DxoSizeModule,
                nested.DxoTileModule,
                nested.DxoTitleModule,
                nested.DxoMarginModule,
                nested.DxoSubtitleModule,
                nested.DxoTooltipModule,
                nested.DxoFormatModule,
                nested.DxoShadowModule,
                i1.DxIntegrationModule,
                i1.DxTemplateModule,
                i2.BrowserTransferStateModule
            ], nested.DxoColorizerModule,
            nested.DxoExportModule,
            nested.DxoGroupModule,
            nested.DxoBorderModule,
            nested.DxoHoverStyleModule,
            nested.DxoLabelModule,
            nested.DxoFontModule,
            nested.DxoSelectionStyleModule,
            nested.DxoLoadingIndicatorModule,
            nested.DxoSizeModule,
            nested.DxoTileModule,
            nested.DxoTitleModule,
            nested.DxoMarginModule,
            nested.DxoSubtitleModule,
            nested.DxoTooltipModule,
            nested.DxoFormatModule,
            nested.DxoShadowModule,
            i1.DxTemplateModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DxTreeMapModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            nested.DxoColorizerModule,
                            nested.DxoExportModule,
                            nested.DxoGroupModule,
                            nested.DxoBorderModule,
                            nested.DxoHoverStyleModule,
                            nested.DxoLabelModule,
                            nested.DxoFontModule,
                            nested.DxoSelectionStyleModule,
                            nested.DxoLoadingIndicatorModule,
                            nested.DxoSizeModule,
                            nested.DxoTileModule,
                            nested.DxoTitleModule,
                            nested.DxoMarginModule,
                            nested.DxoSubtitleModule,
                            nested.DxoTooltipModule,
                            nested.DxoFormatModule,
                            nested.DxoShadowModule,
                            i1.DxIntegrationModule,
                            i1.DxTemplateModule,
                            i2.BrowserTransferStateModule
                        ],
                        declarations: [
                            DxTreeMapComponent
                        ],
                        exports: [
                            DxTreeMapComponent,
                            nested.DxoColorizerModule,
                            nested.DxoExportModule,
                            nested.DxoGroupModule,
                            nested.DxoBorderModule,
                            nested.DxoHoverStyleModule,
                            nested.DxoLabelModule,
                            nested.DxoFontModule,
                            nested.DxoSelectionStyleModule,
                            nested.DxoLoadingIndicatorModule,
                            nested.DxoSizeModule,
                            nested.DxoTileModule,
                            nested.DxoTitleModule,
                            nested.DxoMarginModule,
                            nested.DxoSubtitleModule,
                            nested.DxoTooltipModule,
                            nested.DxoFormatModule,
                            nested.DxoShadowModule,
                            i1.DxTemplateModule
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(DxTreeMapModule, { declarations: [DxTreeMapComponent], imports: [nested.DxoColorizerModule,
                nested.DxoExportModule,
                nested.DxoGroupModule,
                nested.DxoBorderModule,
                nested.DxoHoverStyleModule,
                nested.DxoLabelModule,
                nested.DxoFontModule,
                nested.DxoSelectionStyleModule,
                nested.DxoLoadingIndicatorModule,
                nested.DxoSizeModule,
                nested.DxoTileModule,
                nested.DxoTitleModule,
                nested.DxoMarginModule,
                nested.DxoSubtitleModule,
                nested.DxoTooltipModule,
                nested.DxoFormatModule,
                nested.DxoShadowModule,
                i1.DxIntegrationModule,
                i1.DxTemplateModule,
                i2.BrowserTransferStateModule], exports: [DxTreeMapComponent, nested.DxoColorizerModule,
                nested.DxoExportModule,
                nested.DxoGroupModule,
                nested.DxoBorderModule,
                nested.DxoHoverStyleModule,
                nested.DxoLabelModule,
                nested.DxoFontModule,
                nested.DxoSelectionStyleModule,
                nested.DxoLoadingIndicatorModule,
                nested.DxoSizeModule,
                nested.DxoTileModule,
                nested.DxoTitleModule,
                nested.DxoMarginModule,
                nested.DxoSubtitleModule,
                nested.DxoTooltipModule,
                nested.DxoFormatModule,
                nested.DxoShadowModule,
                i1.DxTemplateModule] });
    })();

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DxTreeMapComponent = DxTreeMapComponent;
    exports.DxTreeMapModule = DxTreeMapModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=devextreme-angular-ui-tree-map.umd.js.map
