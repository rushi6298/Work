(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/platform-browser'), require('@angular/core'), require('devextreme/ui/tree_view'), require('devextreme-angular/core'), require('devextreme-angular/ui/nested')) :
    typeof define === 'function' && define.amd ? define('devextreme-angular/ui/tree-view', ['exports', '@angular/platform-browser', '@angular/core', 'devextreme/ui/tree_view', 'devextreme-angular/core', 'devextreme-angular/ui/nested'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["devextreme-angular"] = global["devextreme-angular"] || {}, global["devextreme-angular"].ui = global["devextreme-angular"].ui || {}, global["devextreme-angular"].ui["tree-view"] = {}), global.ng.platformBrowser, global.ng.core, global.DxTreeView, global["devextreme-angular"].core, global["devextreme-angular"].ui.nested));
})(this, (function (exports, i2, i0, DxTreeView, i1, nested) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var DxTreeView__default = /*#__PURE__*/_interopDefaultLegacy(DxTreeView);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    function __createBinding(o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    }
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                exports[p] = m[p];
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    result[k] = mod[k];
        result.default = mod;
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * The TreeView UI component is a tree-like representation of textual data.

     */
    var DxTreeViewComponent = /** @class */ (function (_super) {
        __extends(DxTreeViewComponent, _super);
        function DxTreeViewComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
            var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;
            _this._watcherHelper = _watcherHelper;
            _this._idh = _idh;
            _this._createEventEmitters([
                { subscribe: 'contentReady', emit: 'onContentReady' },
                { subscribe: 'disposing', emit: 'onDisposing' },
                { subscribe: 'initialized', emit: 'onInitialized' },
                { subscribe: 'itemClick', emit: 'onItemClick' },
                { subscribe: 'itemCollapsed', emit: 'onItemCollapsed' },
                { subscribe: 'itemContextMenu', emit: 'onItemContextMenu' },
                { subscribe: 'itemExpanded', emit: 'onItemExpanded' },
                { subscribe: 'itemHold', emit: 'onItemHold' },
                { subscribe: 'itemRendered', emit: 'onItemRendered' },
                { subscribe: 'itemSelectionChanged', emit: 'onItemSelectionChanged' },
                { subscribe: 'optionChanged', emit: 'onOptionChanged' },
                { subscribe: 'selectAllValueChanged', emit: 'onSelectAllValueChanged' },
                { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },
                { emit: 'accessKeyChange' },
                { emit: 'activeStateEnabledChange' },
                { emit: 'animationEnabledChange' },
                { emit: 'createChildrenChange' },
                { emit: 'dataSourceChange' },
                { emit: 'dataStructureChange' },
                { emit: 'disabledChange' },
                { emit: 'disabledExprChange' },
                { emit: 'displayExprChange' },
                { emit: 'elementAttrChange' },
                { emit: 'expandAllEnabledChange' },
                { emit: 'expandedExprChange' },
                { emit: 'expandEventChange' },
                { emit: 'expandNodesRecursiveChange' },
                { emit: 'focusStateEnabledChange' },
                { emit: 'hasItemsExprChange' },
                { emit: 'heightChange' },
                { emit: 'hintChange' },
                { emit: 'hoverStateEnabledChange' },
                { emit: 'itemHoldTimeoutChange' },
                { emit: 'itemsChange' },
                { emit: 'itemsExprChange' },
                { emit: 'itemTemplateChange' },
                { emit: 'keyExprChange' },
                { emit: 'noDataTextChange' },
                { emit: 'parentIdExprChange' },
                { emit: 'rootValueChange' },
                { emit: 'rtlEnabledChange' },
                { emit: 'scrollDirectionChange' },
                { emit: 'searchEditorOptionsChange' },
                { emit: 'searchEnabledChange' },
                { emit: 'searchExprChange' },
                { emit: 'searchModeChange' },
                { emit: 'searchTimeoutChange' },
                { emit: 'searchValueChange' },
                { emit: 'selectAllTextChange' },
                { emit: 'selectByClickChange' },
                { emit: 'selectedExprChange' },
                { emit: 'selectionModeChange' },
                { emit: 'selectNodesRecursiveChange' },
                { emit: 'showCheckBoxesModeChange' },
                { emit: 'tabIndexChange' },
                { emit: 'useNativeScrollingChange' },
                { emit: 'virtualModeEnabledChange' },
                { emit: 'visibleChange' },
                { emit: 'widthChange' }
            ]);
            _this._idh.setHost(_this);
            optionHost.setHost(_this);
            return _this;
        }
        Object.defineProperty(DxTreeViewComponent.prototype, "accessKey", {
            /**
             * Specifies the shortcut key that sets focus on the UI component.
            
             */
            get: function () {
                return this._getOption('accessKey');
            },
            set: function (value) {
                this._setOption('accessKey', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "activeStateEnabled", {
            /**
             * Specifies whether the UI component changes its visual state as a result of user interaction.
            
             */
            get: function () {
                return this._getOption('activeStateEnabled');
            },
            set: function (value) {
                this._setOption('activeStateEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "animationEnabled", {
            /**
             * Specifies whether or not to animate item collapsing and expanding.
            
             */
            get: function () {
                return this._getOption('animationEnabled');
            },
            set: function (value) {
                this._setOption('animationEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "createChildren", {
            /**
             * Allows you to load nodes on demand.
            
             */
            get: function () {
                return this._getOption('createChildren');
            },
            set: function (value) {
                this._setOption('createChildren', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "dataSource", {
            /**
             * Binds the UI component to data.
            
             */
            get: function () {
                return this._getOption('dataSource');
            },
            set: function (value) {
                this._setOption('dataSource', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "dataStructure", {
            /**
             * Notifies the UI component of the used data structure.
            
             */
            get: function () {
                return this._getOption('dataStructure');
            },
            set: function (value) {
                this._setOption('dataStructure', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "disabled", {
            /**
             * Specifies whether the UI component responds to user interaction.
            
             */
            get: function () {
                return this._getOption('disabled');
            },
            set: function (value) {
                this._setOption('disabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "disabledExpr", {
            /**
             * Specifies the name of the data source item field whose value defines whether or not the corresponding UI component item is disabled.
            
             */
            get: function () {
                return this._getOption('disabledExpr');
            },
            set: function (value) {
                this._setOption('disabledExpr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "displayExpr", {
            /**
             * Specifies the data field whose values should be displayed.
            
             */
            get: function () {
                return this._getOption('displayExpr');
            },
            set: function (value) {
                this._setOption('displayExpr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "elementAttr", {
            /**
             * Specifies the global attributes to be attached to the UI component&apos;s container element.
            
             */
            get: function () {
                return this._getOption('elementAttr');
            },
            set: function (value) {
                this._setOption('elementAttr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "expandAllEnabled", {
            /**
             * Specifies whether or not a user can expand all tree view items by the &apos;*&apos; hot key.
            
             */
            get: function () {
                return this._getOption('expandAllEnabled');
            },
            set: function (value) {
                this._setOption('expandAllEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "expandedExpr", {
            /**
             * Specifies which data source field specifies whether an item is expanded.
            
             */
            get: function () {
                return this._getOption('expandedExpr');
            },
            set: function (value) {
                this._setOption('expandedExpr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "expandEvent", {
            /**
             * Specifies the event on which to expand/collapse a node.
            
             */
            get: function () {
                return this._getOption('expandEvent');
            },
            set: function (value) {
                this._setOption('expandEvent', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "expandNodesRecursive", {
            /**
             * Specifies whether or not all parent nodes of an initially expanded node are displayed expanded.
            
             */
            get: function () {
                return this._getOption('expandNodesRecursive');
            },
            set: function (value) {
                this._setOption('expandNodesRecursive', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "focusStateEnabled", {
            /**
             * Specifies whether the UI component can be focused using keyboard navigation.
            
             */
            get: function () {
                return this._getOption('focusStateEnabled');
            },
            set: function (value) {
                this._setOption('focusStateEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "hasItemsExpr", {
            /**
             * Specifies the name of the data source item field whose value defines whether or not the corresponding node includes child nodes.
            
             */
            get: function () {
                return this._getOption('hasItemsExpr');
            },
            set: function (value) {
                this._setOption('hasItemsExpr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "height", {
            /**
             * Specifies the UI component&apos;s height.
            
             */
            get: function () {
                return this._getOption('height');
            },
            set: function (value) {
                this._setOption('height', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "hint", {
            /**
             * Specifies text for a hint that appears when a user pauses on the UI component.
            
             */
            get: function () {
                return this._getOption('hint');
            },
            set: function (value) {
                this._setOption('hint', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "hoverStateEnabled", {
            /**
             * Specifies whether the UI component changes its state when a user pauses on it.
            
             */
            get: function () {
                return this._getOption('hoverStateEnabled');
            },
            set: function (value) {
                this._setOption('hoverStateEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "itemHoldTimeout", {
            /**
             * The time period in milliseconds before the onItemHold event is raised.
            
             */
            get: function () {
                return this._getOption('itemHoldTimeout');
            },
            set: function (value) {
                this._setOption('itemHoldTimeout', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "items", {
            /**
             * An array of items displayed by the UI component.
            
             */
            get: function () {
                return this._getOption('items');
            },
            set: function (value) {
                this._setOption('items', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "itemsExpr", {
            /**
             * Specifies which data field contains nested items.
            
             */
            get: function () {
                return this._getOption('itemsExpr');
            },
            set: function (value) {
                this._setOption('itemsExpr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "itemTemplate", {
            /**
             * Specifies a custom template for items.
            
             */
            get: function () {
                return this._getOption('itemTemplate');
            },
            set: function (value) {
                this._setOption('itemTemplate', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "keyExpr", {
            /**
             * Specifies which data field provides keys for TreeView items.
            
             */
            get: function () {
                return this._getOption('keyExpr');
            },
            set: function (value) {
                this._setOption('keyExpr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "noDataText", {
            /**
             * Specifies the text or HTML markup displayed by the UI component if the item collection is empty.
            
             */
            get: function () {
                return this._getOption('noDataText');
            },
            set: function (value) {
                this._setOption('noDataText', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "parentIdExpr", {
            /**
             * Specifies the name of the data source item field for holding the parent key of the corresponding node.
            
             */
            get: function () {
                return this._getOption('parentIdExpr');
            },
            set: function (value) {
                this._setOption('parentIdExpr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "rootValue", {
            /**
             * Specifies the parent ID value of the root item.
            
             */
            get: function () {
                return this._getOption('rootValue');
            },
            set: function (value) {
                this._setOption('rootValue', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "rtlEnabled", {
            /**
             * Switches the UI component to a right-to-left representation.
            
             */
            get: function () {
                return this._getOption('rtlEnabled');
            },
            set: function (value) {
                this._setOption('rtlEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "scrollDirection", {
            /**
             * A string value specifying available scrolling directions.
            
             */
            get: function () {
                return this._getOption('scrollDirection');
            },
            set: function (value) {
                this._setOption('scrollDirection', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "searchEditorOptions", {
            /**
             * Configures the search panel.
            
             */
            get: function () {
                return this._getOption('searchEditorOptions');
            },
            set: function (value) {
                this._setOption('searchEditorOptions', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "searchEnabled", {
            /**
             * Specifies whether the search panel is visible.
            
             */
            get: function () {
                return this._getOption('searchEnabled');
            },
            set: function (value) {
                this._setOption('searchEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "searchExpr", {
            /**
             * Specifies a data object&apos;s field name or an expression whose value is compared to the search string.
            
             */
            get: function () {
                return this._getOption('searchExpr');
            },
            set: function (value) {
                this._setOption('searchExpr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "searchMode", {
            /**
             * Specifies a comparison operation used to search UI component items.
            
             */
            get: function () {
                return this._getOption('searchMode');
            },
            set: function (value) {
                this._setOption('searchMode', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "searchTimeout", {
            /**
             * Specifies a delay in milliseconds between when a user finishes typing, and the search is executed.
            
             */
            get: function () {
                return this._getOption('searchTimeout');
            },
            set: function (value) {
                this._setOption('searchTimeout', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "searchValue", {
            /**
             * Specifies the current search string.
            
             */
            get: function () {
                return this._getOption('searchValue');
            },
            set: function (value) {
                this._setOption('searchValue', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "selectAllText", {
            /**
             * Specifies the text displayed at the &apos;Select All&apos; check box.
            
             */
            get: function () {
                return this._getOption('selectAllText');
            },
            set: function (value) {
                this._setOption('selectAllText', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "selectByClick", {
            /**
             * Specifies whether an item becomes selected if a user clicks it.
            
             */
            get: function () {
                return this._getOption('selectByClick');
            },
            set: function (value) {
                this._setOption('selectByClick', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "selectedExpr", {
            /**
             * Specifies the name of the data source item field whose value defines whether or not the corresponding UI component items is selected.
            
             */
            get: function () {
                return this._getOption('selectedExpr');
            },
            set: function (value) {
                this._setOption('selectedExpr', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "selectionMode", {
            /**
             * Specifies item selection mode. Applies only if selection is enabled.
            
             */
            get: function () {
                return this._getOption('selectionMode');
            },
            set: function (value) {
                this._setOption('selectionMode', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "selectNodesRecursive", {
            /**
             * Specifies whether all child nodes should be selected when their parent node is selected. Applies only if the selectionMode is &apos;multiple&apos;.
            
             */
            get: function () {
                return this._getOption('selectNodesRecursive');
            },
            set: function (value) {
                this._setOption('selectNodesRecursive', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "showCheckBoxesMode", {
            /**
             * Specifies the checkbox display mode.
            
             */
            get: function () {
                return this._getOption('showCheckBoxesMode');
            },
            set: function (value) {
                this._setOption('showCheckBoxesMode', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "tabIndex", {
            /**
             * Specifies the number of the element when the Tab key is used for navigating.
            
             */
            get: function () {
                return this._getOption('tabIndex');
            },
            set: function (value) {
                this._setOption('tabIndex', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "useNativeScrolling", {
            /**
             * Specifies whether or not the UI component uses native scrolling.
            
             */
            get: function () {
                return this._getOption('useNativeScrolling');
            },
            set: function (value) {
                this._setOption('useNativeScrolling', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "virtualModeEnabled", {
            /**
             * Enables the virtual mode in which nodes are loaded on demand. Use it to enhance the performance on large datasets.
            
             */
            get: function () {
                return this._getOption('virtualModeEnabled');
            },
            set: function (value) {
                this._setOption('virtualModeEnabled', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "visible", {
            /**
             * Specifies whether the UI component is visible.
            
             */
            get: function () {
                return this._getOption('visible');
            },
            set: function (value) {
                this._setOption('visible', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "width", {
            /**
             * Specifies the UI component&apos;s width.
            
             */
            get: function () {
                return this._getOption('width');
            },
            set: function (value) {
                this._setOption('width', value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DxTreeViewComponent.prototype, "itemsChildren", {
            get: function () {
                return this._getOption('items');
            },
            set: function (value) {
                this.setChildren('items', value);
            },
            enumerable: false,
            configurable: true
        });
        DxTreeViewComponent.prototype._createInstance = function (element, options) {
            return new DxTreeView__default["default"](element, options);
        };
        DxTreeViewComponent.prototype.ngOnDestroy = function () {
            this._destroyWidget();
        };
        DxTreeViewComponent.prototype.ngOnChanges = function (changes) {
            _super.prototype.ngOnChanges.call(this, changes);
            this.setupChanges('dataSource', changes);
            this.setupChanges('items', changes);
            this.setupChanges('searchExpr', changes);
        };
        DxTreeViewComponent.prototype.setupChanges = function (prop, changes) {
            if (!(prop in this._optionsToUpdate)) {
                this._idh.setup(prop, changes);
            }
        };
        DxTreeViewComponent.prototype.ngDoCheck = function () {
            this._idh.doCheck('dataSource');
            this._idh.doCheck('items');
            this._idh.doCheck('searchExpr');
            this._watcherHelper.checkWatchers();
            _super.prototype.ngDoCheck.call(this);
            _super.prototype.clearChangedOptions.call(this);
        };
        DxTreeViewComponent.prototype._setOption = function (name, value) {
            var isSetup = this._idh.setupSingle(name, value);
            var isChanged = this._idh.getChanges(name, value) !== null;
            if (isSetup || isChanged) {
                _super.prototype._setOption.call(this, name, value);
            }
        };
        return DxTreeViewComponent;
    }(i1.DxComponent));
    /** @nocollapse */ DxTreeViewComponent.ɵfac = function DxTreeViewComponent_Factory(t) { return new (t || DxTreeViewComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef), i0__namespace.ɵɵdirectiveInject(i0__namespace.NgZone), i0__namespace.ɵɵdirectiveInject(i1__namespace.DxTemplateHost), i0__namespace.ɵɵdirectiveInject(i1__namespace.WatcherHelper), i0__namespace.ɵɵdirectiveInject(i1__namespace.IterableDifferHelper), i0__namespace.ɵɵdirectiveInject(i1__namespace.NestedOptionHost), i0__namespace.ɵɵdirectiveInject(i2__namespace.TransferState), i0__namespace.ɵɵdirectiveInject(i0.PLATFORM_ID)); };
    /** @nocollapse */ DxTreeViewComponent.ɵcmp = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineComponent({ type: DxTreeViewComponent, selectors: [["dx-tree-view"]], contentQueries: function DxTreeViewComponent_ContentQueries(rf, ctx, dirIndex) {
            if (rf & 1) {
                i0__namespace.ɵɵcontentQuery(dirIndex, nested.DxiItemComponent, 4);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.itemsChildren = _t);
            }
        }, inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", animationEnabled: "animationEnabled", createChildren: "createChildren", dataSource: "dataSource", dataStructure: "dataStructure", disabled: "disabled", disabledExpr: "disabledExpr", displayExpr: "displayExpr", elementAttr: "elementAttr", expandAllEnabled: "expandAllEnabled", expandedExpr: "expandedExpr", expandEvent: "expandEvent", expandNodesRecursive: "expandNodesRecursive", focusStateEnabled: "focusStateEnabled", hasItemsExpr: "hasItemsExpr", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", itemHoldTimeout: "itemHoldTimeout", items: "items", itemsExpr: "itemsExpr", itemTemplate: "itemTemplate", keyExpr: "keyExpr", noDataText: "noDataText", parentIdExpr: "parentIdExpr", rootValue: "rootValue", rtlEnabled: "rtlEnabled", scrollDirection: "scrollDirection", searchEditorOptions: "searchEditorOptions", searchEnabled: "searchEnabled", searchExpr: "searchExpr", searchMode: "searchMode", searchTimeout: "searchTimeout", searchValue: "searchValue", selectAllText: "selectAllText", selectByClick: "selectByClick", selectedExpr: "selectedExpr", selectionMode: "selectionMode", selectNodesRecursive: "selectNodesRecursive", showCheckBoxesMode: "showCheckBoxesMode", tabIndex: "tabIndex", useNativeScrolling: "useNativeScrolling", virtualModeEnabled: "virtualModeEnabled", visible: "visible", width: "width" }, outputs: { onContentReady: "onContentReady", onDisposing: "onDisposing", onInitialized: "onInitialized", onItemClick: "onItemClick", onItemCollapsed: "onItemCollapsed", onItemContextMenu: "onItemContextMenu", onItemExpanded: "onItemExpanded", onItemHold: "onItemHold", onItemRendered: "onItemRendered", onItemSelectionChanged: "onItemSelectionChanged", onOptionChanged: "onOptionChanged", onSelectAllValueChanged: "onSelectAllValueChanged", onSelectionChanged: "onSelectionChanged", accessKeyChange: "accessKeyChange", activeStateEnabledChange: "activeStateEnabledChange", animationEnabledChange: "animationEnabledChange", createChildrenChange: "createChildrenChange", dataSourceChange: "dataSourceChange", dataStructureChange: "dataStructureChange", disabledChange: "disabledChange", disabledExprChange: "disabledExprChange", displayExprChange: "displayExprChange", elementAttrChange: "elementAttrChange", expandAllEnabledChange: "expandAllEnabledChange", expandedExprChange: "expandedExprChange", expandEventChange: "expandEventChange", expandNodesRecursiveChange: "expandNodesRecursiveChange", focusStateEnabledChange: "focusStateEnabledChange", hasItemsExprChange: "hasItemsExprChange", heightChange: "heightChange", hintChange: "hintChange", hoverStateEnabledChange: "hoverStateEnabledChange", itemHoldTimeoutChange: "itemHoldTimeoutChange", itemsChange: "itemsChange", itemsExprChange: "itemsExprChange", itemTemplateChange: "itemTemplateChange", keyExprChange: "keyExprChange", noDataTextChange: "noDataTextChange", parentIdExprChange: "parentIdExprChange", rootValueChange: "rootValueChange", rtlEnabledChange: "rtlEnabledChange", scrollDirectionChange: "scrollDirectionChange", searchEditorOptionsChange: "searchEditorOptionsChange", searchEnabledChange: "searchEnabledChange", searchExprChange: "searchExprChange", searchModeChange: "searchModeChange", searchTimeoutChange: "searchTimeoutChange", searchValueChange: "searchValueChange", selectAllTextChange: "selectAllTextChange", selectByClickChange: "selectByClickChange", selectedExprChange: "selectedExprChange", selectionModeChange: "selectionModeChange", selectNodesRecursiveChange: "selectNodesRecursiveChange", showCheckBoxesModeChange: "showCheckBoxesModeChange", tabIndexChange: "tabIndexChange", useNativeScrollingChange: "useNativeScrollingChange", virtualModeEnabledChange: "virtualModeEnabledChange", visibleChange: "visibleChange", widthChange: "widthChange" }, features: [i0__namespace.ɵɵProvidersFeature([
                i1.DxTemplateHost,
                i1.WatcherHelper,
                i1.NestedOptionHost,
                i1.IterableDifferHelper
            ]), i0__namespace.ɵɵInheritDefinitionFeature, i0__namespace.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function DxTreeViewComponent_Template(rf, ctx) { }, encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DxTreeViewComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'dx-tree-view',
                        template: '',
                        providers: [
                            i1.DxTemplateHost,
                            i1.WatcherHelper,
                            i1.NestedOptionHost,
                            i1.IterableDifferHelper
                        ]
                    }]
            }], function () {
            return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.NgZone }, { type: i1__namespace.DxTemplateHost }, { type: i1__namespace.WatcherHelper }, { type: i1__namespace.IterableDifferHelper }, { type: i1__namespace.NestedOptionHost }, { type: i2__namespace.TransferState }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.PLATFORM_ID]
                        }] }];
        }, { accessKey: [{
                    type: i0.Input
                }], activeStateEnabled: [{
                    type: i0.Input
                }], animationEnabled: [{
                    type: i0.Input
                }], createChildren: [{
                    type: i0.Input
                }], dataSource: [{
                    type: i0.Input
                }], dataStructure: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], disabledExpr: [{
                    type: i0.Input
                }], displayExpr: [{
                    type: i0.Input
                }], elementAttr: [{
                    type: i0.Input
                }], expandAllEnabled: [{
                    type: i0.Input
                }], expandedExpr: [{
                    type: i0.Input
                }], expandEvent: [{
                    type: i0.Input
                }], expandNodesRecursive: [{
                    type: i0.Input
                }], focusStateEnabled: [{
                    type: i0.Input
                }], hasItemsExpr: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hoverStateEnabled: [{
                    type: i0.Input
                }], itemHoldTimeout: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], itemsExpr: [{
                    type: i0.Input
                }], itemTemplate: [{
                    type: i0.Input
                }], keyExpr: [{
                    type: i0.Input
                }], noDataText: [{
                    type: i0.Input
                }], parentIdExpr: [{
                    type: i0.Input
                }], rootValue: [{
                    type: i0.Input
                }], rtlEnabled: [{
                    type: i0.Input
                }], scrollDirection: [{
                    type: i0.Input
                }], searchEditorOptions: [{
                    type: i0.Input
                }], searchEnabled: [{
                    type: i0.Input
                }], searchExpr: [{
                    type: i0.Input
                }], searchMode: [{
                    type: i0.Input
                }], searchTimeout: [{
                    type: i0.Input
                }], searchValue: [{
                    type: i0.Input
                }], selectAllText: [{
                    type: i0.Input
                }], selectByClick: [{
                    type: i0.Input
                }], selectedExpr: [{
                    type: i0.Input
                }], selectionMode: [{
                    type: i0.Input
                }], selectNodesRecursive: [{
                    type: i0.Input
                }], showCheckBoxesMode: [{
                    type: i0.Input
                }], tabIndex: [{
                    type: i0.Input
                }], useNativeScrolling: [{
                    type: i0.Input
                }], virtualModeEnabled: [{
                    type: i0.Input
                }], visible: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], onContentReady: [{
                    type: i0.Output
                }], onDisposing: [{
                    type: i0.Output
                }], onInitialized: [{
                    type: i0.Output
                }], onItemClick: [{
                    type: i0.Output
                }], onItemCollapsed: [{
                    type: i0.Output
                }], onItemContextMenu: [{
                    type: i0.Output
                }], onItemExpanded: [{
                    type: i0.Output
                }], onItemHold: [{
                    type: i0.Output
                }], onItemRendered: [{
                    type: i0.Output
                }], onItemSelectionChanged: [{
                    type: i0.Output
                }], onOptionChanged: [{
                    type: i0.Output
                }], onSelectAllValueChanged: [{
                    type: i0.Output
                }], onSelectionChanged: [{
                    type: i0.Output
                }], accessKeyChange: [{
                    type: i0.Output
                }], activeStateEnabledChange: [{
                    type: i0.Output
                }], animationEnabledChange: [{
                    type: i0.Output
                }], createChildrenChange: [{
                    type: i0.Output
                }], dataSourceChange: [{
                    type: i0.Output
                }], dataStructureChange: [{
                    type: i0.Output
                }], disabledChange: [{
                    type: i0.Output
                }], disabledExprChange: [{
                    type: i0.Output
                }], displayExprChange: [{
                    type: i0.Output
                }], elementAttrChange: [{
                    type: i0.Output
                }], expandAllEnabledChange: [{
                    type: i0.Output
                }], expandedExprChange: [{
                    type: i0.Output
                }], expandEventChange: [{
                    type: i0.Output
                }], expandNodesRecursiveChange: [{
                    type: i0.Output
                }], focusStateEnabledChange: [{
                    type: i0.Output
                }], hasItemsExprChange: [{
                    type: i0.Output
                }], heightChange: [{
                    type: i0.Output
                }], hintChange: [{
                    type: i0.Output
                }], hoverStateEnabledChange: [{
                    type: i0.Output
                }], itemHoldTimeoutChange: [{
                    type: i0.Output
                }], itemsChange: [{
                    type: i0.Output
                }], itemsExprChange: [{
                    type: i0.Output
                }], itemTemplateChange: [{
                    type: i0.Output
                }], keyExprChange: [{
                    type: i0.Output
                }], noDataTextChange: [{
                    type: i0.Output
                }], parentIdExprChange: [{
                    type: i0.Output
                }], rootValueChange: [{
                    type: i0.Output
                }], rtlEnabledChange: [{
                    type: i0.Output
                }], scrollDirectionChange: [{
                    type: i0.Output
                }], searchEditorOptionsChange: [{
                    type: i0.Output
                }], searchEnabledChange: [{
                    type: i0.Output
                }], searchExprChange: [{
                    type: i0.Output
                }], searchModeChange: [{
                    type: i0.Output
                }], searchTimeoutChange: [{
                    type: i0.Output
                }], searchValueChange: [{
                    type: i0.Output
                }], selectAllTextChange: [{
                    type: i0.Output
                }], selectByClickChange: [{
                    type: i0.Output
                }], selectedExprChange: [{
                    type: i0.Output
                }], selectionModeChange: [{
                    type: i0.Output
                }], selectNodesRecursiveChange: [{
                    type: i0.Output
                }], showCheckBoxesModeChange: [{
                    type: i0.Output
                }], tabIndexChange: [{
                    type: i0.Output
                }], useNativeScrollingChange: [{
                    type: i0.Output
                }], virtualModeEnabledChange: [{
                    type: i0.Output
                }], visibleChange: [{
                    type: i0.Output
                }], widthChange: [{
                    type: i0.Output
                }], itemsChildren: [{
                    type: i0.ContentChildren,
                    args: [nested.DxiItemComponent]
                }] });
    })();
    var DxTreeViewModule = /** @class */ (function () {
        function DxTreeViewModule() {
        }
        return DxTreeViewModule;
    }());
    /** @nocollapse */ DxTreeViewModule.ɵfac = function DxTreeViewModule_Factory(t) { return new (t || DxTreeViewModule)(); };
    /** @nocollapse */ DxTreeViewModule.ɵmod = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineNgModule({ type: DxTreeViewModule });
    /** @nocollapse */ DxTreeViewModule.ɵinj = /** @pureOrBreakMyCode */ i0__namespace.ɵɵdefineInjector({ imports: [[
                nested.DxiItemModule,
                nested.DxoSearchEditorOptionsModule,
                nested.DxiButtonModule,
                nested.DxoOptionsModule,
                i1.DxIntegrationModule,
                i1.DxTemplateModule,
                i2.BrowserTransferStateModule
            ], nested.DxiItemModule,
            nested.DxoSearchEditorOptionsModule,
            nested.DxiButtonModule,
            nested.DxoOptionsModule,
            i1.DxTemplateModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DxTreeViewModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            nested.DxiItemModule,
                            nested.DxoSearchEditorOptionsModule,
                            nested.DxiButtonModule,
                            nested.DxoOptionsModule,
                            i1.DxIntegrationModule,
                            i1.DxTemplateModule,
                            i2.BrowserTransferStateModule
                        ],
                        declarations: [
                            DxTreeViewComponent
                        ],
                        exports: [
                            DxTreeViewComponent,
                            nested.DxiItemModule,
                            nested.DxoSearchEditorOptionsModule,
                            nested.DxiButtonModule,
                            nested.DxoOptionsModule,
                            i1.DxTemplateModule
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(DxTreeViewModule, { declarations: [DxTreeViewComponent], imports: [nested.DxiItemModule,
                nested.DxoSearchEditorOptionsModule,
                nested.DxiButtonModule,
                nested.DxoOptionsModule,
                i1.DxIntegrationModule,
                i1.DxTemplateModule,
                i2.BrowserTransferStateModule], exports: [DxTreeViewComponent, nested.DxiItemModule,
                nested.DxoSearchEditorOptionsModule,
                nested.DxiButtonModule,
                nested.DxoOptionsModule,
                i1.DxTemplateModule] });
    })();

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DxTreeViewComponent = DxTreeViewComponent;
    exports.DxTreeViewModule = DxTreeViewModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=devextreme-angular-ui-tree-view.umd.js.map
