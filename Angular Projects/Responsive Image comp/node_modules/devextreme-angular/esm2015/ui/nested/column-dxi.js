/*!
 * devextreme-angular
 * Version: 22.2.13
 * Build date: Fri Aug 09 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf, Output, ContentChildren, forwardRef } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxiDataGridColumn } from './base/data-grid-column-dxi';
import { DxiButtonComponent } from './button-dxi';
import { DxiValidationRuleComponent } from './validation-rule-dxi';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
export class DxiColumnComponent extends DxiDataGridColumn {
    constructor(parentOptionHost, optionHost) {
        super();
        this._createEventEmitters([
            { emit: 'filterValueChange' },
            { emit: 'filterValuesChange' },
            { emit: 'groupIndexChange' },
            { emit: 'selectedFilterOperationChange' },
            { emit: 'sortIndexChange' },
            { emit: 'sortOrderChange' },
            { emit: 'visibleChange' },
            { emit: 'visibleIndexChange' }
        ]);
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    get _optionPath() {
        return 'columns';
    }
    get buttonsChildren() {
        return this._getOption('buttons');
    }
    set buttonsChildren(value) {
        this.setChildren('buttons', value);
    }
    get columnsChildren() {
        return this._getOption('columns');
    }
    set columnsChildren(value) {
        this.setChildren('columns', value);
    }
    get validationRulesChildren() {
        return this._getOption('validationRules');
    }
    set validationRulesChildren(value) {
        this.setChildren('validationRules', value);
    }
    ngOnDestroy() {
        this._deleteRemovedOptions(this._fullOptionPath());
    }
}
/** @nocollapse */ DxiColumnComponent.ɵfac = function DxiColumnComponent_Factory(t) { return new (t || DxiColumnComponent)(i0.ɵɵdirectiveInject(i1.NestedOptionHost, 5), i0.ɵɵdirectiveInject(i1.NestedOptionHost, 1)); };
/** @nocollapse */ DxiColumnComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: DxiColumnComponent, selectors: [["dxi-column"]], contentQueries: function DxiColumnComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, DxiButtonComponent, 4);
        i0.ɵɵcontentQuery(dirIndex, DxiColumnComponent, 4);
        i0.ɵɵcontentQuery(dirIndex, DxiValidationRuleComponent, 4);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.buttonsChildren = _t);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnsChildren = _t);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.validationRulesChildren = _t);
    } }, inputs: { alignment: "alignment", allowEditing: "allowEditing", allowExporting: "allowExporting", allowFiltering: "allowFiltering", allowFixing: "allowFixing", allowGrouping: "allowGrouping", allowHeaderFiltering: "allowHeaderFiltering", allowHiding: "allowHiding", allowReordering: "allowReordering", allowResizing: "allowResizing", allowSearch: "allowSearch", allowSorting: "allowSorting", autoExpandGroup: "autoExpandGroup", buttons: "buttons", calculateCellValue: "calculateCellValue", calculateDisplayValue: "calculateDisplayValue", calculateFilterExpression: "calculateFilterExpression", calculateGroupValue: "calculateGroupValue", calculateSortValue: "calculateSortValue", caption: "caption", cellTemplate: "cellTemplate", columns: "columns", cssClass: "cssClass", customizeText: "customizeText", dataField: "dataField", dataType: "dataType", editCellTemplate: "editCellTemplate", editorOptions: "editorOptions", encodeHtml: "encodeHtml", falseText: "falseText", filterOperations: "filterOperations", filterType: "filterType", filterValue: "filterValue", filterValues: "filterValues", fixed: "fixed", fixedPosition: "fixedPosition", format: "format", formItem: "formItem", groupCellTemplate: "groupCellTemplate", groupIndex: "groupIndex", headerCellTemplate: "headerCellTemplate", headerFilter: "headerFilter", hidingPriority: "hidingPriority", isBand: "isBand", lookup: "lookup", minWidth: "minWidth", name: "name", ownerBand: "ownerBand", renderAsync: "renderAsync", selectedFilterOperation: "selectedFilterOperation", setCellValue: "setCellValue", showEditorAlways: "showEditorAlways", showInColumnChooser: "showInColumnChooser", showWhenGrouped: "showWhenGrouped", sortIndex: "sortIndex", sortingMethod: "sortingMethod", sortOrder: "sortOrder", trueText: "trueText", type: "type", validationRules: "validationRules", visible: "visible", visibleIndex: "visibleIndex", width: "width" }, outputs: { filterValueChange: "filterValueChange", filterValuesChange: "filterValuesChange", groupIndexChange: "groupIndexChange", selectedFilterOperationChange: "selectedFilterOperationChange", sortIndexChange: "sortIndexChange", sortOrderChange: "sortOrderChange", visibleChange: "visibleChange", visibleIndexChange: "visibleIndexChange" }, features: [i0.ɵɵProvidersFeature([NestedOptionHost]), i0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiColumnComponent_Template(rf, ctx) { }, styles: [""] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DxiColumnComponent, [{
        type: Component,
        args: [{
                selector: 'dxi-column',
                template: '',
                styles: [''],
                providers: [NestedOptionHost],
                inputs: [
                    'alignment',
                    'allowEditing',
                    'allowExporting',
                    'allowFiltering',
                    'allowFixing',
                    'allowGrouping',
                    'allowHeaderFiltering',
                    'allowHiding',
                    'allowReordering',
                    'allowResizing',
                    'allowSearch',
                    'allowSorting',
                    'autoExpandGroup',
                    'buttons',
                    'calculateCellValue',
                    'calculateDisplayValue',
                    'calculateFilterExpression',
                    'calculateGroupValue',
                    'calculateSortValue',
                    'caption',
                    'cellTemplate',
                    'columns',
                    'cssClass',
                    'customizeText',
                    'dataField',
                    'dataType',
                    'editCellTemplate',
                    'editorOptions',
                    'encodeHtml',
                    'falseText',
                    'filterOperations',
                    'filterType',
                    'filterValue',
                    'filterValues',
                    'fixed',
                    'fixedPosition',
                    'format',
                    'formItem',
                    'groupCellTemplate',
                    'groupIndex',
                    'headerCellTemplate',
                    'headerFilter',
                    'hidingPriority',
                    'isBand',
                    'lookup',
                    'minWidth',
                    'name',
                    'ownerBand',
                    'renderAsync',
                    'selectedFilterOperation',
                    'setCellValue',
                    'showEditorAlways',
                    'showInColumnChooser',
                    'showWhenGrouped',
                    'sortIndex',
                    'sortingMethod',
                    'sortOrder',
                    'trueText',
                    'type',
                    'validationRules',
                    'visible',
                    'visibleIndex',
                    'width'
                ]
            }]
    }], function () { return [{ type: i1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: i1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, { filterValueChange: [{
            type: Output
        }], filterValuesChange: [{
            type: Output
        }], groupIndexChange: [{
            type: Output
        }], selectedFilterOperationChange: [{
            type: Output
        }], sortIndexChange: [{
            type: Output
        }], sortOrderChange: [{
            type: Output
        }], visibleChange: [{
            type: Output
        }], visibleIndexChange: [{
            type: Output
        }], buttonsChildren: [{
            type: ContentChildren,
            args: [forwardRef(() => DxiButtonComponent)]
        }], columnsChildren: [{
            type: ContentChildren,
            args: [forwardRef(() => DxiColumnComponent)]
        }], validationRulesChildren: [{
            type: ContentChildren,
            args: [forwardRef(() => DxiValidationRuleComponent)]
        }] }); })();
export class DxiColumnModule {
}
/** @nocollapse */ DxiColumnModule.ɵfac = function DxiColumnModule_Factory(t) { return new (t || DxiColumnModule)(); };
/** @nocollapse */ DxiColumnModule.ɵmod = /** @pureOrBreakMyCode */ i0.ɵɵdefineNgModule({ type: DxiColumnModule });
/** @nocollapse */ DxiColumnModule.ɵinj = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DxiColumnModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxiColumnComponent
                ],
                exports: [
                    DxiColumnComponent
                ],
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxiColumnModule, { declarations: [DxiColumnComponent], exports: [DxiColumnComponent] }); })();
//# sourceMappingURL=data:application/json;base64,