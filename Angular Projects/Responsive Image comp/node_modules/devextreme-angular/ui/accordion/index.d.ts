import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import DxAccordion from 'devextreme/ui/accordion';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiItemComponent } from 'devextreme-angular/ui/nested';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
import * as i3 from "@angular/platform-browser";
export { ExplicitTypes } from 'devextreme/ui/accordion';
/**
 * The Accordion UI component contains several panels displayed one under another. These panels can be collapsed or expanded by an end user, which makes this UI component very useful for presenting information in a limited amount of space.

 */
export declare class DxAccordionComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxAccordion;
    /**
     * Specifies the shortcut key that sets focus on the UI component.
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * Specifies whether the UI component changes its visual state as a result of user interaction.
    
     */
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    /**
     * A number specifying the time in milliseconds spent on the animation of the expanding or collapsing of a panel.
    
     */
    get animationDuration(): number;
    set animationDuration(value: number);
    /**
     * Specifies whether all items can be collapsed or whether at least one item must always be expanded.
    
     */
    get collapsible(): boolean;
    set collapsible(value: boolean);
    /**
     * Binds the UI component to data.
    
     */
    get dataSource(): DataSource | DataSourceOptions | Store | null | string | Array<string | DevExpress.ui.dxAccordionItem | any>;
    set dataSource(value: DataSource | DataSourceOptions | Store | null | string | Array<string | DevExpress.ui.dxAccordionItem | any>);
    /**
     * Specifies whether to render the panel&apos;s content when it is displayed. If false, the content is rendered immediately.
    
     */
    get deferRendering(): boolean;
    set deferRendering(value: boolean);
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * Specifies text for a hint that appears when a user pauses on the UI component.
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * The time period in milliseconds before the onItemHold event is raised.
    
     */
    get itemHoldTimeout(): number;
    set itemHoldTimeout(value: number);
    /**
     * An array of items displayed by the UI component.
    
     */
    get items(): Array<string | any | {
        disabled?: boolean;
        html?: string;
        icon?: string;
        template?: any;
        text?: string;
        title?: string;
        titleTemplate?: any;
        visible?: boolean;
    }>;
    set items(value: Array<string | any | {
        disabled?: boolean;
        html?: string;
        icon?: string;
        template?: any;
        text?: string;
        title?: string;
        titleTemplate?: any;
        visible?: boolean;
    }>);
    /**
     * Specifies a custom template for items.
    
     */
    get itemTemplate(): any;
    set itemTemplate(value: any);
    /**
     * Specifies a custom template for item titles.
    
     */
    get itemTitleTemplate(): any;
    set itemTitleTemplate(value: any);
    /**
     * Specifies the key property that provides key values to access data items. Each key value must be unique.
    
     */
    get keyExpr(): Function | string;
    set keyExpr(value: Function | string);
    /**
     * Specifies whether the UI component can expand several items or only a single item at once.
    
     */
    get multiple(): boolean;
    set multiple(value: boolean);
    /**
     * Specifies the text or HTML markup displayed by the UI component if the item collection is empty.
    
     */
    get noDataText(): string;
    set noDataText(value: string);
    /**
     * Specifies whether to repaint only those elements whose data changed.
    
     */
    get repaintChangesOnly(): boolean;
    set repaintChangesOnly(value: boolean);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * The index number of the currently expanded item.
    
     */
    get selectedIndex(): number;
    set selectedIndex(value: number);
    /**
     * The selected item object.
    
     */
    get selectedItem(): any;
    set selectedItem(value: any);
    /**
     * Specifies an array of currently selected item keys.
    
     */
    get selectedItemKeys(): Array<any>;
    set selectedItemKeys(value: Array<any>);
    /**
     * An array of currently selected item objects.
    
     */
    get selectedItems(): Array<any>;
    set selectedItems(value: Array<any>);
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * Specifies whether the UI component is visible.
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
    
     * A function that is executed when the UI component is rendered and each time the component is repainted.
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed when a collection item is clicked or tapped.
    
    
     */
    onItemClick: EventEmitter<any>;
    /**
    
     * A function that is executed when a collection item is right-clicked or pressed.
    
    
     */
    onItemContextMenu: EventEmitter<any>;
    /**
    
     * A function that is executed when a collection item has been held for a specified period.
    
    
     */
    onItemHold: EventEmitter<any>;
    /**
    
     * A function that is executed after a collection item is rendered.
    
    
     */
    onItemRendered: EventEmitter<any>;
    /**
    
     * A function that is executed when an accordion item&apos;s title is clicked or tapped.
    
    
     */
    onItemTitleClick: EventEmitter<any>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed when a collection item is selected or selection is canceled.
    
    
     */
    onSelectionChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationDurationChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    collapsibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DataSource | DataSourceOptions | Store | null | string | Array<string | DevExpress.ui.dxAccordionItem | any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    deferRenderingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemHoldTimeoutChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsChange: EventEmitter<Array<string | any | {
        disabled?: boolean;
        html?: string;
        icon?: string;
        template?: any;
        text?: string;
        title?: string;
        titleTemplate?: any;
        visible?: boolean;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemTitleTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    keyExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    multipleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    noDataTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    repaintChangesOnlyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemKeysChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemsChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    get itemsChildren(): QueryList<DxiItemComponent>;
    set itemsChildren(value: QueryList<DxiItemComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxAccordion<any, any>;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxAccordionComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxAccordionComponent, "dx-accordion", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "animationDuration": "animationDuration"; "collapsible": "collapsible"; "dataSource": "dataSource"; "deferRendering": "deferRendering"; "disabled": "disabled"; "elementAttr": "elementAttr"; "focusStateEnabled": "focusStateEnabled"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "itemHoldTimeout": "itemHoldTimeout"; "items": "items"; "itemTemplate": "itemTemplate"; "itemTitleTemplate": "itemTitleTemplate"; "keyExpr": "keyExpr"; "multiple": "multiple"; "noDataText": "noDataText"; "repaintChangesOnly": "repaintChangesOnly"; "rtlEnabled": "rtlEnabled"; "selectedIndex": "selectedIndex"; "selectedItem": "selectedItem"; "selectedItemKeys": "selectedItemKeys"; "selectedItems": "selectedItems"; "tabIndex": "tabIndex"; "visible": "visible"; "width": "width"; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onItemClick": "onItemClick"; "onItemContextMenu": "onItemContextMenu"; "onItemHold": "onItemHold"; "onItemRendered": "onItemRendered"; "onItemTitleClick": "onItemTitleClick"; "onOptionChanged": "onOptionChanged"; "onSelectionChanged": "onSelectionChanged"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "animationDurationChange": "animationDurationChange"; "collapsibleChange": "collapsibleChange"; "dataSourceChange": "dataSourceChange"; "deferRenderingChange": "deferRenderingChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "itemHoldTimeoutChange": "itemHoldTimeoutChange"; "itemsChange": "itemsChange"; "itemTemplateChange": "itemTemplateChange"; "itemTitleTemplateChange": "itemTitleTemplateChange"; "keyExprChange": "keyExprChange"; "multipleChange": "multipleChange"; "noDataTextChange": "noDataTextChange"; "repaintChangesOnlyChange": "repaintChangesOnlyChange"; "rtlEnabledChange": "rtlEnabledChange"; "selectedIndexChange": "selectedIndexChange"; "selectedItemChange": "selectedItemChange"; "selectedItemKeysChange": "selectedItemKeysChange"; "selectedItemsChange": "selectedItemsChange"; "tabIndexChange": "tabIndexChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, ["itemsChildren"], never>;
}
export declare class DxAccordionModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxAccordionModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxAccordionModule, [typeof DxAccordionComponent], [typeof i1.DxiItemModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule, typeof i3.BrowserTransferStateModule], [typeof DxAccordionComponent, typeof i1.DxiItemModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxAccordionModule>;
}
