import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { dxGanttContextMenu, dxGanttFilterRow, dxGanttHeaderFilter, dxGanttSorting, dxGanttToolbar } from 'devextreme/ui/gantt';
import DxGantt from 'devextreme/ui/gantt';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiColumnComponent } from 'devextreme-angular/ui/nested';
import { DxiStripLineComponent } from 'devextreme-angular/ui/nested';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
import * as i3 from "@angular/platform-browser";
/**
 * The Gantt is a UI component that displays the task flow and dependencies between tasks.

 */
export declare class DxGanttComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxGantt;
    /**
     * Specifies the shortcut key that sets focus on the UI component.
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * Specifies whether the UI component changes its visual state as a result of user interaction.
    
     */
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    /**
     * Specifies whether users can select tasks in the Gantt.
    
     */
    get allowSelection(): boolean;
    set allowSelection(value: boolean);
    /**
     * An array of columns in the Gantt.
    
     */
    get columns(): Array<DevExpress.ui.dxGanttColumn | string>;
    set columns(value: Array<DevExpress.ui.dxGanttColumn | string>);
    /**
     * Configures the context menu settings.
    
     */
    get contextMenu(): dxGanttContextMenu;
    set contextMenu(value: dxGanttContextMenu);
    /**
     * Configures dependencies.
    
     */
    get dependencies(): {
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        keyExpr?: Function | string;
        predecessorIdExpr?: Function | string;
        successorIdExpr?: Function | string;
        typeExpr?: Function | string;
    };
    set dependencies(value: {
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        keyExpr?: Function | string;
        predecessorIdExpr?: Function | string;
        successorIdExpr?: Function | string;
        typeExpr?: Function | string;
    });
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Configures edit properties.
    
     */
    get editing(): {
        allowDependencyAdding?: boolean;
        allowDependencyDeleting?: boolean;
        allowResourceAdding?: boolean;
        allowResourceDeleting?: boolean;
        allowResourceUpdating?: boolean;
        allowTaskAdding?: boolean;
        allowTaskDeleting?: boolean;
        allowTaskResourceUpdating?: boolean;
        allowTaskUpdating?: boolean;
        enabled?: boolean;
    };
    set editing(value: {
        allowDependencyAdding?: boolean;
        allowDependencyDeleting?: boolean;
        allowResourceAdding?: boolean;
        allowResourceDeleting?: boolean;
        allowResourceUpdating?: boolean;
        allowTaskAdding?: boolean;
        allowTaskDeleting?: boolean;
        allowTaskResourceUpdating?: boolean;
        allowTaskUpdating?: boolean;
        enabled?: boolean;
    });
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * Specifies the end date of the date interval in the Gantt chart.
    
     */
    get endDateRange(): Date;
    set endDateRange(value: Date);
    /**
     * Configures filter row settings.
    
     */
    get filterRow(): dxGanttFilterRow;
    set filterRow(value: dxGanttFilterRow);
    /**
     * Specifies the first day of a week.
    
     */
    get firstDayOfWeek(): number | string | undefined;
    set firstDayOfWeek(value: number | string | undefined);
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * Configures the header filter settings.
    
     */
    get headerFilter(): dxGanttHeaderFilter;
    set headerFilter(value: dxGanttHeaderFilter);
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * Specifies text for a hint that appears when a user pauses on the UI component.
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * Configures resource assignments.
    
     */
    get resourceAssignments(): {
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        keyExpr?: Function | string;
        resourceIdExpr?: Function | string;
        taskIdExpr?: Function | string;
    };
    set resourceAssignments(value: {
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        keyExpr?: Function | string;
        resourceIdExpr?: Function | string;
        taskIdExpr?: Function | string;
    });
    /**
     * Configures task resources.
    
     */
    get resources(): {
        colorExpr?: Function | string;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        keyExpr?: Function | string;
        textExpr?: Function | string;
    };
    set resources(value: {
        colorExpr?: Function | string;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        keyExpr?: Function | string;
        textExpr?: Function | string;
    });
    /**
     * Specifies the root task&apos;s identifier.
    
     */
    get rootValue(): any;
    set rootValue(value: any);
    /**
     * Specifies the zoom level of tasks in the Gantt chart.
    
     */
    get scaleType(): string;
    set scaleType(value: string);
    /**
     * Configures zoom range settings.
    
     */
    get scaleTypeRange(): {
        max?: string;
        min?: string;
    };
    set scaleTypeRange(value: {
        max?: string;
        min?: string;
    });
    /**
     * Allows you to select a row or determine which row is selected.
    
     */
    get selectedRowKey(): any | undefined;
    set selectedRowKey(value: any | undefined);
    /**
     * Specifies whether to display dependencies between tasks.
    
     */
    get showDependencies(): boolean;
    set showDependencies(value: boolean);
    /**
     * Specifies whether to display task resources.
    
     */
    get showResources(): boolean;
    set showResources(value: boolean);
    /**
     * Specifies whether to show/hide horizontal faint lines that separate tasks.
    
     */
    get showRowLines(): boolean;
    set showRowLines(value: boolean);
    /**
     * Configures sort settings.
    
     */
    get sorting(): dxGanttSorting;
    set sorting(value: dxGanttSorting);
    /**
     * Specifies the start date of the date interval in the Gantt chart.
    
     */
    get startDateRange(): Date;
    set startDateRange(value: Date);
    /**
     * Configures strip lines.
    
     */
    get stripLines(): Array<DevExpress.ui.dxGanttStripLine>;
    set stripLines(value: Array<DevExpress.ui.dxGanttStripLine>);
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * Specifies custom content for the task.
    
     */
    get taskContentTemplate(): any;
    set taskContentTemplate(value: any);
    /**
     * Specifies the width of the task list in pixels.
    
     */
    get taskListWidth(): number;
    set taskListWidth(value: number);
    /**
     * Specifies custom content for the tooltip that displays the task&apos;s progress while the progress handler is resized in the UI.
    
     */
    get taskProgressTooltipContentTemplate(): any;
    set taskProgressTooltipContentTemplate(value: any);
    /**
     * Configures tasks.
    
     */
    get tasks(): {
        colorExpr?: Function | string;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        endExpr?: Function | string;
        keyExpr?: Function | string;
        parentIdExpr?: Function | string;
        progressExpr?: Function | string;
        startExpr?: Function | string;
        titleExpr?: Function | string;
    };
    set tasks(value: {
        colorExpr?: Function | string;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        endExpr?: Function | string;
        keyExpr?: Function | string;
        parentIdExpr?: Function | string;
        progressExpr?: Function | string;
        startExpr?: Function | string;
        titleExpr?: Function | string;
    });
    /**
     * Specifies custom content for the tooltip that displays the task&apos;s start and end time while the task is resized in the UI.
    
     */
    get taskTimeTooltipContentTemplate(): any;
    set taskTimeTooltipContentTemplate(value: any);
    /**
     * Specifies a task&apos;s title position.
    
     */
    get taskTitlePosition(): string;
    set taskTitlePosition(value: string);
    /**
     * Specifies custom content for the task tooltip.
    
     */
    get taskTooltipContentTemplate(): any;
    set taskTooltipContentTemplate(value: any);
    /**
     * Configures toolbar settings.
    
     */
    get toolbar(): dxGanttToolbar;
    set toolbar(value: dxGanttToolbar);
    /**
     * Configures validation properties.
    
     */
    get validation(): {
        autoUpdateParentTasks?: boolean;
        enablePredecessorGap?: boolean;
        validateDependencies?: boolean;
    };
    set validation(value: {
        autoUpdateParentTasks?: boolean;
        enablePredecessorGap?: boolean;
        validateDependencies?: boolean;
    });
    /**
     * Specifies whether the UI component is visible.
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
    
     * A function that is executed when the UI component is rendered and each time the component is repainted.
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * A function that is executed before the context menu is rendered.
    
    
     */
    onContextMenuPreparing: EventEmitter<any>;
    /**
    
     * A function that is executed after a custom command item was clicked. Allows you to implement a custom command&apos;s functionality.
    
    
     */
    onCustomCommand: EventEmitter<any>;
    /**
    
     * A function that is executed when a dependency is deleted.
    
    
     */
    onDependencyDeleted: EventEmitter<any>;
    /**
    
     * A function that is executed before a dependency is deleted.
    
    
     */
    onDependencyDeleting: EventEmitter<any>;
    /**
    
     * A function that is executed when a dependency is inserted.
    
    
     */
    onDependencyInserted: EventEmitter<any>;
    /**
    
     * A function that is executed before a dependency is inserted.
    
    
     */
    onDependencyInserting: EventEmitter<any>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed when a resource is assigned to a task.
    
    
     */
    onResourceAssigned: EventEmitter<any>;
    /**
    
     * A function that is executed before a resource is assigned to a task.
    
    
     */
    onResourceAssigning: EventEmitter<any>;
    /**
    
     * A function that is executed when a resource is deleted.
    
    
     */
    onResourceDeleted: EventEmitter<any>;
    /**
    
     * A function that is executed before a resource is deleted.
    
    
     */
    onResourceDeleting: EventEmitter<any>;
    /**
    
     * A function that is executed when a resource is inserted.
    
    
     */
    onResourceInserted: EventEmitter<any>;
    /**
    
     * A function that is executed before a resource is inserted.
    
    
     */
    onResourceInserting: EventEmitter<any>;
    /**
    
     * A function that is executed before the Resource Manager dialog is shown.
    
    
     */
    onResourceManagerDialogShowing: EventEmitter<any>;
    /**
    
     * A function that is executed when a resource is unassigned from a task.
    
    
     */
    onResourceUnassigned: EventEmitter<any>;
    /**
    
     * A function that is executed before a resource is unassigned from a task.
    
    
     */
    onResourceUnassigning: EventEmitter<any>;
    /**
    
     * A function that is executed before a scale cell is prepared.
    
    
     */
    onScaleCellPrepared: EventEmitter<any>;
    /**
    
     * A function that is executed after users select a task or clear its selection.
    
    
     */
    onSelectionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed when a user clicks a task.
    
    
     */
    onTaskClick: EventEmitter<any>;
    /**
    
     * A function that is executed when a user double-clicks a task.
    
    
     */
    onTaskDblClick: EventEmitter<any>;
    /**
    
     * A function that is executed when a task is deleted.
    
    
     */
    onTaskDeleted: EventEmitter<any>;
    /**
    
     * A function that is executed before a task is deleted.
    
    
     */
    onTaskDeleting: EventEmitter<any>;
    /**
    
     * A function that is executed before the edit dialog is shown.
    
    
     */
    onTaskEditDialogShowing: EventEmitter<any>;
    /**
    
     * A function that is executed when a task is inserted.
    
    
     */
    onTaskInserted: EventEmitter<any>;
    /**
    
     * A function that is executed before a task is inserted.
    
    
     */
    onTaskInserting: EventEmitter<any>;
    /**
    
     * A function that is executed before a task is moved.
    
    
     */
    onTaskMoving: EventEmitter<any>;
    /**
    
     * A function that is executed when a task is updated.
    
    
     */
    onTaskUpdated: EventEmitter<any>;
    /**
    
     * A function that is executed before a task is updated.
    
    
     */
    onTaskUpdating: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowSelectionChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    columnsChange: EventEmitter<Array<DevExpress.ui.dxGanttColumn | string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    contextMenuChange: EventEmitter<dxGanttContextMenu>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dependenciesChange: EventEmitter<{
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        keyExpr?: Function | string;
        predecessorIdExpr?: Function | string;
        successorIdExpr?: Function | string;
        typeExpr?: Function | string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    editingChange: EventEmitter<{
        allowDependencyAdding?: boolean;
        allowDependencyDeleting?: boolean;
        allowResourceAdding?: boolean;
        allowResourceDeleting?: boolean;
        allowResourceUpdating?: boolean;
        allowTaskAdding?: boolean;
        allowTaskDeleting?: boolean;
        allowTaskResourceUpdating?: boolean;
        allowTaskUpdating?: boolean;
        enabled?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    endDateRangeChange: EventEmitter<Date>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterRowChange: EventEmitter<dxGanttFilterRow>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    firstDayOfWeekChange: EventEmitter<number | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    headerFilterChange: EventEmitter<dxGanttHeaderFilter>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    resourceAssignmentsChange: EventEmitter<{
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        keyExpr?: Function | string;
        resourceIdExpr?: Function | string;
        taskIdExpr?: Function | string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    resourcesChange: EventEmitter<{
        colorExpr?: Function | string;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        keyExpr?: Function | string;
        textExpr?: Function | string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rootValueChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scaleTypeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scaleTypeRangeChange: EventEmitter<{
        max?: string;
        min?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedRowKeyChange: EventEmitter<any | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showDependenciesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showResourcesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showRowLinesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sortingChange: EventEmitter<dxGanttSorting>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    startDateRangeChange: EventEmitter<Date>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    stripLinesChange: EventEmitter<Array<DevExpress.ui.dxGanttStripLine>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    taskContentTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    taskListWidthChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    taskProgressTooltipContentTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tasksChange: EventEmitter<{
        colorExpr?: Function | string;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        endExpr?: Function | string;
        keyExpr?: Function | string;
        parentIdExpr?: Function | string;
        progressExpr?: Function | string;
        startExpr?: Function | string;
        titleExpr?: Function | string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    taskTimeTooltipContentTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    taskTitlePositionChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    taskTooltipContentTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    toolbarChange: EventEmitter<dxGanttToolbar>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationChange: EventEmitter<{
        autoUpdateParentTasks?: boolean;
        enablePredecessorGap?: boolean;
        validateDependencies?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    get columnsChildren(): QueryList<DxiColumnComponent>;
    set columnsChildren(value: QueryList<DxiColumnComponent>);
    get stripLinesChildren(): QueryList<DxiStripLineComponent>;
    set stripLinesChildren(value: QueryList<DxiStripLineComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxGantt;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxGanttComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxGanttComponent, "dx-gantt", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "allowSelection": "allowSelection"; "columns": "columns"; "contextMenu": "contextMenu"; "dependencies": "dependencies"; "disabled": "disabled"; "editing": "editing"; "elementAttr": "elementAttr"; "endDateRange": "endDateRange"; "filterRow": "filterRow"; "firstDayOfWeek": "firstDayOfWeek"; "focusStateEnabled": "focusStateEnabled"; "headerFilter": "headerFilter"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "resourceAssignments": "resourceAssignments"; "resources": "resources"; "rootValue": "rootValue"; "scaleType": "scaleType"; "scaleTypeRange": "scaleTypeRange"; "selectedRowKey": "selectedRowKey"; "showDependencies": "showDependencies"; "showResources": "showResources"; "showRowLines": "showRowLines"; "sorting": "sorting"; "startDateRange": "startDateRange"; "stripLines": "stripLines"; "tabIndex": "tabIndex"; "taskContentTemplate": "taskContentTemplate"; "taskListWidth": "taskListWidth"; "taskProgressTooltipContentTemplate": "taskProgressTooltipContentTemplate"; "tasks": "tasks"; "taskTimeTooltipContentTemplate": "taskTimeTooltipContentTemplate"; "taskTitlePosition": "taskTitlePosition"; "taskTooltipContentTemplate": "taskTooltipContentTemplate"; "toolbar": "toolbar"; "validation": "validation"; "visible": "visible"; "width": "width"; }, { "onContentReady": "onContentReady"; "onContextMenuPreparing": "onContextMenuPreparing"; "onCustomCommand": "onCustomCommand"; "onDependencyDeleted": "onDependencyDeleted"; "onDependencyDeleting": "onDependencyDeleting"; "onDependencyInserted": "onDependencyInserted"; "onDependencyInserting": "onDependencyInserting"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onResourceAssigned": "onResourceAssigned"; "onResourceAssigning": "onResourceAssigning"; "onResourceDeleted": "onResourceDeleted"; "onResourceDeleting": "onResourceDeleting"; "onResourceInserted": "onResourceInserted"; "onResourceInserting": "onResourceInserting"; "onResourceManagerDialogShowing": "onResourceManagerDialogShowing"; "onResourceUnassigned": "onResourceUnassigned"; "onResourceUnassigning": "onResourceUnassigning"; "onScaleCellPrepared": "onScaleCellPrepared"; "onSelectionChanged": "onSelectionChanged"; "onTaskClick": "onTaskClick"; "onTaskDblClick": "onTaskDblClick"; "onTaskDeleted": "onTaskDeleted"; "onTaskDeleting": "onTaskDeleting"; "onTaskEditDialogShowing": "onTaskEditDialogShowing"; "onTaskInserted": "onTaskInserted"; "onTaskInserting": "onTaskInserting"; "onTaskMoving": "onTaskMoving"; "onTaskUpdated": "onTaskUpdated"; "onTaskUpdating": "onTaskUpdating"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "allowSelectionChange": "allowSelectionChange"; "columnsChange": "columnsChange"; "contextMenuChange": "contextMenuChange"; "dependenciesChange": "dependenciesChange"; "disabledChange": "disabledChange"; "editingChange": "editingChange"; "elementAttrChange": "elementAttrChange"; "endDateRangeChange": "endDateRangeChange"; "filterRowChange": "filterRowChange"; "firstDayOfWeekChange": "firstDayOfWeekChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "headerFilterChange": "headerFilterChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "resourceAssignmentsChange": "resourceAssignmentsChange"; "resourcesChange": "resourcesChange"; "rootValueChange": "rootValueChange"; "scaleTypeChange": "scaleTypeChange"; "scaleTypeRangeChange": "scaleTypeRangeChange"; "selectedRowKeyChange": "selectedRowKeyChange"; "showDependenciesChange": "showDependenciesChange"; "showResourcesChange": "showResourcesChange"; "showRowLinesChange": "showRowLinesChange"; "sortingChange": "sortingChange"; "startDateRangeChange": "startDateRangeChange"; "stripLinesChange": "stripLinesChange"; "tabIndexChange": "tabIndexChange"; "taskContentTemplateChange": "taskContentTemplateChange"; "taskListWidthChange": "taskListWidthChange"; "taskProgressTooltipContentTemplateChange": "taskProgressTooltipContentTemplateChange"; "tasksChange": "tasksChange"; "taskTimeTooltipContentTemplateChange": "taskTimeTooltipContentTemplateChange"; "taskTitlePositionChange": "taskTitlePositionChange"; "taskTooltipContentTemplateChange": "taskTooltipContentTemplateChange"; "toolbarChange": "toolbarChange"; "validationChange": "validationChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, ["columnsChildren", "stripLinesChildren"], never>;
}
export declare class DxGanttModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxGanttModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxGanttModule, [typeof DxGanttComponent], [typeof i1.DxiColumnModule, typeof i1.DxoFormatModule, typeof i1.DxoHeaderFilterModule, typeof i1.DxoContextMenuModule, typeof i1.DxiItemModule, typeof i1.DxoDependenciesModule, typeof i1.DxoEditingModule, typeof i1.DxoFilterRowModule, typeof i1.DxoOperationDescriptionsModule, typeof i1.DxoTextsModule, typeof i1.DxoResourceAssignmentsModule, typeof i1.DxoResourcesModule, typeof i1.DxoScaleTypeRangeModule, typeof i1.DxoSortingModule, typeof i1.DxiStripLineModule, typeof i1.DxoTasksModule, typeof i1.DxoToolbarModule, typeof i1.DxoValidationModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule, typeof i3.BrowserTransferStateModule], [typeof DxGanttComponent, typeof i1.DxiColumnModule, typeof i1.DxoFormatModule, typeof i1.DxoHeaderFilterModule, typeof i1.DxoContextMenuModule, typeof i1.DxiItemModule, typeof i1.DxoDependenciesModule, typeof i1.DxoEditingModule, typeof i1.DxoFilterRowModule, typeof i1.DxoOperationDescriptionsModule, typeof i1.DxoTextsModule, typeof i1.DxoResourceAssignmentsModule, typeof i1.DxoResourcesModule, typeof i1.DxoScaleTypeRangeModule, typeof i1.DxoSortingModule, typeof i1.DxiStripLineModule, typeof i1.DxoTasksModule, typeof i1.DxoToolbarModule, typeof i1.DxoValidationModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxGanttModule>;
}
