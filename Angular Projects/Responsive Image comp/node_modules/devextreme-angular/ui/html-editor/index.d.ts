import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { dxHtmlEditorImageUpload, dxHtmlEditorMediaResizing, dxHtmlEditorTableContextMenu, dxHtmlEditorTableResizing, dxHtmlEditorToolbar, dxHtmlEditorVariables } from 'devextreme/ui/html_editor';
import DxHtmlEditor from 'devextreme/ui/html_editor';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiMentionComponent } from 'devextreme-angular/ui/nested';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
import * as i3 from "@angular/platform-browser";
/**
 * HtmlEditor is a WYSIWYG editor that allows you to format textual and visual content and to output it in HTML or Markdown. HtmlEditor is built on top of and requires the DevExtreme Quill.

 */
export declare class DxHtmlEditorComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxHtmlEditor;
    /**
     * Specifies the shortcut key that sets focus on the UI component.
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * Specifies whether the UI component changes its visual state as a result of user interaction.
    
     */
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    /**
     * Allows users to break content into multiple lines within a single block element. The Shift + Enter key combination generates the new line.
    
     */
    get allowSoftLineBreak(): boolean;
    set allowSoftLineBreak(value: boolean);
    /**
     * Allows you to customize the DevExtreme Quill and 3rd-party modules.
    
     */
    get customizeModules(): Function;
    set customizeModules(value: Function);
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * Specifies text for a hint that appears when a user pauses on the UI component.
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * Configures the image upload.
    
     */
    get imageUpload(): dxHtmlEditorImageUpload;
    set imageUpload(value: dxHtmlEditorImageUpload);
    /**
     * Specifies or indicates whether the editor&apos;s value is valid.
    
     */
    get isValid(): boolean;
    set isValid(value: boolean);
    /**
     * Configures media resizing.
    
     */
    get mediaResizing(): dxHtmlEditorMediaResizing;
    set mediaResizing(value: dxHtmlEditorMediaResizing);
    /**
     * Configures mentions.
    
     */
    get mentions(): Array<DevExpress.ui.dxHtmlEditorMention>;
    set mentions(value: Array<DevExpress.ui.dxHtmlEditorMention>);
    /**
     * The value to be assigned to the `name` attribute of the underlying HTML element.
    
     */
    get name(): string;
    set name(value: string);
    /**
     * Specifies the text displayed when the input field is empty.
    
     */
    get placeholder(): string;
    set placeholder(value: string);
    /**
     * Specifies whether the editor is read-only.
    
     */
    get readOnly(): boolean;
    set readOnly(value: boolean);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * Specifies how the HtmlEditor&apos;s toolbar and content field are styled.
    
     */
    get stylingMode(): string;
    set stylingMode(value: string);
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * Configures table context menu settings.
    
     */
    get tableContextMenu(): dxHtmlEditorTableContextMenu;
    set tableContextMenu(value: dxHtmlEditorTableContextMenu);
    /**
     * Configures table resize.
    
     */
    get tableResizing(): dxHtmlEditorTableResizing;
    set tableResizing(value: dxHtmlEditorTableResizing);
    /**
     * Configures the UI component&apos;s toolbar.
    
     */
    get toolbar(): dxHtmlEditorToolbar;
    set toolbar(value: dxHtmlEditorToolbar);
    /**
     * Information on the broken validation rule. Contains the first item from the validationErrors array.
    
     */
    get validationError(): any;
    set validationError(value: any);
    /**
     * An array of the validation rules that failed.
    
     */
    get validationErrors(): Array<any>;
    set validationErrors(value: Array<any>);
    /**
     * Specifies how the message about the validation rules that are not satisfied by this editor&apos;s value is displayed.
    
     */
    get validationMessageMode(): string;
    set validationMessageMode(value: string);
    /**
     * Specifies the position of a validation message relative to the component. The validation message describes the validation rules that this component&apos;s value does not satisfy.
    
     */
    get validationMessagePosition(): string;
    set validationMessagePosition(value: string);
    /**
     * Indicates or specifies the current validation status.
    
     */
    get validationStatus(): string;
    set validationStatus(value: string);
    /**
     * Specifies the UI component&apos;s value.
    
     */
    get value(): any;
    set value(value: any);
    /**
     * Specifies in which markup language the value is stored.
    
     */
    get valueType(): string;
    set valueType(value: string);
    /**
     * Configures variables, which are placeholders to be replaced with actual values when processing text.
    
     */
    get variables(): dxHtmlEditorVariables;
    set variables(value: dxHtmlEditorVariables);
    /**
     * Specifies whether the UI component is visible.
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
    
     * A function that is executed when the UI component is rendered and each time the component is repainted.
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function that is executed when the UI component gets focus.
    
    
     */
    onFocusIn: EventEmitter<any>;
    /**
    
     * A function that is executed when the UI component loses focus.
    
    
     */
    onFocusOut: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed after the UI component&apos;s value is changed.
    
    
     */
    onValueChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowSoftLineBreakChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizeModulesChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    imageUploadChange: EventEmitter<dxHtmlEditorImageUpload>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    isValidChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    mediaResizingChange: EventEmitter<dxHtmlEditorMediaResizing>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    mentionsChange: EventEmitter<Array<DevExpress.ui.dxHtmlEditorMention>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    nameChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    placeholderChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    readOnlyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    stylingModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tableContextMenuChange: EventEmitter<dxHtmlEditorTableContextMenu>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tableResizingChange: EventEmitter<dxHtmlEditorTableResizing>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    toolbarChange: EventEmitter<dxHtmlEditorToolbar>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorsChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationMessageModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationMessagePositionChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationStatusChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueTypeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    variablesChange: EventEmitter<dxHtmlEditorVariables>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * 
    
    
     */
    onBlur: EventEmitter<any>;
    change(_: any): void;
    touched: (_: any) => void;
    get mentionsChildren(): QueryList<DxiMentionComponent>;
    set mentionsChildren(value: QueryList<DxiMentionComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxHtmlEditor;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _createWidget(element: any): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxHtmlEditorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxHtmlEditorComponent, "dx-html-editor", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "allowSoftLineBreak": "allowSoftLineBreak"; "customizeModules": "customizeModules"; "disabled": "disabled"; "elementAttr": "elementAttr"; "focusStateEnabled": "focusStateEnabled"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "imageUpload": "imageUpload"; "isValid": "isValid"; "mediaResizing": "mediaResizing"; "mentions": "mentions"; "name": "name"; "placeholder": "placeholder"; "readOnly": "readOnly"; "rtlEnabled": "rtlEnabled"; "stylingMode": "stylingMode"; "tabIndex": "tabIndex"; "tableContextMenu": "tableContextMenu"; "tableResizing": "tableResizing"; "toolbar": "toolbar"; "validationError": "validationError"; "validationErrors": "validationErrors"; "validationMessageMode": "validationMessageMode"; "validationMessagePosition": "validationMessagePosition"; "validationStatus": "validationStatus"; "value": "value"; "valueType": "valueType"; "variables": "variables"; "visible": "visible"; "width": "width"; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onFocusIn": "onFocusIn"; "onFocusOut": "onFocusOut"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onValueChanged": "onValueChanged"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "allowSoftLineBreakChange": "allowSoftLineBreakChange"; "customizeModulesChange": "customizeModulesChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "imageUploadChange": "imageUploadChange"; "isValidChange": "isValidChange"; "mediaResizingChange": "mediaResizingChange"; "mentionsChange": "mentionsChange"; "nameChange": "nameChange"; "placeholderChange": "placeholderChange"; "readOnlyChange": "readOnlyChange"; "rtlEnabledChange": "rtlEnabledChange"; "stylingModeChange": "stylingModeChange"; "tabIndexChange": "tabIndexChange"; "tableContextMenuChange": "tableContextMenuChange"; "tableResizingChange": "tableResizingChange"; "toolbarChange": "toolbarChange"; "validationErrorChange": "validationErrorChange"; "validationErrorsChange": "validationErrorsChange"; "validationMessageModeChange": "validationMessageModeChange"; "validationMessagePositionChange": "validationMessagePositionChange"; "validationStatusChange": "validationStatusChange"; "valueChange": "valueChange"; "valueTypeChange": "valueTypeChange"; "variablesChange": "variablesChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; "onBlur": "onBlur"; }, ["mentionsChildren"], ["*"]>;
}
export declare class DxHtmlEditorModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxHtmlEditorModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxHtmlEditorModule, [typeof DxHtmlEditorComponent], [typeof i1.DxoImageUploadModule, typeof i1.DxoFileUploaderOptionsModule, typeof i1.DxiTabModule, typeof i1.DxoMediaResizingModule, typeof i1.DxiMentionModule, typeof i1.DxoTableContextMenuModule, typeof i1.DxiItemModule, typeof i1.DxoTableResizingModule, typeof i1.DxoToolbarModule, typeof i1.DxoVariablesModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule, typeof i3.BrowserTransferStateModule], [typeof DxHtmlEditorComponent, typeof i1.DxoImageUploadModule, typeof i1.DxoFileUploaderOptionsModule, typeof i1.DxiTabModule, typeof i1.DxoMediaResizingModule, typeof i1.DxiMentionModule, typeof i1.DxoTableContextMenuModule, typeof i1.DxiItemModule, typeof i1.DxoTableResizingModule, typeof i1.DxoToolbarModule, typeof i1.DxoVariablesModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxHtmlEditorModule>;
}
