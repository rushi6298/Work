import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { dxSortableOptions } from 'devextreme/ui/sortable';
import { Properties as dxTextBoxOptions } from 'devextreme/ui/text_box';
import DxList from 'devextreme/ui/list';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiItemComponent } from 'devextreme-angular/ui/nested';
import { DxiMenuItemComponent } from 'devextreme-angular/ui/nested';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
import * as i3 from "@angular/platform-browser";
export { ExplicitTypes } from 'devextreme/ui/list';
/**
 * The List is a UI component that represents a collection of items in a scrollable list.

 */
export declare class DxListComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxList;
    /**
     * Specifies the shortcut key that sets focus on the UI component.
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * Specifies whether the UI component changes its visual state as a result of user interaction.
    
     */
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    /**
     * Specifies whether or not an end user can delete list items.
    
     */
    get allowItemDeleting(): boolean;
    set allowItemDeleting(value: boolean);
    /**
     * A Boolean value specifying whether to enable or disable the bounce-back effect.
    
     */
    get bounceEnabled(): boolean;
    set bounceEnabled(value: boolean);
    /**
     * Specifies whether or not an end user can collapse groups.
    
     */
    get collapsibleGroups(): boolean;
    set collapsibleGroups(value: boolean);
    /**
     * Binds the UI component to data.
    
     */
    get dataSource(): DataSource | DataSourceOptions | Store | null | string | Array<string | DevExpress.ui.dxListItem | any>;
    set dataSource(value: DataSource | DataSourceOptions | Store | null | string | Array<string | DevExpress.ui.dxListItem | any>);
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Specifies the data field whose values should be displayed. Defaults to &apos;text&apos; when the data source contains objects.
    
     */
    get displayExpr(): Function | string | undefined;
    set displayExpr(value: Function | string | undefined);
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * Specifies whether data items should be grouped.
    
     */
    get grouped(): boolean;
    set grouped(value: boolean);
    /**
     * Specifies a custom template for group captions.
    
     */
    get groupTemplate(): any;
    set groupTemplate(value: any);
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * Specifies text for a hint that appears when a user pauses on the UI component.
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * Specifies whether or not to show the loading panel when the DataSource bound to the UI component is loading data.
    
     */
    get indicateLoading(): boolean;
    set indicateLoading(value: boolean);
    /**
     * Specifies the way a user can delete items from the list.
    
     */
    get itemDeleteMode(): string;
    set itemDeleteMode(value: string);
    /**
     * Configures item reordering using drag and drop gestures.
    
     */
    get itemDragging(): dxSortableOptions;
    set itemDragging(value: dxSortableOptions);
    /**
     * The time period in milliseconds before the onItemHold event is raised.
    
     */
    get itemHoldTimeout(): number;
    set itemHoldTimeout(value: number);
    /**
     * An array of items displayed by the UI component.
    
     */
    get items(): Array<string | any | {
        badge?: string;
        disabled?: boolean;
        html?: string;
        icon?: string;
        key?: string;
        showChevron?: boolean;
        template?: any;
        text?: string;
        visible?: boolean;
    }>;
    set items(value: Array<string | any | {
        badge?: string;
        disabled?: boolean;
        html?: string;
        icon?: string;
        key?: string;
        showChevron?: boolean;
        template?: any;
        text?: string;
        visible?: boolean;
    }>);
    /**
     * Specifies a custom template for items.
    
     */
    get itemTemplate(): any;
    set itemTemplate(value: any);
    /**
     * Specifies the key property that provides key values to access data items. Each key value must be unique.
    
     */
    get keyExpr(): Function | string;
    set keyExpr(value: Function | string);
    /**
     * Specifies the array of items for a context menu called for a list item.
    
     */
    get menuItems(): Array<any | {
        action?: Function;
        text?: string;
    }>;
    set menuItems(value: Array<any | {
        action?: Function;
        text?: string;
    }>);
    /**
     * Specifies whether an item context menu is shown when a user holds or swipes an item.
    
     */
    get menuMode(): string;
    set menuMode(value: string);
    /**
     * The text displayed on the button used to load the next page from the data source.
    
     */
    get nextButtonText(): string;
    set nextButtonText(value: string);
    /**
     * Specifies the text or HTML markup displayed by the UI component if the item collection is empty.
    
     */
    get noDataText(): string;
    set noDataText(value: string);
    /**
     * Specifies the text shown in the pullDown panel, which is displayed when the list is scrolled to the bottom.
    
     */
    get pageLoadingText(): string;
    set pageLoadingText(value: string);
    /**
     * Specifies whether the next page is loaded when a user scrolls the UI component to the bottom or when the &apos;next&apos; button is clicked.
    
     */
    get pageLoadMode(): string;
    set pageLoadMode(value: string);
    /**
     * Specifies the text displayed in the pullDown panel when the list is pulled below the refresh threshold.
    
     */
    get pulledDownText(): string;
    set pulledDownText(value: string);
    /**
     * Specifies the text shown in the pullDown panel while the list is being pulled down to the refresh threshold.
    
     */
    get pullingDownText(): string;
    set pullingDownText(value: string);
    /**
     * A Boolean value specifying whether or not the UI component supports the &apos;pull down to refresh&apos; gesture.
    
     */
    get pullRefreshEnabled(): boolean;
    set pullRefreshEnabled(value: boolean);
    /**
     * Specifies the text displayed in the pullDown panel while the list is being refreshed.
    
     */
    get refreshingText(): string;
    set refreshingText(value: string);
    /**
     * Specifies whether to repaint only those elements whose data changed.
    
     */
    get repaintChangesOnly(): boolean;
    set repaintChangesOnly(value: boolean);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * A Boolean value specifying if the list is scrolled by content.
    
     */
    get scrollByContent(): boolean;
    set scrollByContent(value: boolean);
    /**
     * Specifies whether a user can scroll the content with the scrollbar. Applies only if useNativeScrolling is false.
    
     */
    get scrollByThumb(): boolean;
    set scrollByThumb(value: boolean);
    /**
     * A Boolean value specifying whether to enable or disable list scrolling.
    
     */
    get scrollingEnabled(): boolean;
    set scrollingEnabled(value: boolean);
    /**
     * Configures the search panel.
    
     */
    get searchEditorOptions(): dxTextBoxOptions;
    set searchEditorOptions(value: dxTextBoxOptions);
    /**
     * Specifies whether the search panel is visible.
    
     */
    get searchEnabled(): boolean;
    set searchEnabled(value: boolean);
    /**
     * Specifies a data object&apos;s field name or an expression whose value is compared to the search string.
    
     */
    get searchExpr(): Function | string | Array<Function | string>;
    set searchExpr(value: Function | string | Array<Function | string>);
    /**
     * Specifies a comparison operation used to search UI component items.
    
     */
    get searchMode(): string;
    set searchMode(value: string);
    /**
     * Specifies a delay in milliseconds between when a user finishes typing, and the search is executed.
    
     */
    get searchTimeout(): number | undefined;
    set searchTimeout(value: number | undefined);
    /**
     * Specifies the current search string.
    
     */
    get searchValue(): string;
    set searchValue(value: string);
    /**
     * Specifies the mode in which all items are selected.
    
     */
    get selectAllMode(): string;
    set selectAllMode(value: string);
    /**
     * Specifies the text displayed at the &apos;Select All&apos; check box.
    
     */
    get selectAllText(): string;
    set selectAllText(value: string);
    /**
     * Specifies an array of currently selected item keys.
    
     */
    get selectedItemKeys(): Array<any>;
    set selectedItemKeys(value: Array<any>);
    /**
     * An array of currently selected item objects.
    
     */
    get selectedItems(): Array<any>;
    set selectedItems(value: Array<any>);
    /**
     * Specifies item selection mode.
    
     */
    get selectionMode(): string;
    set selectionMode(value: string);
    /**
     * Specifies when the UI component shows the scrollbar.
    
     */
    get showScrollbar(): string;
    set showScrollbar(value: string);
    /**
     * Specifies whether or not to display controls used to select list items.
    
     */
    get showSelectionControls(): boolean;
    set showSelectionControls(value: boolean);
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * Specifies whether or not the UI component uses native scrolling.
    
     */
    get useNativeScrolling(): boolean;
    set useNativeScrolling(value: boolean);
    /**
     * Specifies whether the UI component is visible.
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
    
     * A function that is executed when the UI component is rendered and each time the component is repainted.
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function that is executed when a group element is rendered.
    
    
     */
    onGroupRendered: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed when a collection item is clicked or tapped.
    
    
     */
    onItemClick: EventEmitter<any>;
    /**
    
     * A function that is executed when a collection item is right-clicked or pressed.
    
    
     */
    onItemContextMenu: EventEmitter<any>;
    /**
    
     * A function that is executed after a list item is deleted from the data source.
    
    
     */
    onItemDeleted: EventEmitter<any>;
    /**
    
     * A function that is executed before a collection item is deleted from the data source.
    
    
     */
    onItemDeleting: EventEmitter<any>;
    /**
    
     * A function that is executed when a collection item has been held for a specified period.
    
    
     */
    onItemHold: EventEmitter<any>;
    /**
    
     * A function that is executed after a collection item is rendered.
    
    
     */
    onItemRendered: EventEmitter<any>;
    /**
    
     * A function that is executed after a list item is moved to another position.
    
    
     */
    onItemReordered: EventEmitter<any>;
    /**
    
     * A function that is executed when a list item is swiped.
    
    
     */
    onItemSwipe: EventEmitter<any>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed before the next page is loaded.
    
    
     */
    onPageLoading: EventEmitter<any>;
    /**
    
     * A function that is executed when the &apos;pull to refresh&apos; gesture is performed. Supported on mobile devices only.
    
    
     */
    onPullRefresh: EventEmitter<any>;
    /**
    
     * A function that is executed on each scroll gesture.
    
    
     */
    onScroll: EventEmitter<any>;
    /**
    
     * A function that is executed when the &apos;Select All&apos; check box value is changed. Applies only if the selectionMode is &apos;all&apos;.
    
    
     */
    onSelectAllValueChanged: EventEmitter<any>;
    /**
    
     * A function that is executed when a collection item is selected or selection is canceled.
    
    
     */
    onSelectionChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowItemDeletingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    bounceEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    collapsibleGroupsChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DataSource | DataSourceOptions | Store | null | string | Array<string | DevExpress.ui.dxListItem | any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    displayExprChange: EventEmitter<Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    indicateLoadingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemDeleteModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemDraggingChange: EventEmitter<dxSortableOptions>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemHoldTimeoutChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsChange: EventEmitter<Array<string | any | {
        badge?: string;
        disabled?: boolean;
        html?: string;
        icon?: string;
        key?: string;
        showChevron?: boolean;
        template?: any;
        text?: string;
        visible?: boolean;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    keyExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    menuItemsChange: EventEmitter<Array<any | {
        action?: Function;
        text?: string;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    menuModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    nextButtonTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    noDataTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pageLoadingTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pageLoadModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pulledDownTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pullingDownTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pullRefreshEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    refreshingTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    repaintChangesOnlyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollByContentChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollByThumbChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollingEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchEditorOptionsChange: EventEmitter<dxTextBoxOptions>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchExprChange: EventEmitter<Function | string | Array<Function | string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchTimeoutChange: EventEmitter<number | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchValueChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectAllModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectAllTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemKeysChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemsChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectionModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showScrollbarChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showSelectionControlsChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useNativeScrollingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    get itemsChildren(): QueryList<DxiItemComponent>;
    set itemsChildren(value: QueryList<DxiItemComponent>);
    get menuItemsChildren(): QueryList<DxiMenuItemComponent>;
    set menuItemsChildren(value: QueryList<DxiMenuItemComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxList<any, any>;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxListComponent, "dx-list", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "allowItemDeleting": "allowItemDeleting"; "bounceEnabled": "bounceEnabled"; "collapsibleGroups": "collapsibleGroups"; "dataSource": "dataSource"; "disabled": "disabled"; "displayExpr": "displayExpr"; "elementAttr": "elementAttr"; "focusStateEnabled": "focusStateEnabled"; "grouped": "grouped"; "groupTemplate": "groupTemplate"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "indicateLoading": "indicateLoading"; "itemDeleteMode": "itemDeleteMode"; "itemDragging": "itemDragging"; "itemHoldTimeout": "itemHoldTimeout"; "items": "items"; "itemTemplate": "itemTemplate"; "keyExpr": "keyExpr"; "menuItems": "menuItems"; "menuMode": "menuMode"; "nextButtonText": "nextButtonText"; "noDataText": "noDataText"; "pageLoadingText": "pageLoadingText"; "pageLoadMode": "pageLoadMode"; "pulledDownText": "pulledDownText"; "pullingDownText": "pullingDownText"; "pullRefreshEnabled": "pullRefreshEnabled"; "refreshingText": "refreshingText"; "repaintChangesOnly": "repaintChangesOnly"; "rtlEnabled": "rtlEnabled"; "scrollByContent": "scrollByContent"; "scrollByThumb": "scrollByThumb"; "scrollingEnabled": "scrollingEnabled"; "searchEditorOptions": "searchEditorOptions"; "searchEnabled": "searchEnabled"; "searchExpr": "searchExpr"; "searchMode": "searchMode"; "searchTimeout": "searchTimeout"; "searchValue": "searchValue"; "selectAllMode": "selectAllMode"; "selectAllText": "selectAllText"; "selectedItemKeys": "selectedItemKeys"; "selectedItems": "selectedItems"; "selectionMode": "selectionMode"; "showScrollbar": "showScrollbar"; "showSelectionControls": "showSelectionControls"; "tabIndex": "tabIndex"; "useNativeScrolling": "useNativeScrolling"; "visible": "visible"; "width": "width"; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onGroupRendered": "onGroupRendered"; "onInitialized": "onInitialized"; "onItemClick": "onItemClick"; "onItemContextMenu": "onItemContextMenu"; "onItemDeleted": "onItemDeleted"; "onItemDeleting": "onItemDeleting"; "onItemHold": "onItemHold"; "onItemRendered": "onItemRendered"; "onItemReordered": "onItemReordered"; "onItemSwipe": "onItemSwipe"; "onOptionChanged": "onOptionChanged"; "onPageLoading": "onPageLoading"; "onPullRefresh": "onPullRefresh"; "onScroll": "onScroll"; "onSelectAllValueChanged": "onSelectAllValueChanged"; "onSelectionChanged": "onSelectionChanged"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "allowItemDeletingChange": "allowItemDeletingChange"; "bounceEnabledChange": "bounceEnabledChange"; "collapsibleGroupsChange": "collapsibleGroupsChange"; "dataSourceChange": "dataSourceChange"; "disabledChange": "disabledChange"; "displayExprChange": "displayExprChange"; "elementAttrChange": "elementAttrChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "groupedChange": "groupedChange"; "groupTemplateChange": "groupTemplateChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "indicateLoadingChange": "indicateLoadingChange"; "itemDeleteModeChange": "itemDeleteModeChange"; "itemDraggingChange": "itemDraggingChange"; "itemHoldTimeoutChange": "itemHoldTimeoutChange"; "itemsChange": "itemsChange"; "itemTemplateChange": "itemTemplateChange"; "keyExprChange": "keyExprChange"; "menuItemsChange": "menuItemsChange"; "menuModeChange": "menuModeChange"; "nextButtonTextChange": "nextButtonTextChange"; "noDataTextChange": "noDataTextChange"; "pageLoadingTextChange": "pageLoadingTextChange"; "pageLoadModeChange": "pageLoadModeChange"; "pulledDownTextChange": "pulledDownTextChange"; "pullingDownTextChange": "pullingDownTextChange"; "pullRefreshEnabledChange": "pullRefreshEnabledChange"; "refreshingTextChange": "refreshingTextChange"; "repaintChangesOnlyChange": "repaintChangesOnlyChange"; "rtlEnabledChange": "rtlEnabledChange"; "scrollByContentChange": "scrollByContentChange"; "scrollByThumbChange": "scrollByThumbChange"; "scrollingEnabledChange": "scrollingEnabledChange"; "searchEditorOptionsChange": "searchEditorOptionsChange"; "searchEnabledChange": "searchEnabledChange"; "searchExprChange": "searchExprChange"; "searchModeChange": "searchModeChange"; "searchTimeoutChange": "searchTimeoutChange"; "searchValueChange": "searchValueChange"; "selectAllModeChange": "selectAllModeChange"; "selectAllTextChange": "selectAllTextChange"; "selectedItemKeysChange": "selectedItemKeysChange"; "selectedItemsChange": "selectedItemsChange"; "selectionModeChange": "selectionModeChange"; "showScrollbarChange": "showScrollbarChange"; "showSelectionControlsChange": "showSelectionControlsChange"; "tabIndexChange": "tabIndexChange"; "useNativeScrollingChange": "useNativeScrollingChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, ["itemsChildren", "menuItemsChildren"], never>;
}
export declare class DxListModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxListModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxListModule, [typeof DxListComponent], [typeof i1.DxoItemDraggingModule, typeof i1.DxoCursorOffsetModule, typeof i1.DxiItemModule, typeof i1.DxiMenuItemModule, typeof i1.DxoSearchEditorOptionsModule, typeof i1.DxiButtonModule, typeof i1.DxoOptionsModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule, typeof i3.BrowserTransferStateModule], [typeof DxListComponent, typeof i1.DxoItemDraggingModule, typeof i1.DxoCursorOffsetModule, typeof i1.DxiItemModule, typeof i1.DxiMenuItemModule, typeof i1.DxoSearchEditorOptionsModule, typeof i1.DxiButtonModule, typeof i1.DxoOptionsModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxListModule>;
}
