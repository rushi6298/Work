/*!
 * devextreme-angular
 * Version: 22.2.13
 * Build date: Fri Aug 09 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { CollectionNestedOption } from 'devextreme-angular/core';
import { Format } from 'devextreme/localization';
import { Font } from 'devextreme/viz/core/base_widget';
import * as i0 from "@angular/core";
export declare abstract class DxiChartSeries extends CollectionNestedOption {
    get aggregation(): {
        calculate?: Function | undefined;
        enabled?: boolean;
        method?: string;
    };
    set aggregation(value: {
        calculate?: Function | undefined;
        enabled?: boolean;
        method?: string;
    });
    get argumentField(): string;
    set argumentField(value: string);
    get axis(): string | undefined;
    set axis(value: string | undefined);
    get barOverlapGroup(): string | undefined;
    set barOverlapGroup(value: string | undefined);
    get barPadding(): number | undefined;
    set barPadding(value: number | undefined);
    get barWidth(): number | undefined;
    set barWidth(value: number | undefined);
    get border(): {
        color?: string | undefined;
        dashStyle?: string | undefined;
        visible?: boolean;
        width?: number;
    };
    set border(value: {
        color?: string | undefined;
        dashStyle?: string | undefined;
        visible?: boolean;
        width?: number;
    });
    get closeValueField(): string;
    set closeValueField(value: string);
    get color(): string | undefined;
    set color(value: string | undefined);
    get cornerRadius(): number;
    set cornerRadius(value: number);
    get dashStyle(): string;
    set dashStyle(value: string);
    get highValueField(): string;
    set highValueField(value: string);
    get hoverMode(): string;
    set hoverMode(value: string);
    get hoverStyle(): {
        border?: {
            color?: string | undefined;
            dashStyle?: string;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        dashStyle?: string;
        hatching?: {
            direction?: string;
            opacity?: number;
            step?: number;
            width?: number;
        };
        width?: number;
    } | {
        border?: {
            color?: string | undefined;
            dashStyle?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        hatching?: {
            direction?: string;
            opacity?: number;
            step?: number;
            width?: number;
        };
    };
    set hoverStyle(value: {
        border?: {
            color?: string | undefined;
            dashStyle?: string;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        dashStyle?: string;
        hatching?: {
            direction?: string;
            opacity?: number;
            step?: number;
            width?: number;
        };
        width?: number;
    } | {
        border?: {
            color?: string | undefined;
            dashStyle?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        hatching?: {
            direction?: string;
            opacity?: number;
            step?: number;
            width?: number;
        };
    });
    get ignoreEmptyPoints(): boolean;
    set ignoreEmptyPoints(value: boolean);
    get innerColor(): string;
    set innerColor(value: string);
    get label(): {
        alignment?: string;
        argumentFormat?: Format | string | undefined;
        backgroundColor?: string | undefined;
        border?: {
            color?: string;
            dashStyle?: string;
            visible?: boolean;
            width?: number;
        };
        connector?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        customizeText?: Function;
        displayFormat?: string | undefined;
        font?: Font;
        format?: Format | string | undefined;
        horizontalOffset?: number;
        position?: string;
        rotationAngle?: number;
        showForZeroValues?: boolean;
        verticalOffset?: number;
        visible?: boolean;
    } | {
        argumentFormat?: Format | string | undefined;
        backgroundColor?: string | undefined;
        border?: {
            color?: string;
            dashStyle?: string;
            visible?: boolean;
            width?: number;
        };
        connector?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        customizeText?: Function;
        displayFormat?: string | undefined;
        font?: Font;
        format?: Format | string | undefined;
        position?: string;
        radialOffset?: number;
        rotationAngle?: number;
        textOverflow?: string;
        visible?: boolean;
        wordWrap?: string;
    } | {
        argumentFormat?: Format | string | undefined;
        backgroundColor?: string | undefined;
        border?: {
            color?: string;
            dashStyle?: string;
            visible?: boolean;
            width?: number;
        };
        connector?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        customizeText?: Function;
        displayFormat?: string | undefined;
        font?: Font;
        format?: Format | string | undefined;
        position?: string;
        rotationAngle?: number;
        showForZeroValues?: boolean;
        visible?: boolean;
    };
    set label(value: {
        alignment?: string;
        argumentFormat?: Format | string | undefined;
        backgroundColor?: string | undefined;
        border?: {
            color?: string;
            dashStyle?: string;
            visible?: boolean;
            width?: number;
        };
        connector?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        customizeText?: Function;
        displayFormat?: string | undefined;
        font?: Font;
        format?: Format | string | undefined;
        horizontalOffset?: number;
        position?: string;
        rotationAngle?: number;
        showForZeroValues?: boolean;
        verticalOffset?: number;
        visible?: boolean;
    } | {
        argumentFormat?: Format | string | undefined;
        backgroundColor?: string | undefined;
        border?: {
            color?: string;
            dashStyle?: string;
            visible?: boolean;
            width?: number;
        };
        connector?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        customizeText?: Function;
        displayFormat?: string | undefined;
        font?: Font;
        format?: Format | string | undefined;
        position?: string;
        radialOffset?: number;
        rotationAngle?: number;
        textOverflow?: string;
        visible?: boolean;
        wordWrap?: string;
    } | {
        argumentFormat?: Format | string | undefined;
        backgroundColor?: string | undefined;
        border?: {
            color?: string;
            dashStyle?: string;
            visible?: boolean;
            width?: number;
        };
        connector?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        customizeText?: Function;
        displayFormat?: string | undefined;
        font?: Font;
        format?: Format | string | undefined;
        position?: string;
        rotationAngle?: number;
        showForZeroValues?: boolean;
        visible?: boolean;
    });
    get lowValueField(): string;
    set lowValueField(value: string);
    get maxLabelCount(): number | undefined;
    set maxLabelCount(value: number | undefined);
    get minBarSize(): number | undefined;
    set minBarSize(value: number | undefined);
    get name(): string | undefined;
    set name(value: string | undefined);
    get opacity(): number;
    set opacity(value: number);
    get openValueField(): string;
    set openValueField(value: string);
    get pane(): string;
    set pane(value: string);
    get point(): {
        border?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        hoverMode?: string;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: string | undefined;
            size?: number | undefined;
        };
        image?: string | undefined | {
            height?: number | {
                rangeMaxPoint?: number | undefined;
                rangeMinPoint?: number | undefined;
            };
            url?: string | undefined | {
                rangeMaxPoint?: string | undefined;
                rangeMinPoint?: string | undefined;
            };
            width?: number | {
                rangeMaxPoint?: number | undefined;
                rangeMinPoint?: number | undefined;
            };
        };
        selectionMode?: string;
        selectionStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: string | undefined;
            size?: number | undefined;
        };
        size?: number;
        symbol?: string;
        visible?: boolean;
    } | {
        border?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        hoverMode?: string;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: string | undefined;
            size?: number;
        };
        image?: string | undefined | {
            height?: number;
            url?: string | undefined;
            width?: number;
        };
        selectionMode?: string;
        selectionStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: string | undefined;
            size?: number;
        };
        size?: number;
        symbol?: string;
        visible?: boolean;
    };
    set point(value: {
        border?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        hoverMode?: string;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: string | undefined;
            size?: number | undefined;
        };
        image?: string | undefined | {
            height?: number | {
                rangeMaxPoint?: number | undefined;
                rangeMinPoint?: number | undefined;
            };
            url?: string | undefined | {
                rangeMaxPoint?: string | undefined;
                rangeMinPoint?: string | undefined;
            };
            width?: number | {
                rangeMaxPoint?: number | undefined;
                rangeMinPoint?: number | undefined;
            };
        };
        selectionMode?: string;
        selectionStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: string | undefined;
            size?: number | undefined;
        };
        size?: number;
        symbol?: string;
        visible?: boolean;
    } | {
        border?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        hoverMode?: string;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: string | undefined;
            size?: number;
        };
        image?: string | undefined | {
            height?: number;
            url?: string | undefined;
            width?: number;
        };
        selectionMode?: string;
        selectionStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: string | undefined;
            size?: number;
        };
        size?: number;
        symbol?: string;
        visible?: boolean;
    });
    get rangeValue1Field(): string;
    set rangeValue1Field(value: string);
    get rangeValue2Field(): string;
    set rangeValue2Field(value: string);
    get reduction(): {
        color?: string;
        level?: string;
    };
    set reduction(value: {
        color?: string;
        level?: string;
    });
    get selectionMode(): string;
    set selectionMode(value: string);
    get selectionStyle(): {
        border?: {
            color?: string | undefined;
            dashStyle?: string;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        dashStyle?: string;
        hatching?: {
            direction?: string;
            opacity?: number;
            step?: number;
            width?: number;
        };
        width?: number;
    } | {
        border?: {
            color?: string | undefined;
            dashStyle?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        hatching?: {
            direction?: string;
            opacity?: number;
            step?: number;
            width?: number;
        };
    };
    set selectionStyle(value: {
        border?: {
            color?: string | undefined;
            dashStyle?: string;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        dashStyle?: string;
        hatching?: {
            direction?: string;
            opacity?: number;
            step?: number;
            width?: number;
        };
        width?: number;
    } | {
        border?: {
            color?: string | undefined;
            dashStyle?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        hatching?: {
            direction?: string;
            opacity?: number;
            step?: number;
            width?: number;
        };
    });
    get showInLegend(): boolean;
    set showInLegend(value: boolean);
    get sizeField(): string;
    set sizeField(value: string);
    get stack(): string;
    set stack(value: string);
    get tag(): any | undefined;
    set tag(value: any | undefined);
    get tagField(): string;
    set tagField(value: string);
    get type(): string;
    set type(value: string);
    get valueErrorBar(): {
        color?: string;
        displayMode?: string;
        edgeLength?: number;
        highValueField?: string | undefined;
        lineWidth?: number;
        lowValueField?: string | undefined;
        opacity?: number | undefined;
        type?: string | undefined;
        value?: number;
    };
    set valueErrorBar(value: {
        color?: string;
        displayMode?: string;
        edgeLength?: number;
        highValueField?: string | undefined;
        lineWidth?: number;
        lowValueField?: string | undefined;
        opacity?: number | undefined;
        type?: string | undefined;
        value?: number;
    });
    get valueField(): string;
    set valueField(value: string);
    get visible(): boolean;
    set visible(value: boolean);
    get width(): number;
    set width(value: number);
    get argumentType(): string | undefined;
    set argumentType(value: string | undefined);
    get minSegmentSize(): number | undefined;
    set minSegmentSize(value: number | undefined);
    get smallValuesGrouping(): {
        groupName?: string;
        mode?: string;
        threshold?: number | undefined;
        topCount?: number | undefined;
    };
    set smallValuesGrouping(value: {
        groupName?: string;
        mode?: string;
        threshold?: number | undefined;
        topCount?: number | undefined;
    });
    get closed(): boolean;
    set closed(value: boolean);
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiChartSeries, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxiChartSeries, "ng-component", never, {}, {}, never, never>;
}
