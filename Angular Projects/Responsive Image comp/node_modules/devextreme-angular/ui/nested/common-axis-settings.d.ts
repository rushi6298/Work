/*!
 * devextreme-angular
 * Version: 22.2.13
 * Build date: Fri Aug 09 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy } from '@angular/core';
import { Font } from 'devextreme/viz/core/base_widget';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
export declare class DxoCommonAxisSettingsComponent extends NestedOption implements OnDestroy, OnInit {
    get aggregatedPointsPosition(): string;
    set aggregatedPointsPosition(value: string);
    get allowDecimals(): boolean | undefined;
    set allowDecimals(value: boolean | undefined);
    get breakStyle(): {
        color?: string;
        line?: string;
        width?: number;
    };
    set breakStyle(value: {
        color?: string;
        line?: string;
        width?: number;
    });
    get color(): string;
    set color(value: string);
    get constantLineStyle(): {
        color?: string;
        dashStyle?: string;
        label?: {
            font?: Font;
            position?: string;
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        width?: number;
    } | {
        color?: string;
        dashStyle?: string;
        label?: {
            font?: Font;
            visible?: boolean;
        };
        width?: number;
    };
    set constantLineStyle(value: {
        color?: string;
        dashStyle?: string;
        label?: {
            font?: Font;
            position?: string;
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        width?: number;
    } | {
        color?: string;
        dashStyle?: string;
        label?: {
            font?: Font;
            visible?: boolean;
        };
        width?: number;
    });
    get discreteAxisDivisionMode(): string;
    set discreteAxisDivisionMode(value: string);
    get endOnTick(): boolean | undefined;
    set endOnTick(value: boolean | undefined);
    get grid(): {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    };
    set grid(value: {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    });
    get inverted(): boolean;
    set inverted(value: boolean);
    get label(): {
        alignment?: string | undefined;
        displayMode?: string;
        font?: Font;
        indentFromAxis?: number;
        overlappingBehavior?: string;
        position?: string;
        rotationAngle?: number;
        staggeringSpacing?: number;
        template?: any | undefined;
        textOverflow?: string;
        visible?: boolean;
        wordWrap?: string;
    } | {
        font?: Font;
        indentFromAxis?: number;
        overlappingBehavior?: string;
        visible?: boolean;
    };
    set label(value: {
        alignment?: string | undefined;
        displayMode?: string;
        font?: Font;
        indentFromAxis?: number;
        overlappingBehavior?: string;
        position?: string;
        rotationAngle?: number;
        staggeringSpacing?: number;
        template?: any | undefined;
        textOverflow?: string;
        visible?: boolean;
        wordWrap?: string;
    } | {
        font?: Font;
        indentFromAxis?: number;
        overlappingBehavior?: string;
        visible?: boolean;
    });
    get maxValueMargin(): number | undefined;
    set maxValueMargin(value: number | undefined);
    get minorGrid(): {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    };
    set minorGrid(value: {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    });
    get minorTick(): {
        color?: string;
        length?: number;
        opacity?: number;
        shift?: number;
        visible?: boolean;
        width?: number;
    } | {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    set minorTick(value: {
        color?: string;
        length?: number;
        opacity?: number;
        shift?: number;
        visible?: boolean;
        width?: number;
    } | {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    });
    get minValueMargin(): number | undefined;
    set minValueMargin(value: number | undefined);
    get opacity(): number | undefined;
    set opacity(value: number | undefined);
    get placeholderSize(): number;
    set placeholderSize(value: number);
    get stripStyle(): {
        label?: {
            font?: Font;
            horizontalAlignment?: string;
            verticalAlignment?: string;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
    } | {
        label?: {
            font?: Font;
        };
    };
    set stripStyle(value: {
        label?: {
            font?: Font;
            horizontalAlignment?: string;
            verticalAlignment?: string;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
    } | {
        label?: {
            font?: Font;
        };
    });
    get tick(): {
        color?: string;
        length?: number;
        opacity?: number | undefined;
        shift?: number;
        visible?: boolean;
        width?: number;
    } | {
        color?: string;
        length?: number;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    };
    set tick(value: {
        color?: string;
        length?: number;
        opacity?: number | undefined;
        shift?: number;
        visible?: boolean;
        width?: number;
    } | {
        color?: string;
        length?: number;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    });
    get title(): {
        alignment?: string;
        font?: Font;
        margin?: number;
        textOverflow?: string;
        wordWrap?: string;
    };
    set title(value: {
        alignment?: string;
        font?: Font;
        margin?: number;
        textOverflow?: string;
        wordWrap?: string;
    });
    get valueMarginsEnabled(): boolean;
    set valueMarginsEnabled(value: boolean);
    get visible(): boolean;
    set visible(value: boolean);
    get width(): number;
    set width(value: number);
    protected get _optionPath(): string;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoCommonAxisSettingsComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoCommonAxisSettingsComponent, "dxo-common-axis-settings", never, { "aggregatedPointsPosition": "aggregatedPointsPosition"; "allowDecimals": "allowDecimals"; "breakStyle": "breakStyle"; "color": "color"; "constantLineStyle": "constantLineStyle"; "discreteAxisDivisionMode": "discreteAxisDivisionMode"; "endOnTick": "endOnTick"; "grid": "grid"; "inverted": "inverted"; "label": "label"; "maxValueMargin": "maxValueMargin"; "minorGrid": "minorGrid"; "minorTick": "minorTick"; "minValueMargin": "minValueMargin"; "opacity": "opacity"; "placeholderSize": "placeholderSize"; "stripStyle": "stripStyle"; "tick": "tick"; "title": "title"; "valueMarginsEnabled": "valueMarginsEnabled"; "visible": "visible"; "width": "width"; }, {}, never, never>;
}
export declare class DxoCommonAxisSettingsModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoCommonAxisSettingsModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoCommonAxisSettingsModule, [typeof DxoCommonAxisSettingsComponent], never, [typeof DxoCommonAxisSettingsComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoCommonAxisSettingsModule>;
}
