/*!
 * devextreme-angular
 * Version: 22.2.13
 * Build date: Fri Aug 09 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { EventEmitter, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { Format } from 'devextreme/localization';
import { Font } from 'devextreme/viz/core/base_widget';
import { NestedOptionHost } from 'devextreme-angular/core';
import { CollectionNestedOption } from 'devextreme-angular/core';
import { DxiBreakComponent } from './break-dxi';
import { DxiConstantLineComponent } from './constant-line-dxi';
import { DxiStripComponent } from './strip-dxi';
import * as i0 from "@angular/core";
export declare class DxiValueAxisComponent extends CollectionNestedOption {
    get aggregatedPointsPosition(): string;
    set aggregatedPointsPosition(value: string);
    get allowDecimals(): boolean | undefined;
    set allowDecimals(value: boolean | undefined);
    get autoBreaksEnabled(): boolean;
    set autoBreaksEnabled(value: boolean);
    get axisDivisionFactor(): number;
    set axisDivisionFactor(value: number);
    get breaks(): Array<DevExpress.common.charts.ScaleBreak>;
    set breaks(value: Array<DevExpress.common.charts.ScaleBreak>);
    get breakStyle(): {
        color?: string;
        line?: string;
        width?: number;
    };
    set breakStyle(value: {
        color?: string;
        line?: string;
        width?: number;
    });
    get categories(): Array<number | string | Date>;
    set categories(value: Array<number | string | Date>);
    get color(): string;
    set color(value: string);
    get constantLines(): Array<any | {
        color?: string;
        dashStyle?: string;
        displayBehindSeries?: boolean;
        extendAxis?: boolean;
        label?: {
            font?: Font;
            horizontalAlignment?: string;
            position?: string;
            text?: string | undefined;
            verticalAlignment?: string;
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        value?: Date | number | string | undefined;
        width?: number;
    }>;
    set constantLines(value: Array<any | {
        color?: string;
        dashStyle?: string;
        displayBehindSeries?: boolean;
        extendAxis?: boolean;
        label?: {
            font?: Font;
            horizontalAlignment?: string;
            position?: string;
            text?: string | undefined;
            verticalAlignment?: string;
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        value?: Date | number | string | undefined;
        width?: number;
    }>);
    get constantLineStyle(): {
        color?: string;
        dashStyle?: string;
        label?: {
            font?: Font;
            horizontalAlignment?: string;
            position?: string;
            verticalAlignment?: string;
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        width?: number;
    };
    set constantLineStyle(value: {
        color?: string;
        dashStyle?: string;
        label?: {
            font?: Font;
            horizontalAlignment?: string;
            position?: string;
            verticalAlignment?: string;
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        width?: number;
    });
    get customPosition(): Date | number | string | undefined;
    set customPosition(value: Date | number | string | undefined);
    get discreteAxisDivisionMode(): string;
    set discreteAxisDivisionMode(value: string);
    get endOnTick(): boolean | undefined;
    set endOnTick(value: boolean | undefined);
    get grid(): {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    };
    set grid(value: {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    });
    get inverted(): boolean;
    set inverted(value: boolean);
    get label(): {
        alignment?: string | undefined;
        customizeHint?: Function;
        customizeText?: Function;
        displayMode?: string;
        font?: Font;
        format?: Format | string | undefined;
        indentFromAxis?: number;
        overlappingBehavior?: string;
        position?: string;
        rotationAngle?: number;
        staggeringSpacing?: number;
        template?: any | undefined;
        textOverflow?: string;
        visible?: boolean;
        wordWrap?: string;
    };
    set label(value: {
        alignment?: string | undefined;
        customizeHint?: Function;
        customizeText?: Function;
        displayMode?: string;
        font?: Font;
        format?: Format | string | undefined;
        indentFromAxis?: number;
        overlappingBehavior?: string;
        position?: string;
        rotationAngle?: number;
        staggeringSpacing?: number;
        template?: any | undefined;
        textOverflow?: string;
        visible?: boolean;
        wordWrap?: string;
    });
    get linearThreshold(): number | undefined;
    set linearThreshold(value: number | undefined);
    get logarithmBase(): number;
    set logarithmBase(value: number);
    get maxAutoBreakCount(): number;
    set maxAutoBreakCount(value: number);
    get maxValueMargin(): number | undefined;
    set maxValueMargin(value: number | undefined);
    get minorGrid(): {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    };
    set minorGrid(value: {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    });
    get minorTick(): {
        color?: string;
        length?: number;
        opacity?: number;
        shift?: number;
        visible?: boolean;
        width?: number;
    };
    set minorTick(value: {
        color?: string;
        length?: number;
        opacity?: number;
        shift?: number;
        visible?: boolean;
        width?: number;
    });
    get minorTickCount(): number | undefined;
    set minorTickCount(value: number | undefined);
    get minorTickInterval(): number | string | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set minorTickInterval(value: number | string | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get minValueMargin(): number | undefined;
    set minValueMargin(value: number | undefined);
    get minVisualRangeLength(): number | string | undefined | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set minVisualRangeLength(value: number | string | undefined | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get multipleAxesSpacing(): number;
    set multipleAxesSpacing(value: number);
    get name(): string | undefined;
    set name(value: string | undefined);
    get offset(): number | undefined;
    set offset(value: number | undefined);
    get opacity(): number | undefined;
    set opacity(value: number | undefined);
    get pane(): string | undefined;
    set pane(value: string | undefined);
    get placeholderSize(): number;
    set placeholderSize(value: number);
    get position(): string;
    set position(value: string);
    get showZero(): boolean | undefined;
    set showZero(value: boolean | undefined);
    get strips(): Array<any | {
        color?: string | undefined;
        endValue?: Date | number | string | undefined;
        label?: {
            font?: Font;
            horizontalAlignment?: string;
            text?: string | undefined;
            verticalAlignment?: string;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        startValue?: Date | number | string | undefined;
    }>;
    set strips(value: Array<any | {
        color?: string | undefined;
        endValue?: Date | number | string | undefined;
        label?: {
            font?: Font;
            horizontalAlignment?: string;
            text?: string | undefined;
            verticalAlignment?: string;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        startValue?: Date | number | string | undefined;
    }>);
    get stripStyle(): {
        label?: {
            font?: Font;
            horizontalAlignment?: string;
            verticalAlignment?: string;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
    };
    set stripStyle(value: {
        label?: {
            font?: Font;
            horizontalAlignment?: string;
            verticalAlignment?: string;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
    });
    get synchronizedValue(): number | undefined;
    set synchronizedValue(value: number | undefined);
    get tick(): {
        color?: string;
        length?: number;
        opacity?: number | undefined;
        shift?: number;
        visible?: boolean;
        width?: number;
    };
    set tick(value: {
        color?: string;
        length?: number;
        opacity?: number | undefined;
        shift?: number;
        visible?: boolean;
        width?: number;
    });
    get tickInterval(): number | string | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set tickInterval(value: number | string | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get title(): string | {
        alignment?: string;
        font?: Font;
        margin?: number;
        text?: string | undefined;
        textOverflow?: string;
        wordWrap?: string;
    };
    set title(value: string | {
        alignment?: string;
        font?: Font;
        margin?: number;
        text?: string | undefined;
        textOverflow?: string;
        wordWrap?: string;
    });
    get type(): string | undefined;
    set type(value: string | undefined);
    get valueMarginsEnabled(): boolean;
    set valueMarginsEnabled(value: boolean);
    get valueType(): string | undefined;
    set valueType(value: string | undefined);
    get visible(): boolean;
    set visible(value: boolean);
    get visualRange(): DevExpress.common.charts.VisualRange | Array<number | string | Date>;
    set visualRange(value: DevExpress.common.charts.VisualRange | Array<number | string | Date>);
    get visualRangeUpdateMode(): string;
    set visualRangeUpdateMode(value: string);
    get wholeRange(): DevExpress.common.charts.VisualRange | undefined | Array<number | string | Date>;
    set wholeRange(value: DevExpress.common.charts.VisualRange | undefined | Array<number | string | Date>);
    get width(): number;
    set width(value: number);
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    categoriesChange: EventEmitter<Array<number | string | Date>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visualRangeChange: EventEmitter<DevExpress.common.charts.VisualRange | Array<number | string | Date>>;
    protected get _optionPath(): string;
    get breaksChildren(): QueryList<DxiBreakComponent>;
    set breaksChildren(value: QueryList<DxiBreakComponent>);
    get constantLinesChildren(): QueryList<DxiConstantLineComponent>;
    set constantLinesChildren(value: QueryList<DxiConstantLineComponent>);
    get stripsChildren(): QueryList<DxiStripComponent>;
    set stripsChildren(value: QueryList<DxiStripComponent>);
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiValueAxisComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxiValueAxisComponent, "dxi-value-axis", never, { "aggregatedPointsPosition": "aggregatedPointsPosition"; "allowDecimals": "allowDecimals"; "autoBreaksEnabled": "autoBreaksEnabled"; "axisDivisionFactor": "axisDivisionFactor"; "breaks": "breaks"; "breakStyle": "breakStyle"; "categories": "categories"; "color": "color"; "constantLines": "constantLines"; "constantLineStyle": "constantLineStyle"; "customPosition": "customPosition"; "discreteAxisDivisionMode": "discreteAxisDivisionMode"; "endOnTick": "endOnTick"; "grid": "grid"; "inverted": "inverted"; "label": "label"; "linearThreshold": "linearThreshold"; "logarithmBase": "logarithmBase"; "maxAutoBreakCount": "maxAutoBreakCount"; "maxValueMargin": "maxValueMargin"; "minorGrid": "minorGrid"; "minorTick": "minorTick"; "minorTickCount": "minorTickCount"; "minorTickInterval": "minorTickInterval"; "minValueMargin": "minValueMargin"; "minVisualRangeLength": "minVisualRangeLength"; "multipleAxesSpacing": "multipleAxesSpacing"; "name": "name"; "offset": "offset"; "opacity": "opacity"; "pane": "pane"; "placeholderSize": "placeholderSize"; "position": "position"; "showZero": "showZero"; "strips": "strips"; "stripStyle": "stripStyle"; "synchronizedValue": "synchronizedValue"; "tick": "tick"; "tickInterval": "tickInterval"; "title": "title"; "type": "type"; "valueMarginsEnabled": "valueMarginsEnabled"; "valueType": "valueType"; "visible": "visible"; "visualRange": "visualRange"; "visualRangeUpdateMode": "visualRangeUpdateMode"; "wholeRange": "wholeRange"; "width": "width"; }, { "categoriesChange": "categoriesChange"; "visualRangeChange": "visualRangeChange"; }, ["breaksChildren", "constantLinesChildren", "stripsChildren"], never>;
}
export declare class DxiValueAxisModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiValueAxisModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxiValueAxisModule, [typeof DxiValueAxisComponent], never, [typeof DxiValueAxisComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxiValueAxisModule>;
}
