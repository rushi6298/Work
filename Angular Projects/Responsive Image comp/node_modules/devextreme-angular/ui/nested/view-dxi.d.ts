import { dxSchedulerScrolling } from 'devextreme/ui/scheduler';
import { NestedOptionHost } from 'devextreme-angular/core';
import { CollectionNestedOption } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
export declare class DxiViewComponent extends CollectionNestedOption {
    get agendaDuration(): number;
    set agendaDuration(value: number);
    get allDayPanelMode(): string;
    set allDayPanelMode(value: string);
    get appointmentCollectorTemplate(): any;
    set appointmentCollectorTemplate(value: any);
    get appointmentTemplate(): any;
    set appointmentTemplate(value: any);
    get appointmentTooltipTemplate(): any;
    set appointmentTooltipTemplate(value: any);
    get cellDuration(): number;
    set cellDuration(value: number);
    get dataCellTemplate(): any;
    set dataCellTemplate(value: any);
    get dateCellTemplate(): any;
    set dateCellTemplate(value: any);
    get dropDownAppointmentTemplate(): any;
    set dropDownAppointmentTemplate(value: any);
    get endDayHour(): number;
    set endDayHour(value: number);
    get firstDayOfWeek(): number | string | undefined;
    set firstDayOfWeek(value: number | string | undefined);
    get groupByDate(): boolean;
    set groupByDate(value: boolean);
    get groupOrientation(): string;
    set groupOrientation(value: string);
    get groups(): Array<string>;
    set groups(value: Array<string>);
    get intervalCount(): number;
    set intervalCount(value: number);
    get maxAppointmentsPerCell(): number | string;
    set maxAppointmentsPerCell(value: number | string);
    get name(): string | undefined;
    set name(value: string | undefined);
    get resourceCellTemplate(): any;
    set resourceCellTemplate(value: any);
    get scrolling(): dxSchedulerScrolling;
    set scrolling(value: dxSchedulerScrolling);
    get startDate(): Date | number | string | undefined;
    set startDate(value: Date | number | string | undefined);
    get startDayHour(): number;
    set startDayHour(value: number);
    get timeCellTemplate(): any;
    set timeCellTemplate(value: any);
    get type(): string | undefined;
    set type(value: string | undefined);
    protected get _optionPath(): string;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiViewComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxiViewComponent, "dxi-view", never, { "agendaDuration": "agendaDuration"; "allDayPanelMode": "allDayPanelMode"; "appointmentCollectorTemplate": "appointmentCollectorTemplate"; "appointmentTemplate": "appointmentTemplate"; "appointmentTooltipTemplate": "appointmentTooltipTemplate"; "cellDuration": "cellDuration"; "dataCellTemplate": "dataCellTemplate"; "dateCellTemplate": "dateCellTemplate"; "dropDownAppointmentTemplate": "dropDownAppointmentTemplate"; "endDayHour": "endDayHour"; "firstDayOfWeek": "firstDayOfWeek"; "groupByDate": "groupByDate"; "groupOrientation": "groupOrientation"; "groups": "groups"; "intervalCount": "intervalCount"; "maxAppointmentsPerCell": "maxAppointmentsPerCell"; "name": "name"; "resourceCellTemplate": "resourceCellTemplate"; "scrolling": "scrolling"; "startDate": "startDate"; "startDayHour": "startDayHour"; "timeCellTemplate": "timeCellTemplate"; "type": "type"; }, {}, never, never>;
}
export declare class DxiViewModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiViewModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxiViewModule, [typeof DxiViewComponent], never, [typeof DxiViewComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxiViewModule>;
}
