import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { Format } from 'devextreme/localization';
import { Font } from 'devextreme/viz/core/base_widget';
import DxRangeSelector from 'devextreme/viz/range_selector';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
import * as i3 from "@angular/platform-browser";
/**
 * The RangeSelector is a UI component that allows a user to select a range of values on a scale.

 */
export declare class DxRangeSelectorComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxRangeSelector;
    /**
     * Specifies the properties for the range selector&apos;s background.
    
     */
    get background(): {
        color?: string;
        image?: {
            location?: string;
            url?: string | undefined;
        };
        visible?: boolean;
    };
    set background(value: {
        color?: string;
        image?: {
            location?: string;
            url?: string | undefined;
        };
        visible?: boolean;
    });
    /**
     * Specifies the RangeSelector&apos;s behavior properties.
    
     */
    get behavior(): {
        allowSlidersSwap?: boolean;
        animationEnabled?: boolean;
        callValueChanged?: string;
        manualRangeSelectionEnabled?: boolean;
        moveSelectedRangeByClick?: boolean;
        snapToTicks?: boolean;
    };
    set behavior(value: {
        allowSlidersSwap?: boolean;
        animationEnabled?: boolean;
        callValueChanged?: string;
        manualRangeSelectionEnabled?: boolean;
        moveSelectedRangeByClick?: boolean;
        snapToTicks?: boolean;
    });
    /**
     * Specifies the properties required to display a chart as the range selector&apos;s background.
    
     */
    get chart(): {
        barGroupPadding?: number;
        barGroupWidth?: number | undefined;
        bottomIndent?: number;
        commonSeriesSettings?: any;
        dataPrepareSettings?: {
            checkTypeForAllData?: boolean;
            convertToAxisDataType?: boolean;
            sortingMethod?: boolean | Function;
        };
        maxBubbleSize?: number;
        minBubbleSize?: number;
        negativesAsZeroes?: boolean;
        palette?: string | Array<string>;
        paletteExtensionMode?: string;
        series?: any | undefined | Array<any>;
        seriesTemplate?: {
            customizeSeries?: Function;
            nameField?: string;
        };
        topIndent?: number;
        valueAxis?: {
            inverted?: boolean;
            logarithmBase?: number;
            max?: number | undefined;
            min?: number | undefined;
            type?: string | undefined;
            valueType?: string | undefined;
        };
    };
    set chart(value: {
        barGroupPadding?: number;
        barGroupWidth?: number | undefined;
        bottomIndent?: number;
        commonSeriesSettings?: any;
        dataPrepareSettings?: {
            checkTypeForAllData?: boolean;
            convertToAxisDataType?: boolean;
            sortingMethod?: boolean | Function;
        };
        maxBubbleSize?: number;
        minBubbleSize?: number;
        negativesAsZeroes?: boolean;
        palette?: string | Array<string>;
        paletteExtensionMode?: string;
        series?: any | undefined | Array<any>;
        seriesTemplate?: {
            customizeSeries?: Function;
            nameField?: string;
        };
        topIndent?: number;
        valueAxis?: {
            inverted?: boolean;
            logarithmBase?: number;
            max?: number | undefined;
            min?: number | undefined;
            type?: string | undefined;
            valueType?: string | undefined;
        };
    });
    /**
     * Specifies the color of the parent page element.
    
     */
    get containerBackgroundColor(): string;
    set containerBackgroundColor(value: string);
    /**
     * Specifies a data source for the scale values and for the chart at the background.
    
     */
    get dataSource(): DataSource | DataSourceOptions | Store | null | string | Array<any>;
    set dataSource(value: DataSource | DataSourceOptions | Store | null | string | Array<any>);
    /**
     * Specifies the data source field that provides data for the scale.
    
     */
    get dataSourceField(): string;
    set dataSourceField(value: string);
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * Configures the exporting and printing features.
    
     */
    get export(): {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: Array<string>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    };
    set export(value: {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: Array<string>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    });
    /**
     * Range selector&apos;s indent properties.
    
     */
    get indent(): {
        left?: number | undefined;
        right?: number | undefined;
    };
    set indent(value: {
        left?: number | undefined;
        right?: number | undefined;
    });
    /**
     * Configures the loading indicator.
    
     */
    get loadingIndicator(): {
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    };
    set loadingIndicator(value: {
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    });
    /**
     * Generates space around the UI component.
    
     */
    get margin(): {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    };
    set margin(value: {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    });
    /**
     * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.
    
     */
    get pathModified(): boolean;
    set pathModified(value: boolean);
    /**
     * Specifies whether to redraw the UI component when the size of the container changes or a mobile device rotates.
    
     */
    get redrawOnResize(): boolean;
    set redrawOnResize(value: boolean);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * Specifies properties of the range selector&apos;s scale.
    
     */
    get scale(): {
        aggregateByCategory?: boolean;
        aggregationGroupWidth?: number | undefined;
        aggregationInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        allowDecimals?: boolean | undefined;
        breaks?: Array<DevExpress.common.charts.ScaleBreak>;
        breakStyle?: {
            color?: string;
            line?: string;
            width?: number;
        };
        categories?: Array<number | string | Date>;
        discreteAxisDivisionMode?: string;
        endOnTick?: boolean;
        endValue?: Date | number | string | undefined;
        holidays?: Array<Date | string | number>;
        label?: {
            customizeText?: Function;
            font?: Font;
            format?: Format | string | undefined;
            overlappingBehavior?: string;
            topIndent?: number;
            visible?: boolean;
        };
        linearThreshold?: number;
        logarithmBase?: number;
        marker?: {
            label?: {
                customizeText?: Function;
                format?: Format | string | undefined;
            };
            separatorHeight?: number;
            textLeftIndent?: number;
            textTopIndent?: number;
            topIndent?: number;
            visible?: boolean;
        };
        maxRange?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minorTick?: {
            color?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number | undefined;
        minorTickInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minRange?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        placeholderHeight?: number | undefined;
        showCustomBoundaryTicks?: boolean;
        singleWorkdays?: Array<Date | string | number>;
        startValue?: Date | number | string | undefined;
        tick?: {
            color?: string;
            opacity?: number;
            width?: number;
        };
        tickInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        type?: string | undefined;
        valueType?: string | undefined;
        workdaysOnly?: boolean;
        workWeek?: Array<number>;
    };
    set scale(value: {
        aggregateByCategory?: boolean;
        aggregationGroupWidth?: number | undefined;
        aggregationInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        allowDecimals?: boolean | undefined;
        breaks?: Array<DevExpress.common.charts.ScaleBreak>;
        breakStyle?: {
            color?: string;
            line?: string;
            width?: number;
        };
        categories?: Array<number | string | Date>;
        discreteAxisDivisionMode?: string;
        endOnTick?: boolean;
        endValue?: Date | number | string | undefined;
        holidays?: Array<Date | string | number>;
        label?: {
            customizeText?: Function;
            font?: Font;
            format?: Format | string | undefined;
            overlappingBehavior?: string;
            topIndent?: number;
            visible?: boolean;
        };
        linearThreshold?: number;
        logarithmBase?: number;
        marker?: {
            label?: {
                customizeText?: Function;
                format?: Format | string | undefined;
            };
            separatorHeight?: number;
            textLeftIndent?: number;
            textTopIndent?: number;
            topIndent?: number;
            visible?: boolean;
        };
        maxRange?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minorTick?: {
            color?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number | undefined;
        minorTickInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minRange?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        placeholderHeight?: number | undefined;
        showCustomBoundaryTicks?: boolean;
        singleWorkdays?: Array<Date | string | number>;
        startValue?: Date | number | string | undefined;
        tick?: {
            color?: string;
            opacity?: number;
            width?: number;
        };
        tickInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        type?: string | undefined;
        valueType?: string | undefined;
        workdaysOnly?: boolean;
        workWeek?: Array<number>;
    });
    /**
     * Specifies the color of the selected range.
    
     */
    get selectedRangeColor(): string;
    set selectedRangeColor(value: string);
    /**
     * Specifies how the selected range should behave when data is updated. Applies only when the RangeSelector is bound to a data source.
    
     */
    get selectedRangeUpdateMode(): string;
    set selectedRangeUpdateMode(value: string);
    /**
     * Specifies range selector shutter properties.
    
     */
    get shutter(): {
        color?: string | undefined;
        opacity?: number;
    };
    set shutter(value: {
        color?: string | undefined;
        opacity?: number;
    });
    /**
     * Specifies the UI component&apos;s size in pixels.
    
     */
    get size(): {
        height?: number | undefined;
        width?: number | undefined;
    };
    set size(value: {
        height?: number | undefined;
        width?: number | undefined;
    });
    /**
     * Specifies the appearance of the range selector&apos;s slider handles.
    
     */
    get sliderHandle(): {
        color?: string;
        opacity?: number;
        width?: number;
    };
    set sliderHandle(value: {
        color?: string;
        opacity?: number;
        width?: number;
    });
    /**
     * Defines the properties of the range selector slider markers.
    
     */
    get sliderMarker(): {
        color?: string;
        customizeText?: Function;
        font?: Font;
        format?: Format | string | undefined;
        invalidRangeColor?: string;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        placeholderHeight?: number | undefined;
        visible?: boolean;
    };
    set sliderMarker(value: {
        color?: string;
        customizeText?: Function;
        font?: Font;
        format?: Format | string | undefined;
        invalidRangeColor?: string;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        placeholderHeight?: number | undefined;
        visible?: boolean;
    });
    /**
     * Sets the name of the theme the UI component uses.
    
     */
    get theme(): string;
    set theme(value: string);
    /**
     * Configures the UI component&apos;s title.
    
     */
    get title(): string | {
        font?: Font;
        horizontalAlignment?: string;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: string;
            wordWrap?: string;
        };
        text?: string;
        textOverflow?: string;
        verticalAlignment?: string;
        wordWrap?: string;
    };
    set title(value: string | {
        font?: Font;
        horizontalAlignment?: string;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: string;
            wordWrap?: string;
        };
        text?: string;
        textOverflow?: string;
        verticalAlignment?: string;
        wordWrap?: string;
    });
    /**
     * The selected range (initial or current). Equals the entire scale when not set.
    
     */
    get value(): DevExpress.common.charts.VisualRange | Array<number | string | Date>;
    set value(value: DevExpress.common.charts.VisualRange | Array<number | string | Date>);
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function that is executed when the UI component&apos;s rendering has finished.
    
    
     */
    onDrawn: EventEmitter<any>;
    /**
    
     * A function that is executed after the UI component is exported.
    
    
     */
    onExported: EventEmitter<any>;
    /**
    
     * A function that is executed before the UI component is exported.
    
    
     */
    onExporting: EventEmitter<any>;
    /**
    
     * A function that is executed before a file with exported UI component is saved to the user&apos;s local storage.
    
    
     */
    onFileSaving: EventEmitter<any>;
    /**
    
     * A function that is executed when an error or warning occurs.
    
    
     */
    onIncidentOccurred: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed after the UI component&apos;s value is changed.
    
    
     */
    onValueChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    backgroundChange: EventEmitter<{
        color?: string;
        image?: {
            location?: string;
            url?: string | undefined;
        };
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    behaviorChange: EventEmitter<{
        allowSlidersSwap?: boolean;
        animationEnabled?: boolean;
        callValueChanged?: string;
        manualRangeSelectionEnabled?: boolean;
        moveSelectedRangeByClick?: boolean;
        snapToTicks?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    chartChange: EventEmitter<{
        barGroupPadding?: number;
        barGroupWidth?: number | undefined;
        bottomIndent?: number;
        commonSeriesSettings?: any;
        dataPrepareSettings?: {
            checkTypeForAllData?: boolean;
            convertToAxisDataType?: boolean;
            sortingMethod?: boolean | Function;
        };
        maxBubbleSize?: number;
        minBubbleSize?: number;
        negativesAsZeroes?: boolean;
        palette?: string | Array<string>;
        paletteExtensionMode?: string;
        series?: any | undefined | Array<any>;
        seriesTemplate?: {
            customizeSeries?: Function;
            nameField?: string;
        };
        topIndent?: number;
        valueAxis?: {
            inverted?: boolean;
            logarithmBase?: number;
            max?: number | undefined;
            min?: number | undefined;
            type?: string | undefined;
            valueType?: string | undefined;
        };
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    containerBackgroundColorChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DataSource | DataSourceOptions | Store | null | string | Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceFieldChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    exportChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: Array<string>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    indentChange: EventEmitter<{
        left?: number | undefined;
        right?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    loadingIndicatorChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    marginChange: EventEmitter<{
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pathModifiedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    redrawOnResizeChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scaleChange: EventEmitter<{
        aggregateByCategory?: boolean;
        aggregationGroupWidth?: number | undefined;
        aggregationInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        allowDecimals?: boolean | undefined;
        breaks?: Array<DevExpress.common.charts.ScaleBreak>;
        breakStyle?: {
            color?: string;
            line?: string;
            width?: number;
        };
        categories?: Array<number | string | Date>;
        discreteAxisDivisionMode?: string;
        endOnTick?: boolean;
        endValue?: Date | number | string | undefined;
        holidays?: Array<Date | string | number>;
        label?: {
            customizeText?: Function;
            font?: Font;
            format?: Format | string | undefined;
            overlappingBehavior?: string;
            topIndent?: number;
            visible?: boolean;
        };
        linearThreshold?: number;
        logarithmBase?: number;
        marker?: {
            label?: {
                customizeText?: Function;
                format?: Format | string | undefined;
            };
            separatorHeight?: number;
            textLeftIndent?: number;
            textTopIndent?: number;
            topIndent?: number;
            visible?: boolean;
        };
        maxRange?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minorTick?: {
            color?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number | undefined;
        minorTickInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minRange?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        placeholderHeight?: number | undefined;
        showCustomBoundaryTicks?: boolean;
        singleWorkdays?: Array<Date | string | number>;
        startValue?: Date | number | string | undefined;
        tick?: {
            color?: string;
            opacity?: number;
            width?: number;
        };
        tickInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        type?: string | undefined;
        valueType?: string | undefined;
        workdaysOnly?: boolean;
        workWeek?: Array<number>;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedRangeColorChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedRangeUpdateModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    shutterChange: EventEmitter<{
        color?: string | undefined;
        opacity?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sizeChange: EventEmitter<{
        height?: number | undefined;
        width?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sliderHandleChange: EventEmitter<{
        color?: string;
        opacity?: number;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sliderMarkerChange: EventEmitter<{
        color?: string;
        customizeText?: Function;
        font?: Font;
        format?: Format | string | undefined;
        invalidRangeColor?: string;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        placeholderHeight?: number | undefined;
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    themeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    titleChange: EventEmitter<string | {
        font?: Font;
        horizontalAlignment?: string;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: string;
            wordWrap?: string;
        };
        text?: string;
        textOverflow?: string;
        verticalAlignment?: string;
        wordWrap?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChange: EventEmitter<DevExpress.common.charts.VisualRange | Array<number | string | Date>>;
    /**
    
     * 
    
    
     */
    onBlur: EventEmitter<any>;
    change(_: any): void;
    touched: (_: any) => void;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxRangeSelector;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _createWidget(element: any): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxRangeSelectorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxRangeSelectorComponent, "dx-range-selector", never, { "background": "background"; "behavior": "behavior"; "chart": "chart"; "containerBackgroundColor": "containerBackgroundColor"; "dataSource": "dataSource"; "dataSourceField": "dataSourceField"; "disabled": "disabled"; "elementAttr": "elementAttr"; "export": "export"; "indent": "indent"; "loadingIndicator": "loadingIndicator"; "margin": "margin"; "pathModified": "pathModified"; "redrawOnResize": "redrawOnResize"; "rtlEnabled": "rtlEnabled"; "scale": "scale"; "selectedRangeColor": "selectedRangeColor"; "selectedRangeUpdateMode": "selectedRangeUpdateMode"; "shutter": "shutter"; "size": "size"; "sliderHandle": "sliderHandle"; "sliderMarker": "sliderMarker"; "theme": "theme"; "title": "title"; "value": "value"; }, { "onDisposing": "onDisposing"; "onDrawn": "onDrawn"; "onExported": "onExported"; "onExporting": "onExporting"; "onFileSaving": "onFileSaving"; "onIncidentOccurred": "onIncidentOccurred"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onValueChanged": "onValueChanged"; "backgroundChange": "backgroundChange"; "behaviorChange": "behaviorChange"; "chartChange": "chartChange"; "containerBackgroundColorChange": "containerBackgroundColorChange"; "dataSourceChange": "dataSourceChange"; "dataSourceFieldChange": "dataSourceFieldChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "exportChange": "exportChange"; "indentChange": "indentChange"; "loadingIndicatorChange": "loadingIndicatorChange"; "marginChange": "marginChange"; "pathModifiedChange": "pathModifiedChange"; "redrawOnResizeChange": "redrawOnResizeChange"; "rtlEnabledChange": "rtlEnabledChange"; "scaleChange": "scaleChange"; "selectedRangeColorChange": "selectedRangeColorChange"; "selectedRangeUpdateModeChange": "selectedRangeUpdateModeChange"; "shutterChange": "shutterChange"; "sizeChange": "sizeChange"; "sliderHandleChange": "sliderHandleChange"; "sliderMarkerChange": "sliderMarkerChange"; "themeChange": "themeChange"; "titleChange": "titleChange"; "valueChange": "valueChange"; "onBlur": "onBlur"; }, never, never>;
}
export declare class DxRangeSelectorModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxRangeSelectorModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxRangeSelectorModule, [typeof DxRangeSelectorComponent], [typeof i1.DxoBackgroundModule, typeof i1.DxoImageModule, typeof i1.DxoBehaviorModule, typeof i1.DxoChartModule, typeof i1.DxoCommonSeriesSettingsModule, typeof i1.DxoAggregationModule, typeof i1.DxoAreaModule, typeof i1.DxoBorderModule, typeof i1.DxoHoverStyleModule, typeof i1.DxoHatchingModule, typeof i1.DxoLabelModule, typeof i1.DxoConnectorModule, typeof i1.DxoPointModule, typeof i1.DxoHeightModule, typeof i1.DxoUrlModule, typeof i1.DxoWidthModule, typeof i1.DxoSelectionStyleModule, typeof i1.DxoReductionModule, typeof i1.DxoValueErrorBarModule, typeof i1.DxoBarModule, typeof i1.DxoBubbleModule, typeof i1.DxoCandlestickModule, typeof i1.DxoFullstackedareaModule, typeof i1.DxoFullstackedbarModule, typeof i1.DxoFullstackedlineModule, typeof i1.DxoFullstackedsplineModule, typeof i1.DxoFullstackedsplineareaModule, typeof i1.DxoArgumentFormatModule, typeof i1.DxoFontModule, typeof i1.DxoFormatModule, typeof i1.DxoLineModule, typeof i1.DxoRangeareaModule, typeof i1.DxoRangebarModule, typeof i1.DxoScatterModule, typeof i1.DxoSplineModule, typeof i1.DxoSplineareaModule, typeof i1.DxoStackedareaModule, typeof i1.DxoStackedbarModule, typeof i1.DxoStackedlineModule, typeof i1.DxoStackedsplineModule, typeof i1.DxoStackedsplineareaModule, typeof i1.DxoStepareaModule, typeof i1.DxoSteplineModule, typeof i1.DxoStockModule, typeof i1.DxoDataPrepareSettingsModule, typeof i1.DxiSeriesModule, typeof i1.DxoSeriesTemplateModule, typeof i1.DxoValueAxisModule, typeof i1.DxoExportModule, typeof i1.DxoIndentModule, typeof i1.DxoLoadingIndicatorModule, typeof i1.DxoMarginModule, typeof i1.DxoScaleModule, typeof i1.DxoAggregationIntervalModule, typeof i1.DxiBreakModule, typeof i1.DxoBreakStyleModule, typeof i1.DxoMarkerModule, typeof i1.DxoMaxRangeModule, typeof i1.DxoMinorTickModule, typeof i1.DxoMinorTickIntervalModule, typeof i1.DxoMinRangeModule, typeof i1.DxoTickModule, typeof i1.DxoTickIntervalModule, typeof i1.DxoShutterModule, typeof i1.DxoSizeModule, typeof i1.DxoSliderHandleModule, typeof i1.DxoSliderMarkerModule, typeof i1.DxoTitleModule, typeof i1.DxoSubtitleModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule, typeof i3.BrowserTransferStateModule], [typeof DxRangeSelectorComponent, typeof i1.DxoBackgroundModule, typeof i1.DxoImageModule, typeof i1.DxoBehaviorModule, typeof i1.DxoChartModule, typeof i1.DxoCommonSeriesSettingsModule, typeof i1.DxoAggregationModule, typeof i1.DxoAreaModule, typeof i1.DxoBorderModule, typeof i1.DxoHoverStyleModule, typeof i1.DxoHatchingModule, typeof i1.DxoLabelModule, typeof i1.DxoConnectorModule, typeof i1.DxoPointModule, typeof i1.DxoHeightModule, typeof i1.DxoUrlModule, typeof i1.DxoWidthModule, typeof i1.DxoSelectionStyleModule, typeof i1.DxoReductionModule, typeof i1.DxoValueErrorBarModule, typeof i1.DxoBarModule, typeof i1.DxoBubbleModule, typeof i1.DxoCandlestickModule, typeof i1.DxoFullstackedareaModule, typeof i1.DxoFullstackedbarModule, typeof i1.DxoFullstackedlineModule, typeof i1.DxoFullstackedsplineModule, typeof i1.DxoFullstackedsplineareaModule, typeof i1.DxoArgumentFormatModule, typeof i1.DxoFontModule, typeof i1.DxoFormatModule, typeof i1.DxoLineModule, typeof i1.DxoRangeareaModule, typeof i1.DxoRangebarModule, typeof i1.DxoScatterModule, typeof i1.DxoSplineModule, typeof i1.DxoSplineareaModule, typeof i1.DxoStackedareaModule, typeof i1.DxoStackedbarModule, typeof i1.DxoStackedlineModule, typeof i1.DxoStackedsplineModule, typeof i1.DxoStackedsplineareaModule, typeof i1.DxoStepareaModule, typeof i1.DxoSteplineModule, typeof i1.DxoStockModule, typeof i1.DxoDataPrepareSettingsModule, typeof i1.DxiSeriesModule, typeof i1.DxoSeriesTemplateModule, typeof i1.DxoValueAxisModule, typeof i1.DxoExportModule, typeof i1.DxoIndentModule, typeof i1.DxoLoadingIndicatorModule, typeof i1.DxoMarginModule, typeof i1.DxoScaleModule, typeof i1.DxoAggregationIntervalModule, typeof i1.DxiBreakModule, typeof i1.DxoBreakStyleModule, typeof i1.DxoMarkerModule, typeof i1.DxoMaxRangeModule, typeof i1.DxoMinorTickModule, typeof i1.DxoMinorTickIntervalModule, typeof i1.DxoMinRangeModule, typeof i1.DxoTickModule, typeof i1.DxoTickIntervalModule, typeof i1.DxoShutterModule, typeof i1.DxoSizeModule, typeof i1.DxoSliderHandleModule, typeof i1.DxoSliderMarkerModule, typeof i1.DxoTitleModule, typeof i1.DxoSubtitleModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxRangeSelectorModule>;
}
