import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';
import { UserDefinedElement } from 'devextreme/core/element';
import DxResizable from 'devextreme/ui/resizable';
import { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
import * as i2 from "@angular/platform-browser";
/**
 * The Resizable UI component enables its content to be resizable in the UI.

 */
export declare class DxResizableComponent extends DxComponent implements OnDestroy {
    instance: DxResizable;
    /**
     * Specifies the area within which users can resize the UI component.
    
     */
    get area(): string | UserDefinedElement | undefined;
    set area(value: string | UserDefinedElement | undefined);
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * Specifies which borders of the UI component element are used as a handle.
    
     */
    get handles(): string;
    set handles(value: string);
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): number | Function | string;
    set height(value: number | Function | string);
    /**
     * Specifies whether to resize the UI component&apos;s content proportionally when you use corner handles.
    
     */
    get keepAspectRatio(): boolean;
    set keepAspectRatio(value: boolean);
    /**
     * Specifies the upper height boundary for resizing.
    
     */
    get maxHeight(): number;
    set maxHeight(value: number);
    /**
     * Specifies the upper width boundary for resizing.
    
     */
    get maxWidth(): number;
    set maxWidth(value: number);
    /**
     * Specifies the lower height boundary for resizing.
    
     */
    get minHeight(): number;
    set minHeight(value: number);
    /**
     * Specifies the lower width boundary for resizing.
    
     */
    get minWidth(): number;
    set minWidth(value: number);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): number | Function | string;
    set width(value: number | Function | string);
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed each time the UI component is resized by one pixel.
    
    
     */
    onResize: EventEmitter<any>;
    /**
    
     * A function that is executed when resizing ends.
    
    
     */
    onResizeEnd: EventEmitter<any>;
    /**
    
     * A function that is executed when resizing starts.
    
    
     */
    onResizeStart: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    areaChange: EventEmitter<string | UserDefinedElement | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    handlesChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    keepAspectRatioChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxHeightChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxWidthChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minHeightChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minWidthChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxResizable;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxResizableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxResizableComponent, "dx-resizable", never, { "area": "area"; "elementAttr": "elementAttr"; "handles": "handles"; "height": "height"; "keepAspectRatio": "keepAspectRatio"; "maxHeight": "maxHeight"; "maxWidth": "maxWidth"; "minHeight": "minHeight"; "minWidth": "minWidth"; "rtlEnabled": "rtlEnabled"; "width": "width"; }, { "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onResize": "onResize"; "onResizeEnd": "onResizeEnd"; "onResizeStart": "onResizeStart"; "areaChange": "areaChange"; "elementAttrChange": "elementAttrChange"; "handlesChange": "handlesChange"; "heightChange": "heightChange"; "keepAspectRatioChange": "keepAspectRatioChange"; "maxHeightChange": "maxHeightChange"; "maxWidthChange": "maxWidthChange"; "minHeightChange": "minHeightChange"; "minWidthChange": "minWidthChange"; "rtlEnabledChange": "rtlEnabledChange"; "widthChange": "widthChange"; }, never, ["*"]>;
}
export declare class DxResizableModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxResizableModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxResizableModule, [typeof DxResizableComponent], [typeof i1.DxIntegrationModule, typeof i1.DxTemplateModule, typeof i2.BrowserTransferStateModule], [typeof DxResizableComponent, typeof i1.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxResizableModule>;
}
