import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { dxSchedulerScrolling } from 'devextreme/ui/scheduler';
import DxScheduler from 'devextreme/ui/scheduler';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiResourceComponent } from 'devextreme-angular/ui/nested';
import { DxiViewComponent } from 'devextreme-angular/ui/nested';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
import * as i3 from "@angular/platform-browser";
/**
 * The Scheduler is a UI component that represents scheduled data and allows a user to manage and edit it.

 */
export declare class DxSchedulerComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxScheduler;
    /**
     * Specifies the shortcut key that sets focus on the UI component.
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * Specifies whether the UI component adapts to small screens.
    
     */
    get adaptivityEnabled(): boolean;
    set adaptivityEnabled(value: boolean);
    /**
     * Specifies the name of the data source item field whose value defines whether or not the corresponding appointment is an all-day appointment.
    
     */
    get allDayExpr(): string;
    set allDayExpr(value: string);
    /**
     * Specifies the display mode for the All day panel.
    
     */
    get allDayPanelMode(): string;
    set allDayPanelMode(value: string);
    /**
     * Specifies a custom template for cell overflow indicators.
    
     */
    get appointmentCollectorTemplate(): any;
    set appointmentCollectorTemplate(value: any);
    /**
     * Configures appointment reordering using drag and drop gestures.
    
     */
    get appointmentDragging(): {
        autoScroll?: boolean;
        data?: any | undefined;
        group?: string | undefined;
        onAdd?: Function;
        onDragEnd?: Function;
        onDragMove?: Function;
        onDragStart?: Function;
        onRemove?: Function;
        scrollSensitivity?: number;
        scrollSpeed?: number;
    };
    set appointmentDragging(value: {
        autoScroll?: boolean;
        data?: any | undefined;
        group?: string | undefined;
        onAdd?: Function;
        onDragEnd?: Function;
        onDragMove?: Function;
        onDragStart?: Function;
        onRemove?: Function;
        scrollSensitivity?: number;
        scrollSpeed?: number;
    });
    /**
     * Specifies a custom template for appointments.
    
     */
    get appointmentTemplate(): any;
    set appointmentTemplate(value: any);
    /**
     * Specifies a custom template for tooltips displayed when users click an appointment or cell overflow indicator.
    
     */
    get appointmentTooltipTemplate(): any;
    set appointmentTooltipTemplate(value: any);
    /**
     * Specifies cell duration in minutes. This property&apos;s value should divide the interval between startDayHour and endDayHour into even parts.
    
     */
    get cellDuration(): number;
    set cellDuration(value: number);
    /**
     * Specifies whether or not an end user can scroll the view in both directions at the same time.
    
     */
    get crossScrollingEnabled(): boolean;
    set crossScrollingEnabled(value: boolean);
    /**
     * Specifies the current date.
    
     */
    get currentDate(): Date | number | string;
    set currentDate(value: Date | number | string);
    /**
     * Specifies the displayed view. Accepts name or type of a view available in the views array.
    
     */
    get currentView(): string;
    set currentView(value: string);
    /**
     * Customizes the date navigator&apos;s text.
    
     */
    get customizeDateNavigatorText(): Function | undefined;
    set customizeDateNavigatorText(value: Function | undefined);
    /**
     * Specifies a custom template for table cells.
    
     */
    get dataCellTemplate(): any;
    set dataCellTemplate(value: any);
    /**
     * Binds the UI component to data.
    
     */
    get dataSource(): DataSource | DataSourceOptions | Store | null | string | Array<DevExpress.ui.dxSchedulerAppointment>;
    set dataSource(value: DataSource | DataSourceOptions | Store | null | string | Array<DevExpress.ui.dxSchedulerAppointment>);
    /**
     * Specifies a custom template for day scale items.
    
     */
    get dateCellTemplate(): any;
    set dateCellTemplate(value: any);
    /**
     * Specifies the format in which date-time values should be sent to the server.
    
     */
    get dateSerializationFormat(): string | undefined;
    set dateSerializationFormat(value: string | undefined);
    /**
     * Specifies the name of the data source item field whose value holds the description of the corresponding appointment.
    
     */
    get descriptionExpr(): string;
    set descriptionExpr(value: string);
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Specifies a custom template for tooltips displayed when users click a cell overflow indicator.
    
     * @deprecated Use the appointmentTooltipTemplate option instead.
    
     */
    get dropDownAppointmentTemplate(): any;
    set dropDownAppointmentTemplate(value: any);
    /**
     * Specifies which editing operations a user can perform on appointments.
    
     */
    get editing(): boolean | {
        allowAdding?: boolean;
        allowDeleting?: boolean;
        allowDragging?: boolean;
        allowResizing?: boolean;
        allowTimeZoneEditing?: boolean;
        allowUpdating?: boolean;
    };
    set editing(value: boolean | {
        allowAdding?: boolean;
        allowDeleting?: boolean;
        allowDragging?: boolean;
        allowResizing?: boolean;
        allowTimeZoneEditing?: boolean;
        allowUpdating?: boolean;
    });
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * Specifies the name of the data source item field that defines the ending of an appointment.
    
     */
    get endDateExpr(): string;
    set endDateExpr(value: string);
    /**
     * Specifies the name of the data source item field that defines the timezone of the appointment end date.
    
     */
    get endDateTimeZoneExpr(): string;
    set endDateTimeZoneExpr(value: string);
    /**
     * Specifies the last hour on the time scale. Accepts integer values from 0 to 24.
    
     */
    get endDayHour(): number;
    set endDayHour(value: number);
    /**
     * Specifies the first day of a week. Does not apply to the agenda view.
    
     */
    get firstDayOfWeek(): number | string | undefined;
    set firstDayOfWeek(value: number | string | undefined);
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * If true, appointments are grouped by date first and then by resource; opposite if false. Applies only if appointments are grouped and groupOrientation is &apos;horizontal&apos;.
    
     */
    get groupByDate(): boolean;
    set groupByDate(value: boolean);
    /**
     * Specifies the resource kinds by which the scheduler&apos;s appointments are grouped in a timetable.
    
     */
    get groups(): Array<string>;
    set groups(value: Array<string>);
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * Specifies text for a hint that appears when a user pauses on the UI component.
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * Specifies the time interval between when the date-time indicator changes its position, in milliseconds.
    
     */
    get indicatorUpdateInterval(): number;
    set indicatorUpdateInterval(value: number);
    /**
     * The latest date the UI component allows you to select.
    
     */
    get max(): Date | number | string | undefined;
    set max(value: Date | number | string | undefined);
    /**
     * Specifies the limit of full-sized appointments displayed per cell. Applies to all views except &apos;agenda&apos;.
    
     */
    get maxAppointmentsPerCell(): number | string;
    set maxAppointmentsPerCell(value: number | string);
    /**
     * The earliest date the UI component allows you to select.
    
     */
    get min(): Date | number | string | undefined;
    set min(value: Date | number | string | undefined);
    /**
     * Specifies the text or HTML markup displayed by the UI component if the item collection is empty. Available for the Agenda view only.
    
     */
    get noDataText(): string;
    set noDataText(value: string);
    /**
     * Specifies the edit mode for recurring appointments.
    
     */
    get recurrenceEditMode(): string;
    set recurrenceEditMode(value: string);
    /**
     * Specifies the name of the data source item field that defines exceptions for the current recurring appointment.
    
     */
    get recurrenceExceptionExpr(): string;
    set recurrenceExceptionExpr(value: string);
    /**
     * Specifies the name of the data source item field that defines a recurrence rule for generating recurring appointments.
    
     */
    get recurrenceRuleExpr(): string;
    set recurrenceRuleExpr(value: string);
    /**
     * Specifies whether filtering is performed on the server or client side.
    
     */
    get remoteFiltering(): boolean;
    set remoteFiltering(value: boolean);
    /**
     * Specifies a custom template for resource headers.
    
     */
    get resourceCellTemplate(): any;
    set resourceCellTemplate(value: any);
    /**
     * Specifies an array of resources available in the scheduler.
    
     */
    get resources(): Array<any | {
        allowMultiple?: boolean;
        colorExpr?: string;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        displayExpr?: Function | string;
        fieldExpr?: string;
        label?: string;
        useColorAsDefault?: boolean;
        valueExpr?: Function | string;
    }>;
    set resources(value: Array<any | {
        allowMultiple?: boolean;
        colorExpr?: string;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        displayExpr?: Function | string;
        fieldExpr?: string;
        label?: string;
        useColorAsDefault?: boolean;
        valueExpr?: Function | string;
    }>);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * Configures scrolling.
    
     */
    get scrolling(): dxSchedulerScrolling;
    set scrolling(value: dxSchedulerScrolling);
    /**
     * The data of the currently selected cells.
    
     */
    get selectedCellData(): Array<any>;
    set selectedCellData(value: Array<any>);
    /**
     * Specifies whether to apply shading to cover the timetable up to the current time.
    
     */
    get shadeUntilCurrentTime(): boolean;
    set shadeUntilCurrentTime(value: boolean);
    /**
     * Specifies the &apos;All-day&apos; panel&apos;s visibility. Setting this property to false hides the panel along with the all-day appointments.
    
     */
    get showAllDayPanel(): boolean;
    set showAllDayPanel(value: boolean);
    /**
     * Specifies the current date-time indicator&apos;s visibility.
    
     */
    get showCurrentTimeIndicator(): boolean;
    set showCurrentTimeIndicator(value: boolean);
    /**
     * Specifies the name of the data source item field that defines the start of an appointment.
    
     */
    get startDateExpr(): string;
    set startDateExpr(value: string);
    /**
     * Specifies the name of the data source item field that defines the timezone of the appointment start date.
    
     */
    get startDateTimeZoneExpr(): string;
    set startDateTimeZoneExpr(value: string);
    /**
     * Specifies the first hour on the time scale. Accepts integer values from 0 to 24.
    
     */
    get startDayHour(): number;
    set startDayHour(value: number);
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * Specifies the name of the data source item field that holds the subject of an appointment.
    
     */
    get textExpr(): string;
    set textExpr(value: string);
    /**
     * Specifies a custom template for time scale items.
    
     */
    get timeCellTemplate(): any;
    set timeCellTemplate(value: any);
    /**
     * Specifies the time zone for the Scheduler&apos;s grid. Accepts values from the IANA time zone database.
    
     */
    get timeZone(): string;
    set timeZone(value: string);
    /**
     * Specifies whether a user can switch views using tabs or a drop-down menu.
    
     */
    get useDropDownViewSwitcher(): boolean;
    set useDropDownViewSwitcher(value: boolean);
    /**
     * Specifies and configures the views to be available in the view switcher.
    
     */
    get views(): string | Array<string | any | {
        agendaDuration?: number;
        allDayPanelMode?: string;
        appointmentCollectorTemplate?: any;
        appointmentTemplate?: any;
        appointmentTooltipTemplate?: any;
        cellDuration?: number;
        dataCellTemplate?: any;
        dateCellTemplate?: any;
        dropDownAppointmentTemplate?: any;
        endDayHour?: number;
        firstDayOfWeek?: number | string | undefined;
        groupByDate?: boolean;
        groupOrientation?: string;
        groups?: Array<string>;
        intervalCount?: number;
        maxAppointmentsPerCell?: number | string;
        name?: string | undefined;
        resourceCellTemplate?: any;
        scrolling?: dxSchedulerScrolling;
        startDate?: Date | number | string | undefined;
        startDayHour?: number;
        timeCellTemplate?: any;
        type?: string | undefined;
    }>;
    set views(value: string | Array<string | any | {
        agendaDuration?: number;
        allDayPanelMode?: string;
        appointmentCollectorTemplate?: any;
        appointmentTemplate?: any;
        appointmentTooltipTemplate?: any;
        cellDuration?: number;
        dataCellTemplate?: any;
        dateCellTemplate?: any;
        dropDownAppointmentTemplate?: any;
        endDayHour?: number;
        firstDayOfWeek?: number | string | undefined;
        groupByDate?: boolean;
        groupOrientation?: string;
        groups?: Array<string>;
        intervalCount?: number;
        maxAppointmentsPerCell?: number | string;
        name?: string | undefined;
        resourceCellTemplate?: any;
        scrolling?: dxSchedulerScrolling;
        startDate?: Date | number | string | undefined;
        startDayHour?: number;
        timeCellTemplate?: any;
        type?: string | undefined;
    }>);
    /**
     * Specifies whether the UI component is visible.
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
    
     * A function that is executed after an appointment is added to the data source.
    
    
     */
    onAppointmentAdded: EventEmitter<any>;
    /**
    
     * A function that is executed before an appointment is added to the data source.
    
    
     */
    onAppointmentAdding: EventEmitter<any>;
    /**
    
     * A function that is executed when an appointment is clicked or tapped.
    
    
     */
    onAppointmentClick: EventEmitter<any>;
    /**
    
     * A function that is executed when a user attempts to open the browser&apos;s context menu for an appointment. Allows you to replace this context menu with a custom context menu.
    
    
     */
    onAppointmentContextMenu: EventEmitter<any>;
    /**
    
     * A function that is executed when an appointment is double-clicked or double-tapped.
    
    
     */
    onAppointmentDblClick: EventEmitter<any>;
    /**
    
     * A function that is executed after an appointment is deleted from the data source.
    
    
     */
    onAppointmentDeleted: EventEmitter<any>;
    /**
    
     * A function that is executed before an appointment is deleted from the data source.
    
    
     */
    onAppointmentDeleting: EventEmitter<any>;
    /**
    
     * A function that is executed before an appointment details form appears. Use this function to customize the form.
    
    
     */
    onAppointmentFormOpening: EventEmitter<any>;
    /**
    
     * A function that is executed when an appointment is rendered.
    
    
     */
    onAppointmentRendered: EventEmitter<any>;
    /**
    
     * Occurs before showing an appointment&apos;s tooltip.
    
    
     */
    onAppointmentTooltipShowing: EventEmitter<any>;
    /**
    
     * A function that is executed after an appointment is updated in the data source.
    
    
     */
    onAppointmentUpdated: EventEmitter<any>;
    /**
    
     * A function that is executed before an appointment is updated in the data source.
    
    
     */
    onAppointmentUpdating: EventEmitter<any>;
    /**
    
     * A function that is executed when a view cell is clicked.
    
    
     */
    onCellClick: EventEmitter<any>;
    /**
    
     * A function that is executed when a user attempts to open the browser&apos;s context menu for a cell. Allows you to replace this context menu with a custom context menu.
    
    
     */
    onCellContextMenu: EventEmitter<any>;
    /**
    
     * A function that is executed when the UI component is rendered and each time the component is repainted.
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    adaptivityEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allDayExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allDayPanelModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    appointmentCollectorTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    appointmentDraggingChange: EventEmitter<{
        autoScroll?: boolean;
        data?: any | undefined;
        group?: string | undefined;
        onAdd?: Function;
        onDragEnd?: Function;
        onDragMove?: Function;
        onDragStart?: Function;
        onRemove?: Function;
        scrollSensitivity?: number;
        scrollSpeed?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    appointmentTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    appointmentTooltipTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    cellDurationChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    crossScrollingEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    currentDateChange: EventEmitter<Date | number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    currentViewChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizeDateNavigatorTextChange: EventEmitter<Function | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataCellTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DataSource | DataSourceOptions | Store | null | string | Array<DevExpress.ui.dxSchedulerAppointment>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dateCellTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dateSerializationFormatChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    descriptionExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dropDownAppointmentTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    editingChange: EventEmitter<boolean | {
        allowAdding?: boolean;
        allowDeleting?: boolean;
        allowDragging?: boolean;
        allowResizing?: boolean;
        allowTimeZoneEditing?: boolean;
        allowUpdating?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    endDateExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    endDateTimeZoneExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    endDayHourChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    firstDayOfWeekChange: EventEmitter<number | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupByDateChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupsChange: EventEmitter<Array<string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    indicatorUpdateIntervalChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxChange: EventEmitter<Date | number | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxAppointmentsPerCellChange: EventEmitter<number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minChange: EventEmitter<Date | number | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    noDataTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    recurrenceEditModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    recurrenceExceptionExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    recurrenceRuleExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    remoteFilteringChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    resourceCellTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    resourcesChange: EventEmitter<Array<any | {
        allowMultiple?: boolean;
        colorExpr?: string;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        displayExpr?: Function | string;
        fieldExpr?: string;
        label?: string;
        useColorAsDefault?: boolean;
        valueExpr?: Function | string;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollingChange: EventEmitter<dxSchedulerScrolling>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedCellDataChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    shadeUntilCurrentTimeChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showAllDayPanelChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showCurrentTimeIndicatorChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    startDateExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    startDateTimeZoneExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    startDayHourChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    textExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    timeCellTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    timeZoneChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useDropDownViewSwitcherChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    viewsChange: EventEmitter<string | Array<string | any | {
        agendaDuration?: number;
        allDayPanelMode?: string;
        appointmentCollectorTemplate?: any;
        appointmentTemplate?: any;
        appointmentTooltipTemplate?: any;
        cellDuration?: number;
        dataCellTemplate?: any;
        dateCellTemplate?: any;
        dropDownAppointmentTemplate?: any;
        endDayHour?: number;
        firstDayOfWeek?: number | string | undefined;
        groupByDate?: boolean;
        groupOrientation?: string;
        groups?: Array<string>;
        intervalCount?: number;
        maxAppointmentsPerCell?: number | string;
        name?: string | undefined;
        resourceCellTemplate?: any;
        scrolling?: dxSchedulerScrolling;
        startDate?: Date | number | string | undefined;
        startDayHour?: number;
        timeCellTemplate?: any;
        type?: string | undefined;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    get resourcesChildren(): QueryList<DxiResourceComponent>;
    set resourcesChildren(value: QueryList<DxiResourceComponent>);
    get viewsChildren(): QueryList<DxiViewComponent>;
    set viewsChildren(value: QueryList<DxiViewComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxScheduler;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxSchedulerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxSchedulerComponent, "dx-scheduler", never, { "accessKey": "accessKey"; "adaptivityEnabled": "adaptivityEnabled"; "allDayExpr": "allDayExpr"; "allDayPanelMode": "allDayPanelMode"; "appointmentCollectorTemplate": "appointmentCollectorTemplate"; "appointmentDragging": "appointmentDragging"; "appointmentTemplate": "appointmentTemplate"; "appointmentTooltipTemplate": "appointmentTooltipTemplate"; "cellDuration": "cellDuration"; "crossScrollingEnabled": "crossScrollingEnabled"; "currentDate": "currentDate"; "currentView": "currentView"; "customizeDateNavigatorText": "customizeDateNavigatorText"; "dataCellTemplate": "dataCellTemplate"; "dataSource": "dataSource"; "dateCellTemplate": "dateCellTemplate"; "dateSerializationFormat": "dateSerializationFormat"; "descriptionExpr": "descriptionExpr"; "disabled": "disabled"; "dropDownAppointmentTemplate": "dropDownAppointmentTemplate"; "editing": "editing"; "elementAttr": "elementAttr"; "endDateExpr": "endDateExpr"; "endDateTimeZoneExpr": "endDateTimeZoneExpr"; "endDayHour": "endDayHour"; "firstDayOfWeek": "firstDayOfWeek"; "focusStateEnabled": "focusStateEnabled"; "groupByDate": "groupByDate"; "groups": "groups"; "height": "height"; "hint": "hint"; "indicatorUpdateInterval": "indicatorUpdateInterval"; "max": "max"; "maxAppointmentsPerCell": "maxAppointmentsPerCell"; "min": "min"; "noDataText": "noDataText"; "recurrenceEditMode": "recurrenceEditMode"; "recurrenceExceptionExpr": "recurrenceExceptionExpr"; "recurrenceRuleExpr": "recurrenceRuleExpr"; "remoteFiltering": "remoteFiltering"; "resourceCellTemplate": "resourceCellTemplate"; "resources": "resources"; "rtlEnabled": "rtlEnabled"; "scrolling": "scrolling"; "selectedCellData": "selectedCellData"; "shadeUntilCurrentTime": "shadeUntilCurrentTime"; "showAllDayPanel": "showAllDayPanel"; "showCurrentTimeIndicator": "showCurrentTimeIndicator"; "startDateExpr": "startDateExpr"; "startDateTimeZoneExpr": "startDateTimeZoneExpr"; "startDayHour": "startDayHour"; "tabIndex": "tabIndex"; "textExpr": "textExpr"; "timeCellTemplate": "timeCellTemplate"; "timeZone": "timeZone"; "useDropDownViewSwitcher": "useDropDownViewSwitcher"; "views": "views"; "visible": "visible"; "width": "width"; }, { "onAppointmentAdded": "onAppointmentAdded"; "onAppointmentAdding": "onAppointmentAdding"; "onAppointmentClick": "onAppointmentClick"; "onAppointmentContextMenu": "onAppointmentContextMenu"; "onAppointmentDblClick": "onAppointmentDblClick"; "onAppointmentDeleted": "onAppointmentDeleted"; "onAppointmentDeleting": "onAppointmentDeleting"; "onAppointmentFormOpening": "onAppointmentFormOpening"; "onAppointmentRendered": "onAppointmentRendered"; "onAppointmentTooltipShowing": "onAppointmentTooltipShowing"; "onAppointmentUpdated": "onAppointmentUpdated"; "onAppointmentUpdating": "onAppointmentUpdating"; "onCellClick": "onCellClick"; "onCellContextMenu": "onCellContextMenu"; "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "accessKeyChange": "accessKeyChange"; "adaptivityEnabledChange": "adaptivityEnabledChange"; "allDayExprChange": "allDayExprChange"; "allDayPanelModeChange": "allDayPanelModeChange"; "appointmentCollectorTemplateChange": "appointmentCollectorTemplateChange"; "appointmentDraggingChange": "appointmentDraggingChange"; "appointmentTemplateChange": "appointmentTemplateChange"; "appointmentTooltipTemplateChange": "appointmentTooltipTemplateChange"; "cellDurationChange": "cellDurationChange"; "crossScrollingEnabledChange": "crossScrollingEnabledChange"; "currentDateChange": "currentDateChange"; "currentViewChange": "currentViewChange"; "customizeDateNavigatorTextChange": "customizeDateNavigatorTextChange"; "dataCellTemplateChange": "dataCellTemplateChange"; "dataSourceChange": "dataSourceChange"; "dateCellTemplateChange": "dateCellTemplateChange"; "dateSerializationFormatChange": "dateSerializationFormatChange"; "descriptionExprChange": "descriptionExprChange"; "disabledChange": "disabledChange"; "dropDownAppointmentTemplateChange": "dropDownAppointmentTemplateChange"; "editingChange": "editingChange"; "elementAttrChange": "elementAttrChange"; "endDateExprChange": "endDateExprChange"; "endDateTimeZoneExprChange": "endDateTimeZoneExprChange"; "endDayHourChange": "endDayHourChange"; "firstDayOfWeekChange": "firstDayOfWeekChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "groupByDateChange": "groupByDateChange"; "groupsChange": "groupsChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "indicatorUpdateIntervalChange": "indicatorUpdateIntervalChange"; "maxChange": "maxChange"; "maxAppointmentsPerCellChange": "maxAppointmentsPerCellChange"; "minChange": "minChange"; "noDataTextChange": "noDataTextChange"; "recurrenceEditModeChange": "recurrenceEditModeChange"; "recurrenceExceptionExprChange": "recurrenceExceptionExprChange"; "recurrenceRuleExprChange": "recurrenceRuleExprChange"; "remoteFilteringChange": "remoteFilteringChange"; "resourceCellTemplateChange": "resourceCellTemplateChange"; "resourcesChange": "resourcesChange"; "rtlEnabledChange": "rtlEnabledChange"; "scrollingChange": "scrollingChange"; "selectedCellDataChange": "selectedCellDataChange"; "shadeUntilCurrentTimeChange": "shadeUntilCurrentTimeChange"; "showAllDayPanelChange": "showAllDayPanelChange"; "showCurrentTimeIndicatorChange": "showCurrentTimeIndicatorChange"; "startDateExprChange": "startDateExprChange"; "startDateTimeZoneExprChange": "startDateTimeZoneExprChange"; "startDayHourChange": "startDayHourChange"; "tabIndexChange": "tabIndexChange"; "textExprChange": "textExprChange"; "timeCellTemplateChange": "timeCellTemplateChange"; "timeZoneChange": "timeZoneChange"; "useDropDownViewSwitcherChange": "useDropDownViewSwitcherChange"; "viewsChange": "viewsChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, ["resourcesChildren", "viewsChildren"], never>;
}
export declare class DxSchedulerModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxSchedulerModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxSchedulerModule, [typeof DxSchedulerComponent], [typeof i1.DxoAppointmentDraggingModule, typeof i1.DxoEditingModule, typeof i1.DxiResourceModule, typeof i1.DxoScrollingModule, typeof i1.DxiViewModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule, typeof i3.BrowserTransferStateModule], [typeof DxSchedulerComponent, typeof i1.DxoAppointmentDraggingModule, typeof i1.DxoEditingModule, typeof i1.DxiResourceModule, typeof i1.DxoScrollingModule, typeof i1.DxiViewModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxSchedulerModule>;
}
