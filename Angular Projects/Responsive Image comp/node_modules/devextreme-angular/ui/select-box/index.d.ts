import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { Properties as dxPopupOptions } from 'devextreme/ui/popup';
import DxSelectBox from 'devextreme/ui/select_box';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiButtonComponent } from 'devextreme-angular/ui/nested';
import { DxiItemComponent } from 'devextreme-angular/ui/nested';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
import * as i3 from "@angular/platform-browser";
/**
 * The SelectBox UI component is an editor that allows an end user to select an item from a drop-down list.

 */
export declare class DxSelectBoxComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxSelectBox;
    /**
     * Specifies whether the UI component allows a user to enter a custom value. Requires the onCustomItemCreating handler implementation.
    
     */
    get acceptCustomValue(): boolean;
    set acceptCustomValue(value: boolean);
    /**
     * Specifies the shortcut key that sets focus on the UI component.
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * Specifies whether the UI component changes its visual state as a result of user interaction.
    
     */
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    /**
     * Allows you to add custom buttons to the input text field.
    
     */
    get buttons(): Array<string | DevExpress.common.TextEditorButton>;
    set buttons(value: Array<string | DevExpress.common.TextEditorButton>);
    /**
     * Specifies the DOM event after which the custom item should be created. Applies only if acceptCustomValue is enabled.
    
     */
    get customItemCreateEvent(): string;
    set customItemCreateEvent(value: string);
    /**
     * Binds the UI component to data.
    
     */
    get dataSource(): DataSource | DataSourceOptions | Store | null | string | Array<DevExpress.ui.CollectionWidgetItem | any>;
    set dataSource(value: DataSource | DataSourceOptions | Store | null | string | Array<DevExpress.ui.CollectionWidgetItem | any>);
    /**
     * Specifies whether to render the drop-down field&apos;s content when it is displayed. If false, the content is rendered immediately.
    
     */
    get deferRendering(): boolean;
    set deferRendering(value: boolean);
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Specifies the data field whose values should be displayed.
    
     */
    get displayExpr(): Function | string | undefined;
    set displayExpr(value: Function | string | undefined);
    /**
     * Returns the value currently displayed by the UI component.
    
     */
    get displayValue(): string | undefined;
    set displayValue(value: string | undefined);
    /**
     * Specifies a custom template for the drop-down button.
    
     */
    get dropDownButtonTemplate(): any;
    set dropDownButtonTemplate(value: any);
    /**
     * Configures the drop-down field which holds the content.
    
     */
    get dropDownOptions(): dxPopupOptions;
    set dropDownOptions(value: dxPopupOptions);
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * Specifies a custom template for the text field. Must contain the TextBox UI component.
    
     */
    get fieldTemplate(): any;
    set fieldTemplate(value: any);
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * Specifies whether data items should be grouped.
    
     */
    get grouped(): boolean;
    set grouped(value: boolean);
    /**
     * Specifies a custom template for group captions.
    
     */
    get groupTemplate(): any;
    set groupTemplate(value: any);
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * Specifies text for a hint that appears when a user pauses on the UI component.
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * Specifies the attributes to be passed on to the underlying HTML element.
    
     */
    get inputAttr(): any;
    set inputAttr(value: any);
    /**
     * Specifies or indicates whether the editor&apos;s value is valid.
    
     */
    get isValid(): boolean;
    set isValid(value: boolean);
    /**
     * An array of items displayed by the UI component.
    
     */
    get items(): Array<any | {
        disabled?: boolean;
        html?: string;
        template?: any;
        text?: string;
        visible?: boolean;
    }>;
    set items(value: Array<any | {
        disabled?: boolean;
        html?: string;
        template?: any;
        text?: string;
        visible?: boolean;
    }>);
    /**
     * Specifies a custom template for items.
    
     */
    get itemTemplate(): any;
    set itemTemplate(value: any);
    /**
     * Specifies a text string used to annotate the editor&apos;s value.
    
     */
    get label(): string;
    set label(value: string);
    /**
     * Specifies the label&apos;s display mode.
    
     */
    get labelMode(): string;
    set labelMode(value: string);
    /**
     * Specifies the maximum number of characters you can enter into the textbox.
    
     */
    get maxLength(): number | string;
    set maxLength(value: number | string);
    /**
     * The minimum number of characters that must be entered into the text box to begin a search. Applies only if searchEnabled is true.
    
     */
    get minSearchLength(): number;
    set minSearchLength(value: number);
    /**
     * The value to be assigned to the `name` attribute of the underlying HTML element.
    
     */
    get name(): string;
    set name(value: string);
    /**
     * Specifies the text or HTML markup displayed by the UI component if the item collection is empty.
    
     */
    get noDataText(): string;
    set noDataText(value: string);
    /**
     * Specifies whether or not the drop-down editor is displayed.
    
     */
    get opened(): boolean;
    set opened(value: boolean);
    /**
     * Specifies whether a user can open the drop-down list by clicking a text field.
    
     */
    get openOnFieldClick(): boolean;
    set openOnFieldClick(value: boolean);
    /**
     * The text that is provided as a hint in the select box editor.
    
     */
    get placeholder(): string;
    set placeholder(value: string);
    /**
     * Specifies whether the editor is read-only.
    
     */
    get readOnly(): boolean;
    set readOnly(value: boolean);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * Specifies whether to allow search operations.
    
     */
    get searchEnabled(): boolean;
    set searchEnabled(value: boolean);
    /**
     * Specifies the name of a data source item field or an expression whose value is compared to the search criterion.
    
     */
    get searchExpr(): Function | string | Array<Function | string>;
    set searchExpr(value: Function | string | Array<Function | string>);
    /**
     * Specifies a comparison operation used to search UI component items.
    
     */
    get searchMode(): string;
    set searchMode(value: string);
    /**
     * Specifies the time delay, in milliseconds, after the last character has been typed in, before a search is executed.
    
     */
    get searchTimeout(): number;
    set searchTimeout(value: number);
    /**
     * Gets the currently selected item.
    
     */
    get selectedItem(): any;
    set selectedItem(value: any);
    /**
     * Specifies whether to display the Clear button in the UI component.
    
     */
    get showClearButton(): boolean;
    set showClearButton(value: boolean);
    /**
     * Specifies whether or not the UI component displays unfiltered values until a user types a number of characters exceeding the minSearchLength property value.
    
     */
    get showDataBeforeSearch(): boolean;
    set showDataBeforeSearch(value: boolean);
    /**
     * Specifies whether the drop-down button is visible.
    
     */
    get showDropDownButton(): boolean;
    set showDropDownButton(value: boolean);
    /**
     * Specifies whether or not to display selection controls.
    
     */
    get showSelectionControls(): boolean;
    set showSelectionControls(value: boolean);
    /**
     * Specifies whether or not the UI component checks the inner text for spelling mistakes.
    
     */
    get spellcheck(): boolean;
    set spellcheck(value: boolean);
    /**
     * Specifies how the UI component&apos;s text field is styled.
    
     */
    get stylingMode(): string;
    set stylingMode(value: string);
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * The read-only property that holds the text displayed by the UI component input element.
    
     */
    get text(): string;
    set text(value: string);
    /**
     * Specifies whether the widget uses item&apos;s text a title attribute.
    
     */
    get useItemTextAsTitle(): boolean;
    set useItemTextAsTitle(value: boolean);
    /**
     * Information on the broken validation rule. Contains the first item from the validationErrors array.
    
     */
    get validationError(): any;
    set validationError(value: any);
    /**
     * An array of the validation rules that failed.
    
     */
    get validationErrors(): Array<any>;
    set validationErrors(value: Array<any>);
    /**
     * Specifies how the message about the validation rules that are not satisfied by this editor&apos;s value is displayed.
    
     */
    get validationMessageMode(): string;
    set validationMessageMode(value: string);
    /**
     * Specifies the position of a validation message relative to the component. The validation message describes the validation rules that this component&apos;s value does not satisfy.
    
     */
    get validationMessagePosition(): string;
    set validationMessagePosition(value: string);
    /**
     * Indicates or specifies the current validation status.
    
     */
    get validationStatus(): string;
    set validationStatus(value: string);
    /**
     * Specifies the currently selected value. May be an object if dataSource contains objects, the store key is specified, and valueExpr is not set.
    
     */
    get value(): any;
    set value(value: any);
    /**
     * Specifies the DOM events after which the UI component&apos;s value should be updated. Applies only if acceptCustomValue is set to true.
    
     * @deprecated Use the customItemCreateEvent option instead.
    
     */
    get valueChangeEvent(): string;
    set valueChangeEvent(value: string);
    /**
     * Specifies which data field provides unique values to the UI component&apos;s value.
    
     */
    get valueExpr(): Function | string;
    set valueExpr(value: Function | string);
    /**
     * Specifies whether the UI component is visible.
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
     * Specifies whether text that exceeds the drop-down list width should be wrapped.
    
     */
    get wrapItemText(): boolean;
    set wrapItemText(value: boolean);
    /**
    
     * A function that is executed when the UI component loses focus after the text field&apos;s content was changed using the keyboard.
    
    
     */
    onChange: EventEmitter<any>;
    /**
    
     * A function that is executed once the drop-down editor is closed.
    
    
     */
    onClosed: EventEmitter<any>;
    /**
    
     * A function that is executed when the UI component is rendered and each time the component is repainted.
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * A function that is executed when the UI component&apos;s input has been copied.
    
    
     */
    onCopy: EventEmitter<any>;
    /**
    
     * A function that is executed when a user adds a custom item. Requires acceptCustomValue to be set to true.
    
    
     */
    onCustomItemCreating: EventEmitter<any>;
    /**
    
     * A function that is executed when the UI component&apos;s input has been cut.
    
    
     */
    onCut: EventEmitter<any>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function that is executed when the Enter key has been pressed while the UI component is focused.
    
    
     */
    onEnterKey: EventEmitter<any>;
    /**
    
     * A function that is executed when the UI component gets focus.
    
    
     */
    onFocusIn: EventEmitter<any>;
    /**
    
     * A function that is executed when the UI component loses focus.
    
    
     */
    onFocusOut: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed each time the UI component&apos;s input is changed while the UI component is focused.
    
    
     */
    onInput: EventEmitter<any>;
    /**
    
     * A function that is executed when a list item is clicked or tapped.
    
    
     */
    onItemClick: EventEmitter<any>;
    /**
    
     * A function that is executed when a user is pressing a key on the keyboard.
    
    
     */
    onKeyDown: EventEmitter<any>;
    /**
    
     * A function that is executed when a user releases a key on the keyboard.
    
    
     */
    onKeyUp: EventEmitter<any>;
    /**
    
     * A function that is executed once the drop-down editor is opened.
    
    
     */
    onOpened: EventEmitter<any>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed when the UI component&apos;s input has been pasted.
    
    
     */
    onPaste: EventEmitter<any>;
    /**
    
     * A function that is executed when a list item is selected or selection is canceled.
    
    
     */
    onSelectionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed after the UI component&apos;s value is changed.
    
    
     */
    onValueChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    acceptCustomValueChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    buttonsChange: EventEmitter<Array<string | DevExpress.common.TextEditorButton>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customItemCreateEventChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DataSource | DataSourceOptions | Store | null | string | Array<DevExpress.ui.CollectionWidgetItem | any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    deferRenderingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    displayExprChange: EventEmitter<Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    displayValueChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dropDownButtonTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dropDownOptionsChange: EventEmitter<dxPopupOptions>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    fieldTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    inputAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    isValidChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsChange: EventEmitter<Array<any | {
        disabled?: boolean;
        html?: string;
        template?: any;
        text?: string;
        visible?: boolean;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    labelChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    labelModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxLengthChange: EventEmitter<number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minSearchLengthChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    nameChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    noDataTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    openedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    openOnFieldClickChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    placeholderChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    readOnlyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchExprChange: EventEmitter<Function | string | Array<Function | string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchTimeoutChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showClearButtonChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showDataBeforeSearchChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showDropDownButtonChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showSelectionControlsChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    spellcheckChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    stylingModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    textChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useItemTextAsTitleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorsChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationMessageModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationMessagePositionChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationStatusChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChangeEventChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    wrapItemTextChange: EventEmitter<boolean>;
    /**
    
     * 
    
    
     */
    onBlur: EventEmitter<any>;
    change(_: any): void;
    touched: (_: any) => void;
    get buttonsChildren(): QueryList<DxiButtonComponent>;
    set buttonsChildren(value: QueryList<DxiButtonComponent>);
    get itemsChildren(): QueryList<DxiItemComponent>;
    set itemsChildren(value: QueryList<DxiItemComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxSelectBox<any>;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _createWidget(element: any): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxSelectBoxComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxSelectBoxComponent, "dx-select-box", never, { "acceptCustomValue": "acceptCustomValue"; "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "buttons": "buttons"; "customItemCreateEvent": "customItemCreateEvent"; "dataSource": "dataSource"; "deferRendering": "deferRendering"; "disabled": "disabled"; "displayExpr": "displayExpr"; "displayValue": "displayValue"; "dropDownButtonTemplate": "dropDownButtonTemplate"; "dropDownOptions": "dropDownOptions"; "elementAttr": "elementAttr"; "fieldTemplate": "fieldTemplate"; "focusStateEnabled": "focusStateEnabled"; "grouped": "grouped"; "groupTemplate": "groupTemplate"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "inputAttr": "inputAttr"; "isValid": "isValid"; "items": "items"; "itemTemplate": "itemTemplate"; "label": "label"; "labelMode": "labelMode"; "maxLength": "maxLength"; "minSearchLength": "minSearchLength"; "name": "name"; "noDataText": "noDataText"; "opened": "opened"; "openOnFieldClick": "openOnFieldClick"; "placeholder": "placeholder"; "readOnly": "readOnly"; "rtlEnabled": "rtlEnabled"; "searchEnabled": "searchEnabled"; "searchExpr": "searchExpr"; "searchMode": "searchMode"; "searchTimeout": "searchTimeout"; "selectedItem": "selectedItem"; "showClearButton": "showClearButton"; "showDataBeforeSearch": "showDataBeforeSearch"; "showDropDownButton": "showDropDownButton"; "showSelectionControls": "showSelectionControls"; "spellcheck": "spellcheck"; "stylingMode": "stylingMode"; "tabIndex": "tabIndex"; "text": "text"; "useItemTextAsTitle": "useItemTextAsTitle"; "validationError": "validationError"; "validationErrors": "validationErrors"; "validationMessageMode": "validationMessageMode"; "validationMessagePosition": "validationMessagePosition"; "validationStatus": "validationStatus"; "value": "value"; "valueChangeEvent": "valueChangeEvent"; "valueExpr": "valueExpr"; "visible": "visible"; "width": "width"; "wrapItemText": "wrapItemText"; }, { "onChange": "onChange"; "onClosed": "onClosed"; "onContentReady": "onContentReady"; "onCopy": "onCopy"; "onCustomItemCreating": "onCustomItemCreating"; "onCut": "onCut"; "onDisposing": "onDisposing"; "onEnterKey": "onEnterKey"; "onFocusIn": "onFocusIn"; "onFocusOut": "onFocusOut"; "onInitialized": "onInitialized"; "onInput": "onInput"; "onItemClick": "onItemClick"; "onKeyDown": "onKeyDown"; "onKeyUp": "onKeyUp"; "onOpened": "onOpened"; "onOptionChanged": "onOptionChanged"; "onPaste": "onPaste"; "onSelectionChanged": "onSelectionChanged"; "onValueChanged": "onValueChanged"; "acceptCustomValueChange": "acceptCustomValueChange"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "buttonsChange": "buttonsChange"; "customItemCreateEventChange": "customItemCreateEventChange"; "dataSourceChange": "dataSourceChange"; "deferRenderingChange": "deferRenderingChange"; "disabledChange": "disabledChange"; "displayExprChange": "displayExprChange"; "displayValueChange": "displayValueChange"; "dropDownButtonTemplateChange": "dropDownButtonTemplateChange"; "dropDownOptionsChange": "dropDownOptionsChange"; "elementAttrChange": "elementAttrChange"; "fieldTemplateChange": "fieldTemplateChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "groupedChange": "groupedChange"; "groupTemplateChange": "groupTemplateChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "inputAttrChange": "inputAttrChange"; "isValidChange": "isValidChange"; "itemsChange": "itemsChange"; "itemTemplateChange": "itemTemplateChange"; "labelChange": "labelChange"; "labelModeChange": "labelModeChange"; "maxLengthChange": "maxLengthChange"; "minSearchLengthChange": "minSearchLengthChange"; "nameChange": "nameChange"; "noDataTextChange": "noDataTextChange"; "openedChange": "openedChange"; "openOnFieldClickChange": "openOnFieldClickChange"; "placeholderChange": "placeholderChange"; "readOnlyChange": "readOnlyChange"; "rtlEnabledChange": "rtlEnabledChange"; "searchEnabledChange": "searchEnabledChange"; "searchExprChange": "searchExprChange"; "searchModeChange": "searchModeChange"; "searchTimeoutChange": "searchTimeoutChange"; "selectedItemChange": "selectedItemChange"; "showClearButtonChange": "showClearButtonChange"; "showDataBeforeSearchChange": "showDataBeforeSearchChange"; "showDropDownButtonChange": "showDropDownButtonChange"; "showSelectionControlsChange": "showSelectionControlsChange"; "spellcheckChange": "spellcheckChange"; "stylingModeChange": "stylingModeChange"; "tabIndexChange": "tabIndexChange"; "textChange": "textChange"; "useItemTextAsTitleChange": "useItemTextAsTitleChange"; "validationErrorChange": "validationErrorChange"; "validationErrorsChange": "validationErrorsChange"; "validationMessageModeChange": "validationMessageModeChange"; "validationMessagePositionChange": "validationMessagePositionChange"; "validationStatusChange": "validationStatusChange"; "valueChange": "valueChange"; "valueChangeEventChange": "valueChangeEventChange"; "valueExprChange": "valueExprChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; "wrapItemTextChange": "wrapItemTextChange"; "onBlur": "onBlur"; }, ["buttonsChildren", "itemsChildren"], never>;
}
export declare class DxSelectBoxModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxSelectBoxModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxSelectBoxModule, [typeof DxSelectBoxComponent], [typeof i1.DxiButtonModule, typeof i1.DxoOptionsModule, typeof i1.DxoDropDownOptionsModule, typeof i1.DxoAnimationModule, typeof i1.DxoHideModule, typeof i1.DxoFromModule, typeof i1.DxoPositionModule, typeof i1.DxoAtModule, typeof i1.DxoBoundaryOffsetModule, typeof i1.DxoCollisionModule, typeof i1.DxoMyModule, typeof i1.DxoOffsetModule, typeof i1.DxoToModule, typeof i1.DxoShowModule, typeof i1.DxiToolbarItemModule, typeof i1.DxiItemModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule, typeof i3.BrowserTransferStateModule], [typeof DxSelectBoxComponent, typeof i1.DxiButtonModule, typeof i1.DxoOptionsModule, typeof i1.DxoDropDownOptionsModule, typeof i1.DxoAnimationModule, typeof i1.DxoHideModule, typeof i1.DxoFromModule, typeof i1.DxoPositionModule, typeof i1.DxoAtModule, typeof i1.DxoBoundaryOffsetModule, typeof i1.DxoCollisionModule, typeof i1.DxoMyModule, typeof i1.DxoOffsetModule, typeof i1.DxoToModule, typeof i1.DxoShowModule, typeof i1.DxiToolbarItemModule, typeof i1.DxiItemModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxSelectBoxModule>;
}
