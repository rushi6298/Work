import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';
import { AnimationConfig } from 'devextreme/animation/fx';
import DevExpress from 'devextreme/bundles/dx.all';
import DxToast from 'devextreme/ui/toast';
import { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
import * as i3 from "@angular/platform-browser";
/**
 * The Toast is a UI component that provides pop-up notifications.

 */
export declare class DxToastComponent extends DxComponent implements OnDestroy {
    instance: DxToast;
    /**
     * Specifies the shortcut key that sets focus on the UI component.
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * Configures UI component visibility animations. This object contains two fields: show and hide.
    
     */
    get animation(): {
        hide?: AnimationConfig;
        show?: AnimationConfig;
    };
    set animation(value: {
        hide?: AnimationConfig;
        show?: AnimationConfig;
    });
    /**
     * A Boolean value specifying whether or not the toast is closed if a user clicks it.
    
     */
    get closeOnClick(): boolean;
    set closeOnClick(value: boolean);
    /**
     * Specifies whether to close the UI component if a user clicks outside it.
    
     * @deprecated Use the hideOnOutsideClick option instead.
    
     */
    get closeOnOutsideClick(): boolean | Function;
    set closeOnOutsideClick(value: boolean | Function);
    /**
     * A Boolean value specifying whether or not the toast is closed if a user swipes it out of the screen boundaries.
    
     */
    get closeOnSwipe(): boolean;
    set closeOnSwipe(value: boolean);
    /**
     * Specifies a custom template for the UI component content.
    
     */
    get contentTemplate(): any;
    set contentTemplate(value: any);
    /**
     * Copies your custom CSS classes from the root element to the wrapper element.
    
     * @deprecated Use the wrapperAttr property instead.
    
     */
    get copyRootClassesToWrapper(): boolean;
    set copyRootClassesToWrapper(value: boolean);
    /**
     * Specifies whether to render the UI component&apos;s content when it is displayed. If false, the content is rendered immediately.
    
     */
    get deferRendering(): boolean;
    set deferRendering(value: boolean);
    /**
     * The time span in milliseconds during which the Toast UI component is visible.
    
     */
    get displayTime(): number;
    set displayTime(value: number);
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     * @deprecated Use the wrapperAttr option instead.
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * Specifies the UI component&apos;s height.
    
     */
    get height(): number | Function | string;
    set height(value: number | Function | string);
    /**
     * Specifies whether to hide the UI component if a user clicks outside it.
    
     */
    get hideOnOutsideClick(): boolean | Function;
    set hideOnOutsideClick(value: boolean | Function);
    /**
     * Specifies whether to hide the widget when users scroll one of its parent elements.
    
     */
    get hideOnParentScroll(): boolean;
    set hideOnParentScroll(value: boolean);
    /**
     * Specifies text for a hint that appears when a user pauses on the UI component.
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * Specifies the maximum height the UI component can reach while resizing.
    
     */
    get maxHeight(): number | Function | string;
    set maxHeight(value: number | Function | string);
    /**
     * Specifies the maximum width the UI component can reach while resizing.
    
     */
    get maxWidth(): number | Function | string;
    set maxWidth(value: number | Function | string);
    /**
     * The Toast message text.
    
     */
    get message(): string;
    set message(value: string);
    /**
     * Specifies the minimum height the UI component can reach while resizing.
    
     */
    get minHeight(): number | Function | string;
    set minHeight(value: number | Function | string);
    /**
     * Specifies the minimum width the UI component can reach while resizing.
    
     */
    get minWidth(): number | Function | string;
    set minWidth(value: number | Function | string);
    /**
     * Positions the UI component.
    
     */
    get position(): DevExpress.PositionConfig | string;
    set position(value: DevExpress.PositionConfig | string);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * Specifies whether to shade the background when the UI component is active.
    
     */
    get shading(): boolean;
    set shading(value: boolean);
    /**
     * Specifies the shading color. Applies only if shading is enabled.
    
     */
    get shadingColor(): string;
    set shadingColor(value: string);
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * Specifies the Toast UI component type.
    
     */
    get type(): string;
    set type(value: string);
    /**
     * A Boolean value specifying whether or not the UI component is visible.
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * Specifies the UI component&apos;s width.
    
     */
    get width(): number | Function | string;
    set width(value: number | Function | string);
    /**
     * Specifies the global attributes for the UI component&apos;s wrapper element.
    
     */
    get wrapperAttr(): any;
    set wrapperAttr(value: any);
    /**
    
     * A function that is executed when the UI component is rendered and each time the component is repainted.
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function that is executed after the UI component is hidden.
    
    
     */
    onHidden: EventEmitter<any>;
    /**
    
     * A function that is executed before the UI component is hidden.
    
    
     */
    onHiding: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed before the UI component is displayed.
    
    
     */
    onShowing: EventEmitter<any>;
    /**
    
     * A function that is executed after the UI component is displayed.
    
    
     */
    onShown: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationChange: EventEmitter<{
        hide?: AnimationConfig;
        show?: AnimationConfig;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    closeOnClickChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    closeOnOutsideClickChange: EventEmitter<boolean | Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    closeOnSwipeChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    contentTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    copyRootClassesToWrapperChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    deferRenderingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    displayTimeChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hideOnOutsideClickChange: EventEmitter<boolean | Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hideOnParentScrollChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxHeightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxWidthChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    messageChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minHeightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minWidthChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    positionChange: EventEmitter<DevExpress.PositionConfig | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    shadingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    shadingColorChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    typeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    wrapperAttrChange: EventEmitter<any>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxToast;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxToastComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxToastComponent, "dx-toast", never, { "accessKey": "accessKey"; "animation": "animation"; "closeOnClick": "closeOnClick"; "closeOnOutsideClick": "closeOnOutsideClick"; "closeOnSwipe": "closeOnSwipe"; "contentTemplate": "contentTemplate"; "copyRootClassesToWrapper": "copyRootClassesToWrapper"; "deferRendering": "deferRendering"; "displayTime": "displayTime"; "elementAttr": "elementAttr"; "focusStateEnabled": "focusStateEnabled"; "height": "height"; "hideOnOutsideClick": "hideOnOutsideClick"; "hideOnParentScroll": "hideOnParentScroll"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "maxHeight": "maxHeight"; "maxWidth": "maxWidth"; "message": "message"; "minHeight": "minHeight"; "minWidth": "minWidth"; "position": "position"; "rtlEnabled": "rtlEnabled"; "shading": "shading"; "shadingColor": "shadingColor"; "tabIndex": "tabIndex"; "type": "type"; "visible": "visible"; "width": "width"; "wrapperAttr": "wrapperAttr"; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onHidden": "onHidden"; "onHiding": "onHiding"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onShowing": "onShowing"; "onShown": "onShown"; "accessKeyChange": "accessKeyChange"; "animationChange": "animationChange"; "closeOnClickChange": "closeOnClickChange"; "closeOnOutsideClickChange": "closeOnOutsideClickChange"; "closeOnSwipeChange": "closeOnSwipeChange"; "contentTemplateChange": "contentTemplateChange"; "copyRootClassesToWrapperChange": "copyRootClassesToWrapperChange"; "deferRenderingChange": "deferRenderingChange"; "displayTimeChange": "displayTimeChange"; "elementAttrChange": "elementAttrChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "heightChange": "heightChange"; "hideOnOutsideClickChange": "hideOnOutsideClickChange"; "hideOnParentScrollChange": "hideOnParentScrollChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "maxHeightChange": "maxHeightChange"; "maxWidthChange": "maxWidthChange"; "messageChange": "messageChange"; "minHeightChange": "minHeightChange"; "minWidthChange": "minWidthChange"; "positionChange": "positionChange"; "rtlEnabledChange": "rtlEnabledChange"; "shadingChange": "shadingChange"; "shadingColorChange": "shadingColorChange"; "tabIndexChange": "tabIndexChange"; "typeChange": "typeChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; "wrapperAttrChange": "wrapperAttrChange"; }, never, never>;
}
export declare class DxToastModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxToastModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxToastModule, [typeof DxToastComponent], [typeof i1.DxoAnimationModule, typeof i1.DxoHideModule, typeof i1.DxoFromModule, typeof i1.DxoPositionModule, typeof i1.DxoAtModule, typeof i1.DxoBoundaryOffsetModule, typeof i1.DxoCollisionModule, typeof i1.DxoMyModule, typeof i1.DxoOffsetModule, typeof i1.DxoToModule, typeof i1.DxoShowModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule, typeof i3.BrowserTransferStateModule], [typeof DxToastComponent, typeof i1.DxoAnimationModule, typeof i1.DxoHideModule, typeof i1.DxoFromModule, typeof i1.DxoPositionModule, typeof i1.DxoAtModule, typeof i1.DxoBoundaryOffsetModule, typeof i1.DxoCollisionModule, typeof i1.DxoMyModule, typeof i1.DxoOffsetModule, typeof i1.DxoToModule, typeof i1.DxoShowModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxToastModule>;
}
