import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import { UserDefinedElement } from 'devextreme/core/element';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { Format } from 'devextreme/localization';
import { Font } from 'devextreme/viz/core/base_widget';
import DxTreeMap from 'devextreme/viz/tree_map';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
import * as i3 from "@angular/platform-browser";
/**
 * The TreeMap is a UI component that displays hierarchical data by using nested rectangles.

 */
export declare class DxTreeMapComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxTreeMap;
    /**
     * Specifies the name of the data source field that provides nested items for a group. Applies to hierarchical data sources only.
    
     */
    get childrenField(): string;
    set childrenField(value: string);
    /**
     * Specifies the name of the data source field that provides colors for tiles.
    
     */
    get colorField(): string;
    set colorField(value: string);
    /**
     * Manages the color settings.
    
     */
    get colorizer(): {
        colorCodeField?: string | undefined;
        colorizeGroups?: boolean;
        palette?: string | Array<string>;
        paletteExtensionMode?: string;
        range?: Array<number>;
        type?: string | undefined;
    };
    set colorizer(value: {
        colorCodeField?: string | undefined;
        colorizeGroups?: boolean;
        palette?: string | Array<string>;
        paletteExtensionMode?: string;
        range?: Array<number>;
        type?: string | undefined;
    });
    /**
     * Binds the UI component to data.
    
     */
    get dataSource(): DataSource | DataSourceOptions | Store | null | string | Array<any>;
    set dataSource(value: DataSource | DataSourceOptions | Store | null | string | Array<any>);
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * Configures the exporting and printing features.
    
     */
    get export(): {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: Array<string>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    };
    set export(value: {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: Array<string>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    });
    /**
     * Configures groups.
    
     */
    get group(): {
        border?: {
            color?: string;
            width?: number;
        };
        color?: string;
        headerHeight?: number | undefined;
        hoverEnabled?: boolean | undefined;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
        label?: {
            font?: Font;
            textOverflow?: string;
            visible?: boolean;
        };
        padding?: number;
        selectionStyle?: {
            border?: {
                color?: string;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
    };
    set group(value: {
        border?: {
            color?: string;
            width?: number;
        };
        color?: string;
        headerHeight?: number | undefined;
        hoverEnabled?: boolean | undefined;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
        label?: {
            font?: Font;
            textOverflow?: string;
            visible?: boolean;
        };
        padding?: number;
        selectionStyle?: {
            border?: {
                color?: string;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
    });
    /**
     * Specifies whether tiles and groups change their style when a user pauses on them.
    
     */
    get hoverEnabled(): boolean | undefined;
    set hoverEnabled(value: boolean | undefined);
    /**
     * Specifies the name of the data source field that provides IDs for items. Applies to plain data sources only.
    
     */
    get idField(): string | undefined;
    set idField(value: string | undefined);
    /**
     * Specifies whether the user will interact with a single tile or its group.
    
     */
    get interactWithGroup(): boolean;
    set interactWithGroup(value: boolean);
    /**
     * Specifies the name of the data source field that provides texts for tile and group labels.
    
     */
    get labelField(): string;
    set labelField(value: string);
    /**
     * Specifies the layout algorithm.
    
     */
    get layoutAlgorithm(): Function | string;
    set layoutAlgorithm(value: Function | string);
    /**
     * Specifies the direction in which the items will be laid out.
    
     */
    get layoutDirection(): string;
    set layoutDirection(value: string);
    /**
     * Configures the loading indicator.
    
     */
    get loadingIndicator(): {
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    };
    set loadingIndicator(value: {
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    });
    /**
     * Specifies how many hierarchical levels must be visualized.
    
     */
    get maxDepth(): number | undefined;
    set maxDepth(value: number | undefined);
    /**
     * Specifies the name of the data source field that provides parent IDs for items. Applies to plain data sources only.
    
     */
    get parentField(): string | undefined;
    set parentField(value: string | undefined);
    /**
     * Notifies the UI component that it is embedded into an HTML page that uses a tag modifying the path.
    
     */
    get pathModified(): boolean;
    set pathModified(value: boolean);
    /**
     * Specifies whether to redraw the UI component when the size of the container changes or a mobile device rotates.
    
     */
    get redrawOnResize(): boolean;
    set redrawOnResize(value: boolean);
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * Specifies whether a single or multiple nodes can be in the selected state simultaneously.
    
     */
    get selectionMode(): string | undefined;
    set selectionMode(value: string | undefined);
    /**
     * Specifies the UI component&apos;s size in pixels.
    
     */
    get size(): {
        height?: number | undefined;
        width?: number | undefined;
    };
    set size(value: {
        height?: number | undefined;
        width?: number | undefined;
    });
    /**
     * Sets the name of the theme the UI component uses.
    
     */
    get theme(): string;
    set theme(value: string);
    /**
     * Configures tiles.
    
     */
    get tile(): {
        border?: {
            color?: string;
            width?: number;
        };
        color?: string;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
        label?: {
            font?: Font;
            textOverflow?: string;
            visible?: boolean;
            wordWrap?: string;
        };
        selectionStyle?: {
            border?: {
                color?: string;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
    };
    set tile(value: {
        border?: {
            color?: string;
            width?: number;
        };
        color?: string;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
        label?: {
            font?: Font;
            textOverflow?: string;
            visible?: boolean;
            wordWrap?: string;
        };
        selectionStyle?: {
            border?: {
                color?: string;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
    });
    /**
     * Configures the UI component&apos;s title.
    
     */
    get title(): string | {
        font?: Font;
        horizontalAlignment?: string;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: string;
            wordWrap?: string;
        };
        text?: string;
        textOverflow?: string;
        verticalAlignment?: string;
        wordWrap?: string;
    };
    set title(value: string | {
        font?: Font;
        horizontalAlignment?: string;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: string;
            wordWrap?: string;
        };
        text?: string;
        textOverflow?: string;
        verticalAlignment?: string;
        wordWrap?: string;
    });
    /**
     * Configures tooltips - small pop-up rectangles that display information about a data-visualizing UI component element being pressed or hovered over with the mouse pointer.
    
     */
    get tooltip(): {
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement | undefined;
        contentTemplate?: any | undefined;
        cornerRadius?: number;
        customizeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | string | undefined;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number | undefined;
    };
    set tooltip(value: {
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement | undefined;
        contentTemplate?: any | undefined;
        cornerRadius?: number;
        customizeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | string | undefined;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number | undefined;
    });
    /**
     * Specifies the name of the data source field that provides values for tiles.
    
     */
    get valueField(): string;
    set valueField(value: string);
    /**
    
     * A function that is executed when a node is clicked or tapped.
    
    
     */
    onClick: EventEmitter<any>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function that is executed when the UI component&apos;s rendering has finished.
    
    
     */
    onDrawn: EventEmitter<any>;
    /**
    
     * A function that is executed when a user drills up or down.
    
    
     */
    onDrill: EventEmitter<any>;
    /**
    
     * A function that is executed after the UI component is exported.
    
    
     */
    onExported: EventEmitter<any>;
    /**
    
     * A function that is executed before the UI component is exported.
    
    
     */
    onExporting: EventEmitter<any>;
    /**
    
     * A function that is executed before a file with exported UI component is saved to the user&apos;s local storage.
    
    
     */
    onFileSaving: EventEmitter<any>;
    /**
    
     * A function that is executed after the pointer enters or leaves a node.
    
    
     */
    onHoverChanged: EventEmitter<any>;
    /**
    
     * A function that is executed when an error or warning occurs.
    
    
     */
    onIncidentOccurred: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed only once, after the nodes are initialized.
    
    
     */
    onNodesInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed before the nodes are displayed and each time the collection of active nodes is changed.
    
    
     */
    onNodesRendering: EventEmitter<any>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed when a node is selected or selection is canceled.
    
    
     */
    onSelectionChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    childrenFieldChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    colorFieldChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    colorizerChange: EventEmitter<{
        colorCodeField?: string | undefined;
        colorizeGroups?: boolean;
        palette?: string | Array<string>;
        paletteExtensionMode?: string;
        range?: Array<number>;
        type?: string | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DataSource | DataSourceOptions | Store | null | string | Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    exportChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: Array<string>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupChange: EventEmitter<{
        border?: {
            color?: string;
            width?: number;
        };
        color?: string;
        headerHeight?: number | undefined;
        hoverEnabled?: boolean | undefined;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
        label?: {
            font?: Font;
            textOverflow?: string;
            visible?: boolean;
        };
        padding?: number;
        selectionStyle?: {
            border?: {
                color?: string;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverEnabledChange: EventEmitter<boolean | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    idFieldChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    interactWithGroupChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    labelFieldChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    layoutAlgorithmChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    layoutDirectionChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    loadingIndicatorChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxDepthChange: EventEmitter<number | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    parentFieldChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pathModifiedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    redrawOnResizeChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectionModeChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sizeChange: EventEmitter<{
        height?: number | undefined;
        width?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    themeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tileChange: EventEmitter<{
        border?: {
            color?: string;
            width?: number;
        };
        color?: string;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
        label?: {
            font?: Font;
            textOverflow?: string;
            visible?: boolean;
            wordWrap?: string;
        };
        selectionStyle?: {
            border?: {
                color?: string;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    titleChange: EventEmitter<string | {
        font?: Font;
        horizontalAlignment?: string;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: string;
            wordWrap?: string;
        };
        text?: string;
        textOverflow?: string;
        verticalAlignment?: string;
        wordWrap?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tooltipChange: EventEmitter<{
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement | undefined;
        contentTemplate?: any | undefined;
        cornerRadius?: number;
        customizeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | string | undefined;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueFieldChange: EventEmitter<string>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxTreeMap;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxTreeMapComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxTreeMapComponent, "dx-tree-map", never, { "childrenField": "childrenField"; "colorField": "colorField"; "colorizer": "colorizer"; "dataSource": "dataSource"; "disabled": "disabled"; "elementAttr": "elementAttr"; "export": "export"; "group": "group"; "hoverEnabled": "hoverEnabled"; "idField": "idField"; "interactWithGroup": "interactWithGroup"; "labelField": "labelField"; "layoutAlgorithm": "layoutAlgorithm"; "layoutDirection": "layoutDirection"; "loadingIndicator": "loadingIndicator"; "maxDepth": "maxDepth"; "parentField": "parentField"; "pathModified": "pathModified"; "redrawOnResize": "redrawOnResize"; "rtlEnabled": "rtlEnabled"; "selectionMode": "selectionMode"; "size": "size"; "theme": "theme"; "tile": "tile"; "title": "title"; "tooltip": "tooltip"; "valueField": "valueField"; }, { "onClick": "onClick"; "onDisposing": "onDisposing"; "onDrawn": "onDrawn"; "onDrill": "onDrill"; "onExported": "onExported"; "onExporting": "onExporting"; "onFileSaving": "onFileSaving"; "onHoverChanged": "onHoverChanged"; "onIncidentOccurred": "onIncidentOccurred"; "onInitialized": "onInitialized"; "onNodesInitialized": "onNodesInitialized"; "onNodesRendering": "onNodesRendering"; "onOptionChanged": "onOptionChanged"; "onSelectionChanged": "onSelectionChanged"; "childrenFieldChange": "childrenFieldChange"; "colorFieldChange": "colorFieldChange"; "colorizerChange": "colorizerChange"; "dataSourceChange": "dataSourceChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "exportChange": "exportChange"; "groupChange": "groupChange"; "hoverEnabledChange": "hoverEnabledChange"; "idFieldChange": "idFieldChange"; "interactWithGroupChange": "interactWithGroupChange"; "labelFieldChange": "labelFieldChange"; "layoutAlgorithmChange": "layoutAlgorithmChange"; "layoutDirectionChange": "layoutDirectionChange"; "loadingIndicatorChange": "loadingIndicatorChange"; "maxDepthChange": "maxDepthChange"; "parentFieldChange": "parentFieldChange"; "pathModifiedChange": "pathModifiedChange"; "redrawOnResizeChange": "redrawOnResizeChange"; "rtlEnabledChange": "rtlEnabledChange"; "selectionModeChange": "selectionModeChange"; "sizeChange": "sizeChange"; "themeChange": "themeChange"; "tileChange": "tileChange"; "titleChange": "titleChange"; "tooltipChange": "tooltipChange"; "valueFieldChange": "valueFieldChange"; }, never, never>;
}
export declare class DxTreeMapModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxTreeMapModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxTreeMapModule, [typeof DxTreeMapComponent], [typeof i1.DxoColorizerModule, typeof i1.DxoExportModule, typeof i1.DxoGroupModule, typeof i1.DxoBorderModule, typeof i1.DxoHoverStyleModule, typeof i1.DxoLabelModule, typeof i1.DxoFontModule, typeof i1.DxoSelectionStyleModule, typeof i1.DxoLoadingIndicatorModule, typeof i1.DxoSizeModule, typeof i1.DxoTileModule, typeof i1.DxoTitleModule, typeof i1.DxoMarginModule, typeof i1.DxoSubtitleModule, typeof i1.DxoTooltipModule, typeof i1.DxoFormatModule, typeof i1.DxoShadowModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule, typeof i3.BrowserTransferStateModule], [typeof DxTreeMapComponent, typeof i1.DxoColorizerModule, typeof i1.DxoExportModule, typeof i1.DxoGroupModule, typeof i1.DxoBorderModule, typeof i1.DxoHoverStyleModule, typeof i1.DxoLabelModule, typeof i1.DxoFontModule, typeof i1.DxoSelectionStyleModule, typeof i1.DxoLoadingIndicatorModule, typeof i1.DxoSizeModule, typeof i1.DxoTileModule, typeof i1.DxoTitleModule, typeof i1.DxoMarginModule, typeof i1.DxoSubtitleModule, typeof i1.DxoTooltipModule, typeof i1.DxoFormatModule, typeof i1.DxoShadowModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxTreeMapModule>;
}
